/**
 * OpenAPI definition
 * # Exciting News  Hey there, amazing developers! üëã  We\'ve got some fantastic news to share that will make your experience with our product even better. We\'re thrilled to announce the implementation of API-Keys, which brings a new level of control and convenience to your development process. So, let\'s dive right into the details! ‚ú®  ## API-Keys for Enhanced Functionality üîë  Starting now, we have introduced API-Keys to streamline your interactions with our methods. You might have noticed a slight change while making requests ‚Äì now, all you need to do is include the parameter `X-API-KEY` in the Header of your request. Simple as that!  ## Get Your API-Key in a Snap! ‚ö°Ô∏è  Securing your API-Key is a breeze. We\'ve made the process super user-friendly to ensure you can get started quickly. Just head over to our website and fill out a simple form. Once you\'ve done that, your shiny new API-Key will be delivered straight to your email inbox. Easy peasy! üìß  [Get Your API-Key Here](https://api.rarible.org/registration) [Configure SDK with API-key](https://github.com/rarible/sdk#api-querying)  ## Unlock the Power of the Rarible Protocol üîì  As passionate developers, we know you\'re always hungry for knowledge and eager to explore new frontiers. That\'s why we invite you to discover the incredible world of the Rarible Protocol. By visiting our dedicated protocol page, you\'ll gain access to a treasure trove of useful information, tips, and insights that will elevate your development skills to new heights. üöÄ  [Explore the Rarible Protocol](https://rarible.org)  So, buckle up and get ready for an enhanced development journey with our API-Keys. We\'re excited to see what you\'ll create using our revamped system! üí™üöÄ  Stay curious, keep innovating, and happy coding! ‚ú®  [P.S. Join our Discord Server to stay up to date and ask questions](https://discord.gg/rarifoundation)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { Activities, ActivitiesByUsersRequest, ActivitySort, ActivityType, Blockchain, SalesChart, SyncSort, SyncType, UnionApiErrorBadRequest, UnionApiErrorServerError, UserActivityType } from '../models';
export interface GetActivitiesByCollectionRequest {
    type: Array<ActivityType>;
    collection: Array<string>;
    bidCurrencies?: Array<string>;
    continuation?: string;
    cursor?: string;
    size?: number;
    sort?: ActivitySort;
}
export interface GetActivitiesByItemRequest {
    type: Array<ActivityType>;
    itemId: string;
    bidCurrencies?: Array<string>;
    continuation?: string;
    cursor?: string;
    size?: number;
    sort?: ActivitySort;
}
export interface GetActivitiesByUserRequest {
    type: Array<UserActivityType>;
    user: Array<string>;
    blockchains?: Array<Blockchain>;
    bidCurrencies?: Array<string>;
    from?: Date;
    to?: Date;
    continuation?: string;
    cursor?: string;
    size?: number;
    sort?: ActivitySort;
}
export interface GetActivitiesByUsersRequest {
    activitiesByUsersRequest: ActivitiesByUsersRequest;
}
export interface GetAllActivitiesRequest {
    type: Array<ActivityType>;
    blockchains?: Array<Blockchain>;
    bidCurrencies?: Array<string>;
    continuation?: string;
    cursor?: string;
    size?: number;
    sort?: ActivitySort;
}
export interface GetAllActivitiesSyncRequest {
    blockchain: Blockchain;
    continuation?: string;
    size?: number;
    sort?: SyncSort;
    type?: SyncType;
}
export interface GetSalesChartRequest {
    id: string;
    from?: Date;
    to?: Date;
    size?: number;
    cursor?: string;
}
/**
 * no description
 */
export declare class ActivityControllerApi extends runtime.BaseAPI {
    /**
     * Returns Activities related to NFTs from specified Collection and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get NFT Collection Activities
     */
    getActivitiesByCollectionRaw(requestParameters: GetActivitiesByCollectionRequest): Promise<GetActivitiesByCollectionResponse>;
    /**
     * Returns Activities related to NFTs from specified Collection and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get NFT Collection Activities
     */
    getActivitiesByCollection(requestParameters: GetActivitiesByCollectionRequest): Promise<Activities>;
    /**
     * Returns Activities related to specified NFT and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get NFT Activities
     */
    getActivitiesByItemRaw(requestParameters: GetActivitiesByItemRequest): Promise<GetActivitiesByItemResponse>;
    /**
     * Returns Activities related to specified NFT and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get NFT Activities
     */
    getActivitiesByItem(requestParameters: GetActivitiesByItemRequest): Promise<Activities>;
    /**
     * Returns user\'s Activities (like transfers, mints, sells etc) sorted by date. This API is deprecated in favor of `Search Activities`
     * Get user Activities
     */
    getActivitiesByUserRaw(requestParameters: GetActivitiesByUserRequest): Promise<GetActivitiesByUserResponse>;
    /**
     * Returns user\'s Activities (like transfers, mints, sells etc) sorted by date. This API is deprecated in favor of `Search Activities`
     * Get user Activities
     */
    getActivitiesByUser(requestParameters: GetActivitiesByUserRequest): Promise<Activities>;
    /**
     * Returns users Activities (like transfers, mints, sells etc) sorted by date. This API is deprecated in favor of `Search Activities`
     * Get users Activities
     */
    getActivitiesByUsersRaw(requestParameters: GetActivitiesByUsersRequest): Promise<GetActivitiesByUsersResponse>;
    /**
     * Returns users Activities (like transfers, mints, sells etc) sorted by date. This API is deprecated in favor of `Search Activities`
     * Get users Activities
     */
    getActivitiesByUsers(requestParameters: GetActivitiesByUsersRequest): Promise<Activities>;
    /**
     * Returns all Activities in accordance with specified filters and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get all Activities
     */
    getAllActivitiesRaw(requestParameters: GetAllActivitiesRequest): Promise<GetAllActivitiesResponse>;
    /**
     * Returns all Activities in accordance with specified filters and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get all Activities
     */
    getAllActivities(requestParameters: GetAllActivitiesRequest): Promise<Activities>;
    /**
     * Returns all Activities in accordance with specified filters and sorted by `db updated` date. During internal updates (like migrations) Activities can be updated for technical reasons. In such case, `date` field won\'t be changed. If you want to store Activities in your own storage and keep it synced, use this method.
     * Get all Activities (for sync)
     */
    getAllActivitiesSyncRaw(requestParameters: GetAllActivitiesSyncRequest): Promise<GetAllActivitiesSyncResponse>;
    /**
     * Returns all Activities in accordance with specified filters and sorted by `db updated` date. During internal updates (like migrations) Activities can be updated for technical reasons. In such case, `date` field won\'t be changed. If you want to store Activities in your own storage and keep it synced, use this method.
     * Get all Activities (for sync)
     */
    getAllActivitiesSync(requestParameters: GetAllActivitiesSyncRequest): Promise<Activities>;
    /**
     * Returns list of sales by collection
     * Get sales chart
     */
    getSalesChartRaw(requestParameters: GetSalesChartRequest): Promise<GetSalesChartResponse>;
    /**
     * Returns list of sales by collection
     * Get sales chart
     */
    getSalesChart(requestParameters: GetSalesChartRequest): Promise<SalesChart>;
}
export type GetActivitiesByCollection200 = {
    status: 200;
    value: Activities;
};
export type GetActivitiesByCollection400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetActivitiesByCollection500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetActivitiesByCollectionResponse = GetActivitiesByCollection200 | GetActivitiesByCollection400 | GetActivitiesByCollection500;
export type GetActivitiesByItem200 = {
    status: 200;
    value: Activities;
};
export type GetActivitiesByItem400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetActivitiesByItem500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetActivitiesByItemResponse = GetActivitiesByItem200 | GetActivitiesByItem400 | GetActivitiesByItem500;
export type GetActivitiesByUser200 = {
    status: 200;
    value: Activities;
};
export type GetActivitiesByUser400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetActivitiesByUser500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetActivitiesByUserResponse = GetActivitiesByUser200 | GetActivitiesByUser400 | GetActivitiesByUser500;
export type GetActivitiesByUsers200 = {
    status: 200;
    value: Activities;
};
export type GetActivitiesByUsers400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetActivitiesByUsers500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetActivitiesByUsersResponse = GetActivitiesByUsers200 | GetActivitiesByUsers400 | GetActivitiesByUsers500;
export type GetAllActivities200 = {
    status: 200;
    value: Activities;
};
export type GetAllActivities400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetAllActivities500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetAllActivitiesResponse = GetAllActivities200 | GetAllActivities400 | GetAllActivities500;
export type GetAllActivitiesSync200 = {
    status: 200;
    value: Activities;
};
export type GetAllActivitiesSync400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetAllActivitiesSync500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetAllActivitiesSyncResponse = GetAllActivitiesSync200 | GetAllActivitiesSync400 | GetAllActivitiesSync500;
export type GetSalesChart200 = {
    status: 200;
    value: SalesChart;
};
export type GetSalesChart400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetSalesChart500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetSalesChartResponse = GetSalesChart200 | GetSalesChart400 | GetSalesChart500;
