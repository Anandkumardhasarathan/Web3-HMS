"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * # Exciting News  Hey there, amazing developers! 👋  We\'ve got some fantastic news to share that will make your experience with our product even better. We\'re thrilled to announce the implementation of API-Keys, which brings a new level of control and convenience to your development process. So, let\'s dive right into the details! ✨  ## API-Keys for Enhanced Functionality 🔑  Starting now, we have introduced API-Keys to streamline your interactions with our methods. You might have noticed a slight change while making requests – now, all you need to do is include the parameter `X-API-KEY` in the Header of your request. Simple as that!  ## Get Your API-Key in a Snap! ⚡️  Securing your API-Key is a breeze. We\'ve made the process super user-friendly to ensure you can get started quickly. Just head over to our website and fill out a simple form. Once you\'ve done that, your shiny new API-Key will be delivered straight to your email inbox. Easy peasy! 📧  [Get Your API-Key Here](https://api.rarible.org/registration) [Configure SDK with API-key](https://github.com/rarible/sdk#api-querying)  ## Unlock the Power of the Rarible Protocol 🔓  As passionate developers, we know you\'re always hungry for knowledge and eager to explore new frontiers. That\'s why we invite you to discover the incredible world of the Rarible Protocol. By visiting our dedicated protocol page, you\'ll gain access to a treasure trove of useful information, tips, and insights that will elevate your development skills to new heights. 🚀  [Explore the Rarible Protocol](https://rarible.org)  So, buckle up and get ready for an enhanced development journey with our API-Keys. We\'re excited to see what you\'ll create using our revamped system! 💪🚀  Stay curious, keep innovating, and happy coding! ✨  [P.S. Join our Discord Server to stay up to date and ask questions](https://discord.gg/rarifoundation)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityControllerApi = void 0;
var runtime = __importStar(require("../runtime"));
/**
 * no description
 */
var ActivityControllerApi = /** @class */ (function (_super) {
    __extends(ActivityControllerApi, _super);
    function ActivityControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns Activities related to NFTs from specified Collection and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get NFT Collection Activities
     */
    ActivityControllerApi.prototype.getActivitiesByCollectionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getActivitiesByCollection.');
                        }
                        if (requestParameters.collection === null || requestParameters.collection === undefined) {
                            throw new runtime.RequiredError('collection', 'Required parameter requestParameters.collection was null or undefined when calling getActivitiesByCollection.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.collection) {
                            queryParameters['collection'] = requestParameters.collection;
                        }
                        if (requestParameters.bidCurrencies) {
                            queryParameters['bidCurrencies'] = requestParameters.bidCurrencies;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.cursor !== undefined) {
                            queryParameters['cursor'] = requestParameters.cursor;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/activities/byCollection",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns Activities related to NFTs from specified Collection and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get NFT Collection Activities
     */
    ActivityControllerApi.prototype.getActivitiesByCollection = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getActivitiesByCollectionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns Activities related to specified NFT and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get NFT Activities
     */
    ActivityControllerApi.prototype.getActivitiesByItemRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getActivitiesByItem.');
                        }
                        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
                            throw new runtime.RequiredError('itemId', 'Required parameter requestParameters.itemId was null or undefined when calling getActivitiesByItem.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.itemId !== undefined) {
                            queryParameters['itemId'] = requestParameters.itemId;
                        }
                        if (requestParameters.bidCurrencies) {
                            queryParameters['bidCurrencies'] = requestParameters.bidCurrencies;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.cursor !== undefined) {
                            queryParameters['cursor'] = requestParameters.cursor;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/activities/byItem",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns Activities related to specified NFT and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get NFT Activities
     */
    ActivityControllerApi.prototype.getActivitiesByItem = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getActivitiesByItemRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns user\'s Activities (like transfers, mints, sells etc) sorted by date. This API is deprecated in favor of `Search Activities`
     * Get user Activities
     */
    ActivityControllerApi.prototype.getActivitiesByUserRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getActivitiesByUser.');
                        }
                        if (requestParameters.user === null || requestParameters.user === undefined) {
                            throw new runtime.RequiredError('user', 'Required parameter requestParameters.user was null or undefined when calling getActivitiesByUser.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.blockchains) {
                            queryParameters['blockchains'] = requestParameters.blockchains;
                        }
                        if (requestParameters.user) {
                            queryParameters['user'] = requestParameters.user;
                        }
                        if (requestParameters.bidCurrencies) {
                            queryParameters['bidCurrencies'] = requestParameters.bidCurrencies;
                        }
                        if (requestParameters.from !== undefined) {
                            queryParameters['from'] = requestParameters.from.toISOString();
                        }
                        if (requestParameters.to !== undefined) {
                            queryParameters['to'] = requestParameters.to.toISOString();
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.cursor !== undefined) {
                            queryParameters['cursor'] = requestParameters.cursor;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/activities/byUser",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns user\'s Activities (like transfers, mints, sells etc) sorted by date. This API is deprecated in favor of `Search Activities`
     * Get user Activities
     */
    ActivityControllerApi.prototype.getActivitiesByUser = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getActivitiesByUserRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns users Activities (like transfers, mints, sells etc) sorted by date. This API is deprecated in favor of `Search Activities`
     * Get users Activities
     */
    ActivityControllerApi.prototype.getActivitiesByUsersRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.activitiesByUsersRequest === null || requestParameters.activitiesByUsersRequest === undefined) {
                            throw new runtime.RequiredError('activitiesByUsersRequest', 'Required parameter requestParameters.activitiesByUsersRequest was null or undefined when calling getActivitiesByUsers.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/activities/byUsers",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.activitiesByUsersRequest,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns users Activities (like transfers, mints, sells etc) sorted by date. This API is deprecated in favor of `Search Activities`
     * Get users Activities
     */
    ActivityControllerApi.prototype.getActivitiesByUsers = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getActivitiesByUsersRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns all Activities in accordance with specified filters and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get all Activities
     */
    ActivityControllerApi.prototype.getAllActivitiesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getAllActivities.');
                        }
                        queryParameters = {};
                        if (requestParameters.blockchains) {
                            queryParameters['blockchains'] = requestParameters.blockchains;
                        }
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.bidCurrencies) {
                            queryParameters['bidCurrencies'] = requestParameters.bidCurrencies;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.cursor !== undefined) {
                            queryParameters['cursor'] = requestParameters.cursor;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/activities/all",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns all Activities in accordance with specified filters and sorted by date. This API is deprecated in favor of `Search Activities`
     * Get all Activities
     */
    ActivityControllerApi.prototype.getAllActivities = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllActivitiesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns all Activities in accordance with specified filters and sorted by `db updated` date. During internal updates (like migrations) Activities can be updated for technical reasons. In such case, `date` field won\'t be changed. If you want to store Activities in your own storage and keep it synced, use this method.
     * Get all Activities (for sync)
     */
    ActivityControllerApi.prototype.getAllActivitiesSyncRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.blockchain === null || requestParameters.blockchain === undefined) {
                            throw new runtime.RequiredError('blockchain', 'Required parameter requestParameters.blockchain was null or undefined when calling getAllActivitiesSync.');
                        }
                        queryParameters = {};
                        if (requestParameters.blockchain !== undefined) {
                            queryParameters['blockchain'] = requestParameters.blockchain;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        if (requestParameters.type !== undefined) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/activities/sync",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns all Activities in accordance with specified filters and sorted by `db updated` date. During internal updates (like migrations) Activities can be updated for technical reasons. In such case, `date` field won\'t be changed. If you want to store Activities in your own storage and keep it synced, use this method.
     * Get all Activities (for sync)
     */
    ActivityControllerApi.prototype.getAllActivitiesSync = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllActivitiesSyncRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns list of sales by collection
     * Get sales chart
     */
    ActivityControllerApi.prototype.getSalesChartRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getSalesChart.');
                        }
                        queryParameters = {};
                        if (requestParameters.from !== undefined) {
                            queryParameters['from'] = requestParameters.from.toISOString();
                        }
                        if (requestParameters.to !== undefined) {
                            queryParameters['to'] = requestParameters.to.toISOString();
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.cursor !== undefined) {
                            queryParameters['cursor'] = requestParameters.cursor;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/collections/{id}/charts/sales".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns list of sales by collection
     * Get sales chart
     */
    ActivityControllerApi.prototype.getSalesChart = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSalesChartRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    return ActivityControllerApi;
}(runtime.BaseAPI));
exports.ActivityControllerApi = ActivityControllerApi;
