/**
 * OpenAPI definition
 * # Exciting News  Hey there, amazing developers! üëã  We\'ve got some fantastic news to share that will make your experience with our product even better. We\'re thrilled to announce the implementation of API-Keys, which brings a new level of control and convenience to your development process. So, let\'s dive right into the details! ‚ú®  ## API-Keys for Enhanced Functionality üîë  Starting now, we have introduced API-Keys to streamline your interactions with our methods. You might have noticed a slight change while making requests ‚Äì now, all you need to do is include the parameter `X-API-KEY` in the Header of your request. Simple as that!  ## Get Your API-Key in a Snap! ‚ö°Ô∏è  Securing your API-Key is a breeze. We\'ve made the process super user-friendly to ensure you can get started quickly. Just head over to our website and fill out a simple form. Once you\'ve done that, your shiny new API-Key will be delivered straight to your email inbox. Easy peasy! üìß  [Get Your API-Key Here](https://api.rarible.org/registration) [Configure SDK with API-key](https://github.com/rarible/sdk#api-querying)  ## Unlock the Power of the Rarible Protocol üîì  As passionate developers, we know you\'re always hungry for knowledge and eager to explore new frontiers. That\'s why we invite you to discover the incredible world of the Rarible Protocol. By visiting our dedicated protocol page, you\'ll gain access to a treasure trove of useful information, tips, and insights that will elevate your development skills to new heights. üöÄ  [Explore the Rarible Protocol](https://rarible.org)  So, buckle up and get ready for an enhanced development journey with our API-Keys. We\'re excited to see what you\'ll create using our revamped system! üí™üöÄ  Stay curious, keep innovating, and happy coding! ‚ú®  [P.S. Join our Discord Server to stay up to date and ask questions](https://discord.gg/rarifoundation)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AmmTradeInfo, Blockchain, Order, OrderFees, OrderForm, OrderIds, OrderSort, OrderStatus, Orders, Platform, PrepareOrderTxForm, PrepareOrderTxResponse, PreparedOrderTx, SearchEngine, SyncSort, UnionApiErrorBadRequest, UnionApiErrorEntityNotFound, UnionApiErrorServerError } from '../models';
export interface GetAllSyncRequest {
    blockchain: Blockchain;
    continuation?: string;
    size?: number;
    sort?: SyncSort;
}
export interface GetAmmOrderTradeInfoRequest {
    id: string;
    itemCount: number;
}
export interface GetOrderBidsByItemRequest {
    itemId: string;
    platform?: Platform;
    maker?: Array<string>;
    origin?: string;
    status?: Array<OrderStatus>;
    currencies?: Array<string>;
    start?: number;
    end?: number;
    continuation?: string;
    size?: number;
    searchEngine?: SearchEngine;
}
export interface GetOrderBidsByMakerRequest {
    maker: Array<string>;
    blockchains?: Array<Blockchain>;
    platform?: Platform;
    collection?: Array<string>;
    origin?: string;
    status?: Array<OrderStatus>;
    currencies?: Array<string>;
    start?: number;
    end?: number;
    continuation?: string;
    size?: number;
    searchEngine?: SearchEngine;
}
export interface GetOrderByIdRequest {
    id: string;
}
export interface GetOrderFeesRequest {
    blockchain?: Blockchain;
}
export interface GetOrderFloorBidsByCollectionRequest {
    collectionId: string;
    platform?: Platform;
    origin?: string;
    status?: Array<OrderStatus>;
    currencies?: Array<string>;
    start?: number;
    end?: number;
    continuation?: string;
    size?: number;
}
export interface GetOrdersAllRequest {
    blockchains?: Array<Blockchain>;
    continuation?: string;
    size?: number;
    sort?: OrderSort;
    status?: Array<OrderStatus>;
    searchEngine?: SearchEngine;
}
export interface GetOrdersByIdsRequest {
    orderIds: OrderIds;
}
export interface GetSellOrdersRequest {
    blockchains?: Array<Blockchain>;
    platform?: Platform;
    origin?: string;
    continuation?: string;
    size?: number;
    searchEngine?: SearchEngine;
}
export interface GetSellOrdersByItemRequest {
    itemId: string;
    platform?: Platform;
    maker?: string;
    origin?: string;
    status?: Array<OrderStatus>;
    continuation?: string;
    size?: number;
    searchEngine?: SearchEngine;
}
export interface GetSellOrdersByMakerRequest {
    maker: Array<string>;
    blockchains?: Array<Blockchain>;
    platform?: Platform;
    collection?: Array<string>;
    origin?: string;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
    searchEngine?: SearchEngine;
}
export interface GetValidatedOrderByIdRequest {
    id: string;
}
export interface PrepareOrderCancelTransactionRequest {
    id: string;
}
export interface PrepareOrderTransactionRequest {
    id: string;
    prepareOrderTxForm: PrepareOrderTxForm;
}
export interface ReportOrderByIdRequest {
    id: string;
}
export interface UpsertOrderRequest {
    orderForm: OrderForm;
}
/**
 * no description
 */
export declare class OrderControllerApi extends runtime.BaseAPI {
    /**
     * Returns all sales & transfers in accordance with specified filters and sorted by `db updated` date. During internal updates (like migrations) Orders can be updated for technical reasons. In such case, `last update` date won\'t be changed. If you want to store Orders in your own storage and keep it synced, use this method.
     * Get all Orders (for sync)
     */
    getAllSyncRaw(requestParameters: GetAllSyncRequest): Promise<GetAllSyncResponse>;
    /**
     * Returns all sales & transfers in accordance with specified filters and sorted by `db updated` date. During internal updates (like migrations) Orders can be updated for technical reasons. In such case, `last update` date won\'t be changed. If you want to store Orders in your own storage and keep it synced, use this method.
     * Get all Orders (for sync)
     */
    getAllSync(requestParameters: GetAllSyncRequest): Promise<Orders>;
    /**
     * Get for buy pricing info from AMM Order
     * Get AMM Order trade info
     */
    getAmmOrderTradeInfoRaw(requestParameters: GetAmmOrderTradeInfoRequest): Promise<GetAmmOrderTradeInfoResponse>;
    /**
     * Get for buy pricing info from AMM Order
     * Get AMM Order trade info
     */
    getAmmOrderTradeInfo(requestParameters: GetAmmOrderTradeInfoRequest): Promise<AmmTradeInfo>;
    /**
     * Returns bid Orders created for specified NFT and sorted by price in USD (expensive first)
     * Get bid Orders for NFT
     */
    getOrderBidsByItemRaw(requestParameters: GetOrderBidsByItemRequest): Promise<GetOrderBidsByItemResponse>;
    /**
     * Returns bid Orders created for specified NFT and sorted by price in USD (expensive first)
     * Get bid Orders for NFT
     */
    getOrderBidsByItem(requestParameters: GetOrderBidsByItemRequest): Promise<Orders>;
    /**
     * Returns bid Orders created by specified user and sorted by `last update` date
     * Get user\'s bid Orders
     */
    getOrderBidsByMakerRaw(requestParameters: GetOrderBidsByMakerRequest): Promise<GetOrderBidsByMakerResponse>;
    /**
     * Returns bid Orders created by specified user and sorted by `last update` date
     * Get user\'s bid Orders
     */
    getOrderBidsByMaker(requestParameters: GetOrderBidsByMakerRequest): Promise<Orders>;
    /**
     * Returns Order by Id
     * Get Order
     */
    getOrderByIdRaw(requestParameters: GetOrderByIdRequest): Promise<GetOrderByIdResponse>;
    /**
     * Returns Order by Id
     * Get Order
     */
    getOrderById(requestParameters: GetOrderByIdRequest): Promise<Order>;
    /**
     * Returns Protocol fee settings for Orders
     * Get fee settings
     */
    getOrderFeesRaw(requestParameters: GetOrderFeesRequest): Promise<GetOrderFeesResponse>;
    /**
     * Returns Protocol fee settings for Orders
     * Get fee settings
     */
    getOrderFees(requestParameters: GetOrderFeesRequest): Promise<OrderFees>;
    /**
     * Returns floor bids created for specified NFT Collection and sorted by price in USD (expensive first)
     * Get floor bids for Collection
     */
    getOrderFloorBidsByCollectionRaw(requestParameters: GetOrderFloorBidsByCollectionRequest): Promise<GetOrderFloorBidsByCollectionResponse>;
    /**
     * Returns floor bids created for specified NFT Collection and sorted by price in USD (expensive first)
     * Get floor bids for Collection
     */
    getOrderFloorBidsByCollection(requestParameters: GetOrderFloorBidsByCollectionRequest): Promise<Orders>;
    /**
     * Returns all Orders in accordance with specified filters and sorted by `last updated` date
     * Get all Orders
     */
    getOrdersAllRaw(requestParameters: GetOrdersAllRequest): Promise<GetOrdersAllResponse>;
    /**
     * Returns all Orders in accordance with specified filters and sorted by `last updated` date
     * Get all Orders
     */
    getOrdersAll(requestParameters: GetOrdersAllRequest): Promise<Orders>;
    /**
     * Returns Orders by specified list of Ids
     * Get Orders by Ids
     */
    getOrdersByIdsRaw(requestParameters: GetOrdersByIdsRequest): Promise<GetOrdersByIdsResponse>;
    /**
     * Returns Orders by specified list of Ids
     * Get Orders by Ids
     */
    getOrdersByIds(requestParameters: GetOrdersByIdsRequest): Promise<Orders>;
    /**
     * Returns sell Orders satisfying specified filters and sorted by `last update` date
     * Get sell Orders
     */
    getSellOrdersRaw(requestParameters: GetSellOrdersRequest): Promise<GetSellOrdersResponse>;
    /**
     * Returns sell Orders satisfying specified filters and sorted by `last update` date
     * Get sell Orders
     */
    getSellOrders(requestParameters: GetSellOrdersRequest): Promise<Orders>;
    /**
     * Returns sell sales & transfer created for specified NFT and sorted by price in USD (cheapest first)
     * Get sell Orders for NFT
     */
    getSellOrdersByItemRaw(requestParameters: GetSellOrdersByItemRequest): Promise<GetSellOrdersByItemResponse>;
    /**
     * Returns sell sales & transfer created for specified NFT and sorted by price in USD (cheapest first)
     * Get sell Orders for NFT
     */
    getSellOrdersByItem(requestParameters: GetSellOrdersByItemRequest): Promise<Orders>;
    /**
     * Returns sell NFT Sales created by specified user and sorted by `last update` date
     * Get user\'s sell Orders
     */
    getSellOrdersByMakerRaw(requestParameters: GetSellOrdersByMakerRequest): Promise<GetSellOrdersByMakerResponse>;
    /**
     * Returns sell NFT Sales created by specified user and sorted by `last update` date
     * Get user\'s sell Orders
     */
    getSellOrdersByMaker(requestParameters: GetSellOrdersByMakerRequest): Promise<Orders>;
    /**
     * Validates and returns order by Id. IMPORTANT - validation is time-consuming operation!
     * Get validated Order by Id
     */
    getValidatedOrderByIdRaw(requestParameters: GetValidatedOrderByIdRequest): Promise<GetValidatedOrderByIdResponse>;
    /**
     * Validates and returns order by Id. IMPORTANT - validation is time-consuming operation!
     * Get validated Order by Id
     */
    getValidatedOrderById(requestParameters: GetValidatedOrderByIdRequest): Promise<Order>;
    /**
     * Prepare all required data to cancel given order on the blockchain
     * Prepare order cancel transaction
     */
    prepareOrderCancelTransactionRaw(requestParameters: PrepareOrderCancelTransactionRequest): Promise<PrepareOrderCancelTransactionResponse>;
    /**
     * Prepare all required data to cancel given order on the blockchain
     * Prepare order cancel transaction
     */
    prepareOrderCancelTransaction(requestParameters: PrepareOrderCancelTransactionRequest): Promise<PreparedOrderTx>;
    /**
     * Prepare all required data to match given order on the blockchain
     * Prepare order transaction
     */
    prepareOrderTransactionRaw(requestParameters: PrepareOrderTransactionRequest): Promise<PrepareOrderTransactionResponse>;
    /**
     * Prepare all required data to match given order on the blockchain
     * Prepare order transaction
     */
    prepareOrderTransaction(requestParameters: PrepareOrderTransactionRequest): Promise<PrepareOrderTxResponse>;
    /**
     * Report Error Order
     * Report Order
     */
    reportOrderByIdRaw(requestParameters: ReportOrderByIdRequest): Promise<ReportOrderByIdResponse>;
    /**
     * Report Error Order
     * Report Order
     */
    reportOrderById(requestParameters: ReportOrderByIdRequest): Promise<void>;
    /**
     * Create or update off-chain Order (supported only for some blockchains)
     * Create or update Order
     */
    upsertOrderRaw(requestParameters: UpsertOrderRequest): Promise<UpsertOrderResponse>;
    /**
     * Create or update off-chain Order (supported only for some blockchains)
     * Create or update Order
     */
    upsertOrder(requestParameters: UpsertOrderRequest): Promise<Order>;
}
export type GetAllSync200 = {
    status: 200;
    value: Orders;
};
export type GetAllSync400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetAllSync500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetAllSyncResponse = GetAllSync200 | GetAllSync400 | GetAllSync500;
export type GetAmmOrderTradeInfo200 = {
    status: 200;
    value: AmmTradeInfo;
};
export type GetAmmOrderTradeInfo400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetAmmOrderTradeInfo404 = {
    status: 404;
    value: UnionApiErrorEntityNotFound;
};
export type GetAmmOrderTradeInfo500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetAmmOrderTradeInfoResponse = GetAmmOrderTradeInfo200 | GetAmmOrderTradeInfo400 | GetAmmOrderTradeInfo404 | GetAmmOrderTradeInfo500;
export type GetOrderBidsByItem200 = {
    status: 200;
    value: Orders;
};
export type GetOrderBidsByItem400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetOrderBidsByItem500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetOrderBidsByItemResponse = GetOrderBidsByItem200 | GetOrderBidsByItem400 | GetOrderBidsByItem500;
export type GetOrderBidsByMaker200 = {
    status: 200;
    value: Orders;
};
export type GetOrderBidsByMaker400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetOrderBidsByMaker500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetOrderBidsByMakerResponse = GetOrderBidsByMaker200 | GetOrderBidsByMaker400 | GetOrderBidsByMaker500;
export type GetOrderById200 = {
    status: 200;
    value: Order;
};
export type GetOrderById404 = {
    status: 404;
    value: UnionApiErrorEntityNotFound;
};
export type GetOrderById400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetOrderById500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetOrderByIdResponse = GetOrderById200 | GetOrderById404 | GetOrderById400 | GetOrderById500;
export type GetOrderFees200 = {
    status: 200;
    value: OrderFees;
};
export type GetOrderFees400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetOrderFees500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetOrderFeesResponse = GetOrderFees200 | GetOrderFees400 | GetOrderFees500;
export type GetOrderFloorBidsByCollection200 = {
    status: 200;
    value: Orders;
};
export type GetOrderFloorBidsByCollection400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetOrderFloorBidsByCollection500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetOrderFloorBidsByCollectionResponse = GetOrderFloorBidsByCollection200 | GetOrderFloorBidsByCollection400 | GetOrderFloorBidsByCollection500;
export type GetOrdersAll200 = {
    status: 200;
    value: Orders;
};
export type GetOrdersAll400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetOrdersAll500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetOrdersAllResponse = GetOrdersAll200 | GetOrdersAll400 | GetOrdersAll500;
export type GetOrdersByIds200 = {
    status: 200;
    value: Orders;
};
export type GetOrdersByIds400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetOrdersByIds500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetOrdersByIdsResponse = GetOrdersByIds200 | GetOrdersByIds400 | GetOrdersByIds500;
export type GetSellOrders200 = {
    status: 200;
    value: Orders;
};
export type GetSellOrders400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetSellOrders500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetSellOrdersResponse = GetSellOrders200 | GetSellOrders400 | GetSellOrders500;
export type GetSellOrdersByItem200 = {
    status: 200;
    value: Orders;
};
export type GetSellOrdersByItem400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetSellOrdersByItem500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetSellOrdersByItemResponse = GetSellOrdersByItem200 | GetSellOrdersByItem400 | GetSellOrdersByItem500;
export type GetSellOrdersByMaker200 = {
    status: 200;
    value: Orders;
};
export type GetSellOrdersByMaker400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetSellOrdersByMaker500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetSellOrdersByMakerResponse = GetSellOrdersByMaker200 | GetSellOrdersByMaker400 | GetSellOrdersByMaker500;
export type GetValidatedOrderById200 = {
    status: 200;
    value: Order;
};
export type GetValidatedOrderById404 = {
    status: 404;
    value: UnionApiErrorEntityNotFound;
};
export type GetValidatedOrderById400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type GetValidatedOrderById500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type GetValidatedOrderByIdResponse = GetValidatedOrderById200 | GetValidatedOrderById404 | GetValidatedOrderById400 | GetValidatedOrderById500;
export type PrepareOrderCancelTransaction200 = {
    status: 200;
    value: PreparedOrderTx;
};
export type PrepareOrderCancelTransaction404 = {
    status: 404;
    value: UnionApiErrorEntityNotFound;
};
export type PrepareOrderCancelTransaction400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type PrepareOrderCancelTransaction500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type PrepareOrderCancelTransactionResponse = PrepareOrderCancelTransaction200 | PrepareOrderCancelTransaction404 | PrepareOrderCancelTransaction400 | PrepareOrderCancelTransaction500;
export type PrepareOrderTransaction200 = {
    status: 200;
    value: PrepareOrderTxResponse;
};
export type PrepareOrderTransaction404 = {
    status: 404;
    value: UnionApiErrorEntityNotFound;
};
export type PrepareOrderTransaction400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type PrepareOrderTransaction500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type PrepareOrderTransactionResponse = PrepareOrderTransaction200 | PrepareOrderTransaction404 | PrepareOrderTransaction400 | PrepareOrderTransaction500;
export type ReportOrderById200 = {
    status: 200;
};
export type ReportOrderById404 = {
    status: 404;
    value: UnionApiErrorEntityNotFound;
};
export type ReportOrderById400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type ReportOrderById500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type ReportOrderByIdResponse = ReportOrderById200 | ReportOrderById404 | ReportOrderById400 | ReportOrderById500;
export type UpsertOrder200 = {
    status: 200;
    value: Order;
};
export type UpsertOrder400 = {
    status: 400;
    value: UnionApiErrorBadRequest;
};
export type UpsertOrder500 = {
    status: 500;
    value: UnionApiErrorServerError;
};
export type UpsertOrderResponse = UpsertOrder200 | UpsertOrder400 | UpsertOrder500;
