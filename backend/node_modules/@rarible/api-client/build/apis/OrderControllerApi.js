"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * # Exciting News  Hey there, amazing developers! 👋  We\'ve got some fantastic news to share that will make your experience with our product even better. We\'re thrilled to announce the implementation of API-Keys, which brings a new level of control and convenience to your development process. So, let\'s dive right into the details! ✨  ## API-Keys for Enhanced Functionality 🔑  Starting now, we have introduced API-Keys to streamline your interactions with our methods. You might have noticed a slight change while making requests – now, all you need to do is include the parameter `X-API-KEY` in the Header of your request. Simple as that!  ## Get Your API-Key in a Snap! ⚡️  Securing your API-Key is a breeze. We\'ve made the process super user-friendly to ensure you can get started quickly. Just head over to our website and fill out a simple form. Once you\'ve done that, your shiny new API-Key will be delivered straight to your email inbox. Easy peasy! 📧  [Get Your API-Key Here](https://api.rarible.org/registration) [Configure SDK with API-key](https://github.com/rarible/sdk#api-querying)  ## Unlock the Power of the Rarible Protocol 🔓  As passionate developers, we know you\'re always hungry for knowledge and eager to explore new frontiers. That\'s why we invite you to discover the incredible world of the Rarible Protocol. By visiting our dedicated protocol page, you\'ll gain access to a treasure trove of useful information, tips, and insights that will elevate your development skills to new heights. 🚀  [Explore the Rarible Protocol](https://rarible.org)  So, buckle up and get ready for an enhanced development journey with our API-Keys. We\'re excited to see what you\'ll create using our revamped system! 💪🚀  Stay curious, keep innovating, and happy coding! ✨  [P.S. Join our Discord Server to stay up to date and ask questions](https://discord.gg/rarifoundation)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderControllerApi = void 0;
var runtime = __importStar(require("../runtime"));
/**
 * no description
 */
var OrderControllerApi = /** @class */ (function (_super) {
    __extends(OrderControllerApi, _super);
    function OrderControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns all sales & transfers in accordance with specified filters and sorted by `db updated` date. During internal updates (like migrations) Orders can be updated for technical reasons. In such case, `last update` date won\'t be changed. If you want to store Orders in your own storage and keep it synced, use this method.
     * Get all Orders (for sync)
     */
    OrderControllerApi.prototype.getAllSyncRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.blockchain === null || requestParameters.blockchain === undefined) {
                            throw new runtime.RequiredError('blockchain', 'Required parameter requestParameters.blockchain was null or undefined when calling getAllSync.');
                        }
                        queryParameters = {};
                        if (requestParameters.blockchain !== undefined) {
                            queryParameters['blockchain'] = requestParameters.blockchain;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sync",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns all sales & transfers in accordance with specified filters and sorted by `db updated` date. During internal updates (like migrations) Orders can be updated for technical reasons. In such case, `last update` date won\'t be changed. If you want to store Orders in your own storage and keep it synced, use this method.
     * Get all Orders (for sync)
     */
    OrderControllerApi.prototype.getAllSync = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllSyncRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Get for buy pricing info from AMM Order
     * Get AMM Order trade info
     */
    OrderControllerApi.prototype.getAmmOrderTradeInfoRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getAmmOrderTradeInfo.');
                        }
                        if (requestParameters.itemCount === null || requestParameters.itemCount === undefined) {
                            throw new runtime.RequiredError('itemCount', 'Required parameter requestParameters.itemCount was null or undefined when calling getAmmOrderTradeInfo.');
                        }
                        queryParameters = {};
                        if (requestParameters.itemCount !== undefined) {
                            queryParameters['itemCount'] = requestParameters.itemCount;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/amm/{id}/tradeInfo".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _e.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _e.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _e.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 404)) return [3 /*break*/, 7];
                        _c = {
                            status: 404
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _e.sent(),
                            _c)];
                    case 7:
                        if (!(response.status === 500)) return [3 /*break*/, 9];
                        _d = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 8: return [2 /*return*/, (_d.value = _e.sent(),
                            _d)];
                    case 9: throw response;
                }
            });
        });
    };
    /**
     * Get for buy pricing info from AMM Order
     * Get AMM Order trade info
     */
    OrderControllerApi.prototype.getAmmOrderTradeInfo = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAmmOrderTradeInfoRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns bid Orders created for specified NFT and sorted by price in USD (expensive first)
     * Get bid Orders for NFT
     */
    OrderControllerApi.prototype.getOrderBidsByItemRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
                            throw new runtime.RequiredError('itemId', 'Required parameter requestParameters.itemId was null or undefined when calling getOrderBidsByItem.');
                        }
                        queryParameters = {};
                        if (requestParameters.platform !== undefined) {
                            queryParameters['platform'] = requestParameters.platform;
                        }
                        if (requestParameters.itemId !== undefined) {
                            queryParameters['itemId'] = requestParameters.itemId;
                        }
                        if (requestParameters.maker) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.currencies) {
                            queryParameters['currencies'] = requestParameters.currencies;
                        }
                        if (requestParameters.start !== undefined) {
                            queryParameters['start'] = requestParameters.start;
                        }
                        if (requestParameters.end !== undefined) {
                            queryParameters['end'] = requestParameters.end;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.searchEngine !== undefined) {
                            queryParameters['searchEngine'] = requestParameters.searchEngine;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/bids/byItem",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns bid Orders created for specified NFT and sorted by price in USD (expensive first)
     * Get bid Orders for NFT
     */
    OrderControllerApi.prototype.getOrderBidsByItem = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrderBidsByItemRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns bid Orders created by specified user and sorted by `last update` date
     * Get user\'s bid Orders
     */
    OrderControllerApi.prototype.getOrderBidsByMakerRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.maker === null || requestParameters.maker === undefined) {
                            throw new runtime.RequiredError('maker', 'Required parameter requestParameters.maker was null or undefined when calling getOrderBidsByMaker.');
                        }
                        queryParameters = {};
                        if (requestParameters.maker) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.blockchains) {
                            queryParameters['blockchains'] = requestParameters.blockchains;
                        }
                        if (requestParameters.platform !== undefined) {
                            queryParameters['platform'] = requestParameters.platform;
                        }
                        if (requestParameters.collection) {
                            queryParameters['collection'] = requestParameters.collection;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.currencies) {
                            queryParameters['currencies'] = requestParameters.currencies;
                        }
                        if (requestParameters.start !== undefined) {
                            queryParameters['start'] = requestParameters.start;
                        }
                        if (requestParameters.end !== undefined) {
                            queryParameters['end'] = requestParameters.end;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.searchEngine !== undefined) {
                            queryParameters['searchEngine'] = requestParameters.searchEngine;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/bids/byMaker",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns bid Orders created by specified user and sorted by `last update` date
     * Get user\'s bid Orders
     */
    OrderControllerApi.prototype.getOrderBidsByMaker = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrderBidsByMakerRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns Order by Id
     * Get Order
     */
    OrderControllerApi.prototype.getOrderByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getOrderById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _e.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _e.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 404)) return [3 /*break*/, 5];
                        _b = {
                            status: 404
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _e.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 400)) return [3 /*break*/, 7];
                        _c = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _e.sent(),
                            _c)];
                    case 7:
                        if (!(response.status === 500)) return [3 /*break*/, 9];
                        _d = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 8: return [2 /*return*/, (_d.value = _e.sent(),
                            _d)];
                    case 9: throw response;
                }
            });
        });
    };
    /**
     * Returns Order by Id
     * Get Order
     */
    OrderControllerApi.prototype.getOrderById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrderByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns Protocol fee settings for Orders
     * Get fee settings
     */
    OrderControllerApi.prototype.getOrderFeesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.blockchain !== undefined) {
                            queryParameters['blockchain'] = requestParameters.blockchain;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/settings/fees",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns Protocol fee settings for Orders
     * Get fee settings
     */
    OrderControllerApi.prototype.getOrderFees = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrderFeesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns floor bids created for specified NFT Collection and sorted by price in USD (expensive first)
     * Get floor bids for Collection
     */
    OrderControllerApi.prototype.getOrderFloorBidsByCollectionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
                            throw new runtime.RequiredError('collectionId', 'Required parameter requestParameters.collectionId was null or undefined when calling getOrderFloorBidsByCollection.');
                        }
                        queryParameters = {};
                        if (requestParameters.platform !== undefined) {
                            queryParameters['platform'] = requestParameters.platform;
                        }
                        if (requestParameters.collectionId !== undefined) {
                            queryParameters['collectionId'] = requestParameters.collectionId;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.currencies) {
                            queryParameters['currencies'] = requestParameters.currencies;
                        }
                        if (requestParameters.start !== undefined) {
                            queryParameters['start'] = requestParameters.start;
                        }
                        if (requestParameters.end !== undefined) {
                            queryParameters['end'] = requestParameters.end;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/floorBids/byCollection",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns floor bids created for specified NFT Collection and sorted by price in USD (expensive first)
     * Get floor bids for Collection
     */
    OrderControllerApi.prototype.getOrderFloorBidsByCollection = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrderFloorBidsByCollectionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns all Orders in accordance with specified filters and sorted by `last updated` date
     * Get all Orders
     */
    OrderControllerApi.prototype.getOrdersAllRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.blockchains) {
                            queryParameters['blockchains'] = requestParameters.blockchains;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.searchEngine !== undefined) {
                            queryParameters['searchEngine'] = requestParameters.searchEngine;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/all",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns all Orders in accordance with specified filters and sorted by `last updated` date
     * Get all Orders
     */
    OrderControllerApi.prototype.getOrdersAll = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrdersAllRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns Orders by specified list of Ids
     * Get Orders by Ids
     */
    OrderControllerApi.prototype.getOrdersByIdsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.orderIds === null || requestParameters.orderIds === undefined) {
                            throw new runtime.RequiredError('orderIds', 'Required parameter requestParameters.orderIds was null or undefined when calling getOrdersByIds.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/byIds",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.orderIds,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns Orders by specified list of Ids
     * Get Orders by Ids
     */
    OrderControllerApi.prototype.getOrdersByIds = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrdersByIdsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns sell Orders satisfying specified filters and sorted by `last update` date
     * Get sell Orders
     */
    OrderControllerApi.prototype.getSellOrdersRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.blockchains) {
                            queryParameters['blockchains'] = requestParameters.blockchains;
                        }
                        if (requestParameters.platform !== undefined) {
                            queryParameters['platform'] = requestParameters.platform;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.searchEngine !== undefined) {
                            queryParameters['searchEngine'] = requestParameters.searchEngine;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sell",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns sell Orders satisfying specified filters and sorted by `last update` date
     * Get sell Orders
     */
    OrderControllerApi.prototype.getSellOrders = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSellOrdersRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns sell sales & transfer created for specified NFT and sorted by price in USD (cheapest first)
     * Get sell Orders for NFT
     */
    OrderControllerApi.prototype.getSellOrdersByItemRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
                            throw new runtime.RequiredError('itemId', 'Required parameter requestParameters.itemId was null or undefined when calling getSellOrdersByItem.');
                        }
                        queryParameters = {};
                        if (requestParameters.platform !== undefined) {
                            queryParameters['platform'] = requestParameters.platform;
                        }
                        if (requestParameters.itemId !== undefined) {
                            queryParameters['itemId'] = requestParameters.itemId;
                        }
                        if (requestParameters.maker !== undefined) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.searchEngine !== undefined) {
                            queryParameters['searchEngine'] = requestParameters.searchEngine;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sell/byItem",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns sell sales & transfer created for specified NFT and sorted by price in USD (cheapest first)
     * Get sell Orders for NFT
     */
    OrderControllerApi.prototype.getSellOrdersByItem = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSellOrdersByItemRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Returns sell NFT Sales created by specified user and sorted by `last update` date
     * Get user\'s sell Orders
     */
    OrderControllerApi.prototype.getSellOrdersByMakerRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.maker === null || requestParameters.maker === undefined) {
                            throw new runtime.RequiredError('maker', 'Required parameter requestParameters.maker was null or undefined when calling getSellOrdersByMaker.');
                        }
                        queryParameters = {};
                        if (requestParameters.blockchains) {
                            queryParameters['blockchains'] = requestParameters.blockchains;
                        }
                        if (requestParameters.platform !== undefined) {
                            queryParameters['platform'] = requestParameters.platform;
                        }
                        if (requestParameters.maker) {
                            queryParameters['maker'] = requestParameters.maker;
                        }
                        if (requestParameters.collection) {
                            queryParameters['collection'] = requestParameters.collection;
                        }
                        if (requestParameters.origin !== undefined) {
                            queryParameters['origin'] = requestParameters.origin;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.searchEngine !== undefined) {
                            queryParameters['searchEngine'] = requestParameters.searchEngine;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/sell/byMaker",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Returns sell NFT Sales created by specified user and sorted by `last update` date
     * Get user\'s sell Orders
     */
    OrderControllerApi.prototype.getSellOrdersByMaker = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSellOrdersByMakerRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Validates and returns order by Id. IMPORTANT - validation is time-consuming operation!
     * Get validated Order by Id
     */
    OrderControllerApi.prototype.getValidatedOrderByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getValidatedOrderById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/{id}/validate".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _e.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _e.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 404)) return [3 /*break*/, 5];
                        _b = {
                            status: 404
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _e.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 400)) return [3 /*break*/, 7];
                        _c = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _e.sent(),
                            _c)];
                    case 7:
                        if (!(response.status === 500)) return [3 /*break*/, 9];
                        _d = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 8: return [2 /*return*/, (_d.value = _e.sent(),
                            _d)];
                    case 9: throw response;
                }
            });
        });
    };
    /**
     * Validates and returns order by Id. IMPORTANT - validation is time-consuming operation!
     * Get validated Order by Id
     */
    OrderControllerApi.prototype.getValidatedOrderById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getValidatedOrderByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Prepare all required data to cancel given order on the blockchain
     * Prepare order cancel transaction
     */
    OrderControllerApi.prototype.prepareOrderCancelTransactionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling prepareOrderCancelTransaction.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/{id}/prepareCancelTx".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters.id))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _e.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _e.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 404)) return [3 /*break*/, 5];
                        _b = {
                            status: 404
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _e.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 400)) return [3 /*break*/, 7];
                        _c = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _e.sent(),
                            _c)];
                    case 7:
                        if (!(response.status === 500)) return [3 /*break*/, 9];
                        _d = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 8: return [2 /*return*/, (_d.value = _e.sent(),
                            _d)];
                    case 9: throw response;
                }
            });
        });
    };
    /**
     * Prepare all required data to cancel given order on the blockchain
     * Prepare order cancel transaction
     */
    OrderControllerApi.prototype.prepareOrderCancelTransaction = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.prepareOrderCancelTransactionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Prepare all required data to match given order on the blockchain
     * Prepare order transaction
     */
    OrderControllerApi.prototype.prepareOrderTransactionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling prepareOrderTransaction.');
                        }
                        if (requestParameters.prepareOrderTxForm === null || requestParameters.prepareOrderTxForm === undefined) {
                            throw new runtime.RequiredError('prepareOrderTxForm', 'Required parameter requestParameters.prepareOrderTxForm was null or undefined when calling prepareOrderTransaction.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/{id}/prepareTx".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters.id))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.prepareOrderTxForm,
                            })];
                    case 1:
                        response = _e.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _e.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 404)) return [3 /*break*/, 5];
                        _b = {
                            status: 404
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _e.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 400)) return [3 /*break*/, 7];
                        _c = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _e.sent(),
                            _c)];
                    case 7:
                        if (!(response.status === 500)) return [3 /*break*/, 9];
                        _d = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 8: return [2 /*return*/, (_d.value = _e.sent(),
                            _d)];
                    case 9: throw response;
                }
            });
        });
    };
    /**
     * Prepare all required data to match given order on the blockchain
     * Prepare order transaction
     */
    OrderControllerApi.prototype.prepareOrderTransaction = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.prepareOrderTransactionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     * Report Error Order
     * Report Order
     */
    OrderControllerApi.prototype.reportOrderByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling reportOrderById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders/{id}/report".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters.id))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, {
                                    status: 200,
                                }];
                        }
                        if (!(response.status === 404)) return [3 /*break*/, 3];
                        _a = {
                            status: 404
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Report Error Order
     * Report Order
     */
    OrderControllerApi.prototype.reportOrderById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.reportOrderByIdRaw(requestParameters)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Create or update off-chain Order (supported only for some blockchains)
     * Create or update Order
     */
    OrderControllerApi.prototype.upsertOrderRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.orderForm === null || requestParameters.orderForm === undefined) {
                            throw new runtime.RequiredError('orderForm', 'Required parameter requestParameters.orderForm was null or undefined when calling upsertOrder.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/orders",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.orderForm,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     * Create or update off-chain Order (supported only for some blockchains)
     * Create or update Order
     */
    OrderControllerApi.prototype.upsertOrder = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.upsertOrderRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    return OrderControllerApi;
}(runtime.BaseAPI));
exports.OrderControllerApi = OrderControllerApi;
