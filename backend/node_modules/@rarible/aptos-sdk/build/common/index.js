"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestUtils = exports.getListingTokenType = exports.makeId = exports.getRequiredWallet = exports.isChangeBelongsToType = exports.ENCODED_APT_TOKEN_TYPE = exports.APT_TOKEN_TYPE = exports.MAX_U64_INT = exports.APT_DIVIDER = void 0;
const tslib_1 = require("tslib");
const utils_1 = require("@rarible/utils");
const ts_sdk_1 = require("@aptos-labs/ts-sdk");
exports.APT_DIVIDER = (0, utils_1.toBn)(10).pow(8);
exports.MAX_U64_INT = "18446744073709551615";
exports.APT_TOKEN_TYPE = "0x1::aptos_coin::AptosCoin";
exports.ENCODED_APT_TOKEN_TYPE = btoa(exports.APT_TOKEN_TYPE);
function isChangeBelongsToType(change, dataTypeFn) {
    return (change.type === "write_resource" &&
        "data" in change &&
        typeof change.data === "object" &&
        change.data !== null &&
        "type" in change.data &&
        (0, ts_sdk_1.isString)(change.data.type) &&
        dataTypeFn(change.data.type));
}
exports.isChangeBelongsToType = isChangeBelongsToType;
function getRequiredWallet(wallet) {
    if (!wallet)
        throw new Error("Aptos wallet doesn't exist");
    return wallet;
}
exports.getRequiredWallet = getRequiredWallet;
function makeId(length) {
    let result = "";
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy";
    const charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
exports.makeId = makeId;
function getListingTokenType(listingResources) {
    var _a;
    const priceResource = listingResources.find(o => o.type.includes("coin_listing::FixedPriceListing"));
    if (!((_a = priceResource === null || priceResource === void 0 ? void 0 : priceResource.data) === null || _a === void 0 ? void 0 : _a.price)) {
        throw new Error("Price object has not been found");
    }
    const match = priceResource.type.match(/<([^>]+)>/);
    const tokenType = match ? match[1] : null;
    if (!tokenType)
        throw new Error("Token type has not been recognized");
    return tokenType;
}
exports.getListingTokenType = getListingTokenType;
exports.TestUtils = tslib_1.__importStar(require("./test"));
