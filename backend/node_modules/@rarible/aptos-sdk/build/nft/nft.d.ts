import type { Aptos } from "@aptos-labs/ts-sdk";
import type { Maybe } from "@rarible/types";
import type { AptosWalletInterface } from "@rarible/aptos-wallet";
import type { AptosNftSdk } from "../domain";
import type { AddressConfig } from "../config";
export type CreateCollectionOptions = {
    name: string;
    description: string;
    uri: string;
};
export type MintByCollectionNameOptions = {
    collectionName: string;
    name: string;
    description: string;
    uri: string;
};
export type MintByCollectionAddressOptions = {
    collectionAddress: string;
    name: string;
    description: string;
    uri: string;
};
export declare class AptosNft implements AptosNftSdk {
    readonly aptos: Aptos;
    readonly wallet: Maybe<AptosWalletInterface>;
    readonly config: AddressConfig;
    constructor(aptos: Aptos, wallet: Maybe<AptosWalletInterface>, config: AddressConfig);
    createNativeCollection: (options: CreateCollectionOptions) => Promise<{
        tx: import("@aptos-labs/ts-sdk").CommittedTransactionResponse;
        collectionAddress: string;
    }>;
    createCollection: (options: CreateCollectionOptions) => Promise<{
        tx: import("@aptos-labs/ts-sdk").UserTransactionResponse | import("@aptos-labs/ts-sdk").GenesisTransactionResponse | import("@aptos-labs/ts-sdk").BlockMetadataTransactionResponse | import("@aptos-labs/ts-sdk").ValidatorTransactionResponse;
        collectionAddress: string;
        rariDropAddress: string;
        aptosCollectionAddress: string;
    }>;
    mintWithCollectionName: (options: MintByCollectionNameOptions) => Promise<{
        tx: import("@aptos-labs/ts-sdk").CommittedTransactionResponse;
        tokenAddress: string;
        tokenName: any;
    }>;
    mintWithCollectionAddress: (options: MintByCollectionAddressOptions) => Promise<{
        tx: import("@aptos-labs/ts-sdk").UserTransactionResponse | import("@aptos-labs/ts-sdk").GenesisTransactionResponse | import("@aptos-labs/ts-sdk").BlockMetadataTransactionResponse | import("@aptos-labs/ts-sdk").ValidatorTransactionResponse;
        tokenAddress: string;
        tokenName: any;
    }>;
    transfer: (tokenAddress: string, to: string) => Promise<import("@aptos-labs/ts-sdk").CommittedTransactionResponse>;
    burn: (tokenAddress: string) => Promise<import("@aptos-labs/ts-sdk").CommittedTransactionResponse>;
    burnV1Token: (creatorAddress: string, collectionName: string, tokenName: string, propertyVersion: string, amount: string) => Promise<import("@aptos-labs/ts-sdk").CommittedTransactionResponse>;
    transferV1Token: (to: string, creator: string, collection: string, name: string, propertyVersion: string, amount: string) => Promise<import("@aptos-labs/ts-sdk").CommittedTransactionResponse>;
}
