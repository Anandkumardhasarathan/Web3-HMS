import type { Aptos } from "@aptos-labs/ts-sdk";
import type { CommittedTransactionResponse } from "@aptos-labs/ts-sdk";
import type { Maybe } from "@rarible/types";
import type { AptosWalletInterface } from "@rarible/aptos-wallet";
import type { AddressConfig } from "../config";
import type { AptosOrderSdk } from "../domain";
export declare class AptosOrder implements AptosOrderSdk {
    readonly aptos: Aptos;
    readonly wallet: Maybe<AptosWalletInterface>;
    readonly config: AddressConfig;
    constructor(aptos: Aptos, wallet: Maybe<AptosWalletInterface>, config: AddressConfig);
    private sendAndWaitTx;
    sell: (tokenAddress: string, feeObjectAddress: string, startTime: number, price: string) => Promise<string>;
    sellV1: (feeObjectAddress: string, creatorAddress: string | undefined, collectionName: string, tokenName: string, propertyVersion: string, startTime: number, price: string) => Promise<string>;
    getListingTokenType: (listing: string) => Promise<"0x1::aptos_coin::AptosCoin">;
    sellUpdate: (listing: string, price: string) => Promise<string>;
    buy: (listing: string) => Promise<CommittedTransactionResponse>;
    cancel: (listing: string) => Promise<CommittedTransactionResponse>;
    collectionOffer: (collectionAddress: string, amount: number, feeObjectAddress: string, endTime: number, price: string) => Promise<string>;
    collectionOfferV1: (creatorAddress: string | undefined, collectionName: string, feeObjectAddress: string, price: string, amount: number, endTime: number) => Promise<string>;
    cancelCollectionOffer: (offer: string) => Promise<CommittedTransactionResponse>;
    acceptCollectionOffer(offer: string, token: string): Promise<CommittedTransactionResponse>;
    acceptCollectionOfferV1(offer: string, tokenName: string, propertyVersion: string): Promise<CommittedTransactionResponse>;
    tokenOffer: (tokenAddress: string, feeObjectAddress: string, endTime: number, price: string) => Promise<string>;
    tokenOfferV1: (creatorAddress: string, collectionName: string, tokenName: string, propertyVersion: string, feeObjectAddress: string, price: string, endTime: number) => Promise<string>;
    cancelTokenOffer: (offer: string) => Promise<CommittedTransactionResponse>;
    acceptTokenOffer(offer: string): Promise<CommittedTransactionResponse>;
    acceptTokenOfferV1(offer: string, tokenName: String, propertyVersion: string): Promise<CommittedTransactionResponse>;
    createFeeSchedule({ value, receiveAddress }: {
        value: number;
        receiveAddress?: string;
    }): Promise<string>;
    getFeeObject(options?: {
        address: string;
        value: number;
    }): Promise<string>;
    private isFeeScheduleObject;
    getFeeScheduleAddress(): string;
}
