import type { Account as GenericAccount } from "@aptos-labs/ts-sdk";
export interface AptosWalletInterface {
    signMessage(message: string, options?: {
        nonce: string;
    }): Promise<{
        message: string;
        signature: string;
    }>;
    getAccountInfo(): Promise<{
        address: string;
        publicKey: string;
        network: Network;
    }>;
    signAndSubmitTransaction(payload: AptosTransaction): Promise<{
        hash: string;
    }>;
}
export type ExternalAccount = {
    signAndSubmitTransaction: (payload: EntryFunctionPayload) => Promise<{
        hash: string;
    }>;
    signMessage: (payload: SignMessagePayload) => Promise<SignMessageResponse>;
    connect: () => Promise<AccountInfo>;
    account: () => Promise<AccountInfo>;
    disconnect: () => Promise<AccountInfo>;
    network: () => Promise<Network>;
    onAccountChange: (callback: (account: string) => void) => Promise<void>;
    onNetworkChange: (callback: (network: string) => void) => Promise<void>;
    onDisconnect: (callback: () => void) => Promise<void>;
};
export interface SignMessagePayload {
    address?: boolean;
    application?: boolean;
    chainId?: boolean;
    message: string;
    nonce: string;
}
export interface SignMessageResponse {
    address: string;
    application: string;
    chainId: number;
    fullMessage: string;
    message: string;
    nonce: string;
    prefix: string;
    signature: string;
}
export type EntryFunctionPayload = {
    function: string;
    /**
     * Type arguments of the function
     */
    type_arguments: Array<string>;
    /**
     * Arguments of the function
     */
    arguments: Array<any>;
};
export type AptosTransaction = {
    arguments: Array<any>;
    typeArguments: Array<string>;
    function: string;
};
export type AccountInfo = {
    address: string;
    publicKey: string;
};
export declare enum Network {
    Testnet = "Testnet",
    Mainnet = "Mainnet",
    Devnet = "Devnet"
}
export { GenericAccount };
