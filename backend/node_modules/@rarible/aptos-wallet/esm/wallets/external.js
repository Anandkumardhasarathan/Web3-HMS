import { __awaiter } from "tslib";
import { randomWord } from "@rarible/types";
import { normalizeAptosAddress } from "@rarible/sdk-common";
import { normalizeAptosNetwork } from "./common";
export class AptosSdkWallet {
    constructor(account) {
        this.account = account;
    }
    signMessage(msg, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { signature, fullMessage } = yield this.account.signMessage({
                message: msg,
                nonce: (options === null || options === void 0 ? void 0 : options.nonce) || randomWord(),
            });
            if (Array.isArray(signature)) {
                return {
                    signature: signature[0].toString(),
                    message: fullMessage,
                };
            }
            return {
                signature: signature.toString(),
                message: fullMessage.toString(),
            };
        });
    }
    getAccountInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.account.account)
                throw new Error("Cannot get account info: account has not been set");
            const { address, publicKey } = yield this.account.account();
            return {
                address: normalizeAptosAddress(address),
                publicKey: Array.isArray(publicKey) ? publicKey[0] : publicKey.toString(),
                network: normalizeAptosNetwork(yield this.account.network()),
            };
        });
    }
    getPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield this.getAccountInfo();
            return account.publicKey;
        });
    }
    signAndSubmitTransaction(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { hash } = yield this.account.signAndSubmitTransaction({
                arguments: payload.arguments,
                function: payload.function,
                type_arguments: payload.typeArguments,
            });
            return { hash };
        });
    }
}
