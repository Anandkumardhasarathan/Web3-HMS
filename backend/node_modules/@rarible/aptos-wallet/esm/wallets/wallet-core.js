import { __awaiter } from "tslib";
import { randomWord } from "@rarible/types";
import { normalizeAptosAddress } from "@rarible/sdk-common";
import { normalizeAptosNetwork } from "./common";
export class AptosWalletCore {
    constructor(wallet) {
        this.wallet = wallet;
    }
    signMessage(message, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.wallet.signMessage({
                message,
                nonce: (options === null || options === void 0 ? void 0 : options.nonce) || randomWord(),
            });
            if (Array.isArray(response.signature)) {
                return {
                    signature: response.signature[0].toString(),
                    message: response.fullMessage.toString(),
                };
            }
            return {
                signature: response.signature.toString(),
                message: response.fullMessage.toString(),
            };
        });
    }
    getAccountInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const accountInfo = this.wallet.account;
            if (!accountInfo || !this.wallet.network) {
                throw new Error("AccountInfo does not exist");
            }
            return {
                address: normalizeAptosAddress(accountInfo.address),
                publicKey: Array.isArray(accountInfo.publicKey) ? accountInfo.publicKey[0] : accountInfo.publicKey,
                network: normalizeAptosNetwork(this.wallet.network.name),
            };
        });
    }
    signAndSubmitTransaction(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { hash } = yield this.wallet.signAndSubmitTransaction({
                data: {
                    functionArguments: payload.arguments,
                    function: payload.function,
                    typeArguments: payload.typeArguments,
                },
            });
            return { hash };
        });
    }
}
