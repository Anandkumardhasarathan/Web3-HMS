"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EclipseAccountSdk = void 0;
const tslib_1 = require("tslib");
const spl_token_1 = require("@solana/spl-token");
const prepared_transaction_1 = require("../prepared-transaction");
class EclipseAccountSdk {
    constructor(connection, logger) {
        this.connection = connection;
        this.logger = logger;
    }
    getAccountInfo(request) {
        return (0, spl_token_1.getAccount)(this.connection, request.tokenAccount, "max", spl_token_1.TOKEN_2022_PROGRAM_ID);
    }
    revokeDelegate(request) {
        const instructions = [
            (0, spl_token_1.createRevokeInstruction)(request.tokenAccount, request.signer.publicKey, [], spl_token_1.TOKEN_2022_PROGRAM_ID),
        ];
        return new prepared_transaction_1.PreparedTransaction(this.connection, {
            instructions,
            signers: [],
        }, request.signer, this.logger, () => {
            this.logger.log(`${request.tokenAccount.toString()} delegation revoked`);
        });
    }
    getTokenAccountForMint(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            const tokenAccount = yield this.connection.getTokenAccountsByOwner(request.owner, { mint: request.mint });
            return (_a = tokenAccount === null || tokenAccount === void 0 ? void 0 : tokenAccount.value[0]) === null || _a === void 0 ? void 0 : _a.pubkey;
        });
    }
}
exports.EclipseAccountSdk = EclipseAccountSdk;
