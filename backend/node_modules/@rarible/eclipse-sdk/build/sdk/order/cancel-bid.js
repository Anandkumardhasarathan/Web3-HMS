"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelBid = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const spl_token_1 = require("@solana/spl-token");
const marketplace_program_1 = require("../core/marketplace-program");
const utils_1 = require("../utils");
function cancelBid(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const marketProgram = (0, marketplace_program_1.getProgramInstanceRaribleMarketplace)(request.connection);
        const initializer = request.signer.publicKey.toString();
        const order = yield (0, utils_1.fetchOrderByAddress)(request.connection, request.orderAddress.toString());
        if (!order) {
            throw new Error(`Can't find order by given address: ${request.orderAddress.toString()}`);
        }
        const eventAuthority = (0, utils_1.getEventAuthority)();
        const nftMint = new web3_js_1.PublicKey(order.nftMint);
        const market = yield (0, utils_1.fetchMarketByAddress)(request.connection, order.market.toString());
        if (!market) {
            throw new Error("Market not found");
        }
        const paymentTokenProgram = yield (0, utils_1.getTokenProgramFromMint)(request.connection, order.paymentMint.toBase58());
        if (!paymentTokenProgram) {
            throw new Error(`Payment Token program not found. Nft mint: ${nftMint.toString()}, payment mint: ${order.paymentMint.toString()}`);
        }
        const initializerPaymentTa = (0, utils_1.getAtaAddress)(order.paymentMint.toBase58(), initializer, paymentTokenProgram.toString());
        const orderPaymentTa = (0, utils_1.getAtaAddress)(order.paymentMint.toBase58(), request.orderAddress.toString(), paymentTokenProgram.toString());
        const instruction = yield marketProgram.methods
            .cancelBid()
            .accountsStrict({
            initializer,
            market: order.market,
            order: request.orderAddress,
            initializerPaymentTa,
            orderPaymentTa,
            paymentTokenProgram,
            associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: web3_js_1.SystemProgram.programId,
            program: marketProgram.programId,
            eventAuthority,
            paymentMint: order.paymentMint,
        })
            .instruction();
        const instructions = [];
        instructions.push(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({
            units: 850000,
        }));
        instructions.push(instruction);
        return {
            instructions: instructions,
            signers: [],
        };
    });
}
exports.cancelBid = cancelBid;
