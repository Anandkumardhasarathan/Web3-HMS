import type { Connection } from "@solana/web3.js";
import type { PublicKey } from "@solana/web3.js";
import { BigNumber } from "@rarible/utils";
import type { SolanaSigner } from "@rarible/solana-common";
import type { DebugLogger } from "../../logger/debug-logger";
import { PreparedTransaction } from "../prepared-transaction";
import type { WnsAccountParams } from "../utils";
export interface ISellRequest {
    signer: SolanaSigner;
    nftMint: PublicKey;
    paymentMint: PublicKey;
    marketIdentifier: PublicKey;
    price: BigNumber;
    tokensAmount: number;
    extraAccountParams?: WnsAccountParams;
}
export interface IBidRequest {
    signer: SolanaSigner;
    nftMint?: PublicKey;
    paymentMint: PublicKey;
    marketIdentifier: PublicKey;
    price: BigNumber;
    tokensAmount: number;
}
export interface IExecuteOrderRequest {
    signer: SolanaSigner;
    orderAddress: PublicKey;
    amountToFill: number;
    nftMint: PublicKey;
    extraAccountParams?: WnsAccountParams;
}
export interface ICancelSellRequest {
    signer: SolanaSigner;
    orderAddress: PublicKey;
    extraAccountParams?: WnsAccountParams;
}
export interface ICancelBidRequest {
    signer: SolanaSigner;
    orderAddress: PublicKey;
}
export interface IInitializeMarketRequest {
    signer: SolanaSigner;
    marketIdentifier: PublicKey;
    feeRecipient: PublicKey;
    feeRecipient2: PublicKey;
    initializer: PublicKey;
    versionNumber: number;
    feeBps: BigNumber;
    feeBps2: BigNumber;
}
export interface IGetMarketplaceRequest {
    marketIdentifier: PublicKey;
}
export interface Marketplace {
    marketIdentifier: PublicKey;
    feeRecipient: PublicKey;
    feeRecipient2?: PublicKey;
    feeBps: BigNumber;
    feeBps2?: BigNumber;
    version: number;
    initializer: PublicKey;
}
export interface IEclipseOrderSdk {
    sell(request: ISellRequest): Promise<PreparedTransaction>;
    bid(request: IBidRequest): Promise<PreparedTransaction>;
    cancelSell(request: ICancelSellRequest): Promise<PreparedTransaction>;
    cancelBid(request: ICancelBidRequest): Promise<PreparedTransaction>;
    executeOrder(request: IExecuteOrderRequest): Promise<PreparedTransaction>;
    initializeMarket(request: IInitializeMarketRequest): Promise<PreparedTransaction>;
    getMarketPlace(request: IGetMarketplaceRequest): Promise<Marketplace>;
}
export declare class EclipseOrderSdk implements IEclipseOrderSdk {
    private readonly connection;
    private readonly logger;
    constructor(connection: Connection, logger: DebugLogger);
    initializeMarket(request: IInitializeMarketRequest): Promise<PreparedTransaction>;
    sell(request: ISellRequest): Promise<PreparedTransaction>;
    bid(request: IBidRequest): Promise<PreparedTransaction>;
    cancelSell(request: ICancelSellRequest): Promise<PreparedTransaction>;
    cancelBid(request: ICancelBidRequest): Promise<PreparedTransaction>;
    executeOrder(request: IExecuteOrderRequest): Promise<PreparedTransaction>;
    getMarketPlace(request: IGetMarketplaceRequest): Promise<Marketplace>;
}
