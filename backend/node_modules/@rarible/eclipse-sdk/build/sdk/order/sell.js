"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sell = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const anchor_1 = require("@coral-xyz/anchor");
const spl_token_1 = require("@solana/spl-token");
const marketplace_program_1 = require("../core/marketplace-program");
const utils_1 = require("../utils");
function sell(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const marketProgram = (0, marketplace_program_1.getProgramInstanceRaribleMarketplace)(request.connection);
        const market = (0, utils_1.getMarketPda)(request.marketIdentifier.toString());
        const eventAuthority = (0, utils_1.getEventAuthority)();
        const initializer = request.signer.publicKey.toString();
        const nftMint = request.nftMint.toString();
        const nftTokenProgram = yield (0, utils_1.getTokenProgramFromMint)(request.connection, nftMint);
        if (!nftTokenProgram) {
            throw new Error(`Can't find token program for mint ${nftMint}`);
        }
        const nonceKp = web3_js_1.Keypair.generate();
        const nonce = nonceKp.publicKey;
        const nftProgram = yield (0, utils_1.getNftProgramFromMint)(request.connection, nftMint);
        const order = (0, utils_1.getOrderAccount)(nonce.toString(), market.toString(), initializer);
        const initializerNftTa = (0, utils_1.getAtaAddress)(nftMint, initializer, nftTokenProgram.toString());
        const remainingAccounts = yield (0, utils_1.getRemainingAccountsForMint)(request.connection, nftMint, request.extraAccountParams);
        const instruction = yield marketProgram.methods
            .list({
            nonce,
            paymentMint: request.paymentMint,
            price: new anchor_1.BN((0, utils_1.toLamports)(request.price)),
            size: new anchor_1.BN(request.tokensAmount),
        })
            .accountsStrict({
            initializer: request.signer.publicKey,
            market,
            nftMint,
            order,
            initializerNftTa,
            nftProgram: nftProgram !== null && nftProgram !== void 0 ? nftProgram : web3_js_1.PublicKey.default,
            nftTokenProgram,
            sysvarInstructions: web3_js_1.SYSVAR_INSTRUCTIONS_PUBKEY,
            associatedTokenProgram: spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: web3_js_1.SystemProgram.programId,
            program: marketProgram.programId,
            eventAuthority,
        })
            .remainingAccounts(remainingAccounts)
            .instruction();
        const instructions = [];
        instructions.push(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({
            units: 850000,
        }));
        instructions.push(instruction);
        return {
            instructions,
            signers: [],
            orderId: order,
        };
    });
}
exports.sell = sell;
