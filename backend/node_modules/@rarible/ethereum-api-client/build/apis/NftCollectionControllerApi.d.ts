/**
 * OpenAPI definition
 * # Exciting News  Hey there, amazing developers! üëã  We\'ve got some fantastic news to share that will make your experience with our product even better. We\'re thrilled to announce the implementation of API-Keys, which brings a new level of control and convenience to your development process. So, let\'s dive right into the details! ‚ú®  ## API-Keys for Enhanced Functionality üîë  Starting now, we have introduced API-Keys to streamline your interactions with our methods. You might have noticed a slight change while making requests ‚Äì now, all you need to do is include the parameter `X-API-KEY` in the Header of your request. Simple as that!  ## Get Your API-Key in a Snap! ‚ö°Ô∏è  Securing your API-Key is a breeze. We\'ve made the process super user-friendly to ensure you can get started quickly. Just head over to our website and fill out a simple form. Once you\'ve done that, your shiny new API-Key will be delivered straight to your email inbox. Easy peasy! üìß  [Get Your API-Key Here](https://api.rarible.org/registration) [Configure SDK with API-key](https://github.com/rarible/sdk#api-querying)  ## Unlock the Power of the Rarible Protocol üîì  As passionate developers, we know you\'re always hungry for knowledge and eager to explore new frontiers. That\'s why we invite you to discover the incredible world of the Rarible Protocol. By visiting our dedicated protocol page, you\'ll gain access to a treasure trove of useful information, tips, and insights that will elevate your development skills to new heights. üöÄ  [Explore the Rarible Protocol](https://rarible.org)  So, buckle up and get ready for an enhanced development journey with our API-Keys. We\'re excited to see what you\'ll create using our revamped system! üí™üöÄ  Stay curious, keep innovating, and happy coding! ‚ú®  [P.S. Join our Discord Server to stay up to date and ask questions](https://discord.gg/rarifoundation)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CollectionsByIdRequest, EthCollectionMetaResult, EthereumApiErrorBadRequest, EthereumApiErrorEntityNotFound, EthereumApiErrorServerError, NftCollection, NftCollections, NftTokenId } from '../models';
export interface GenerateNftTokenIdRequest {
    collection: string;
    minter: string;
}
export interface GetCollectionMetaRequest {
    collection: string;
}
export interface GetNftCollectionByIdRequest {
    collection: string;
}
export interface GetNftCollectionsByIdsRequest {
    collectionsByIdRequest: CollectionsByIdRequest;
}
export interface SearchNftAllCollectionsRequest {
    continuation?: string;
    size?: number;
}
export interface SearchNftCollectionsByOwnerRequest {
    owner: string;
    continuation?: string;
    size?: number;
}
/**
 * no description
 */
export declare class NftCollectionControllerApi extends runtime.BaseAPI {
    /**
     * Returns next available tokenId for minter
     */
    generateNftTokenIdRaw(requestParameters: GenerateNftTokenIdRequest): Promise<GenerateNftTokenIdResponse>;
    /**
     * Returns next available tokenId for minter
     */
    generateNftTokenId(requestParameters: GenerateNftTokenIdRequest): Promise<NftTokenId>;
    /**
     * Returns collection by address
     */
    getCollectionMetaRaw(requestParameters: GetCollectionMetaRequest): Promise<GetCollectionMetaResponse>;
    /**
     * Returns collection by address
     */
    getCollectionMeta(requestParameters: GetCollectionMetaRequest): Promise<EthCollectionMetaResult>;
    /**
     * Returns collection by address
     */
    getNftCollectionByIdRaw(requestParameters: GetNftCollectionByIdRequest): Promise<GetNftCollectionByIdResponse>;
    /**
     * Returns collection by address
     */
    getNftCollectionById(requestParameters: GetNftCollectionByIdRequest): Promise<NftCollection>;
    /**
     * Returns collections by ids
     */
    getNftCollectionsByIdsRaw(requestParameters: GetNftCollectionsByIdsRequest): Promise<GetNftCollectionsByIdsResponse>;
    /**
     * Returns collections by ids
     */
    getNftCollectionsByIds(requestParameters: GetNftCollectionsByIdsRequest): Promise<NftCollections>;
    /**
     * Returns all NFT collections
     */
    searchNftAllCollectionsRaw(requestParameters: SearchNftAllCollectionsRequest): Promise<SearchNftAllCollectionsResponse>;
    /**
     * Returns all NFT collections
     */
    searchNftAllCollections(requestParameters: SearchNftAllCollectionsRequest): Promise<NftCollections>;
    /**
     * Returns collection by owner
     */
    searchNftCollectionsByOwnerRaw(requestParameters: SearchNftCollectionsByOwnerRequest): Promise<SearchNftCollectionsByOwnerResponse>;
    /**
     * Returns collection by owner
     */
    searchNftCollectionsByOwner(requestParameters: SearchNftCollectionsByOwnerRequest): Promise<NftCollections>;
}
export type GenerateNftTokenId200 = {
    status: 200;
    value: NftTokenId;
};
export type GenerateNftTokenId400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GenerateNftTokenId500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GenerateNftTokenIdResponse = GenerateNftTokenId200 | GenerateNftTokenId400 | GenerateNftTokenId500;
export type GetCollectionMeta200 = {
    status: 200;
    value: EthCollectionMetaResult;
};
export type GetCollectionMeta400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetCollectionMeta500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetCollectionMetaResponse = GetCollectionMeta200 | GetCollectionMeta400 | GetCollectionMeta500;
export type GetNftCollectionById200 = {
    status: 200;
    value: NftCollection;
};
export type GetNftCollectionById404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export type GetNftCollectionById400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetNftCollectionById500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetNftCollectionByIdResponse = GetNftCollectionById200 | GetNftCollectionById404 | GetNftCollectionById400 | GetNftCollectionById500;
export type GetNftCollectionsByIds200 = {
    status: 200;
    value: NftCollections;
};
export type GetNftCollectionsByIds400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetNftCollectionsByIds500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetNftCollectionsByIdsResponse = GetNftCollectionsByIds200 | GetNftCollectionsByIds400 | GetNftCollectionsByIds500;
export type SearchNftAllCollections200 = {
    status: 200;
    value: NftCollections;
};
export type SearchNftAllCollections400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type SearchNftAllCollections500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type SearchNftAllCollectionsResponse = SearchNftAllCollections200 | SearchNftAllCollections400 | SearchNftAllCollections500;
export type SearchNftCollectionsByOwner200 = {
    status: 200;
    value: NftCollections;
};
export type SearchNftCollectionsByOwner400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type SearchNftCollectionsByOwner500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type SearchNftCollectionsByOwnerResponse = SearchNftCollectionsByOwner200 | SearchNftCollectionsByOwner400 | SearchNftCollectionsByOwner500;
