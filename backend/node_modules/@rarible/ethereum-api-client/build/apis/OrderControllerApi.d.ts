/**
 * OpenAPI definition
 * # Exciting News  Hey there, amazing developers! üëã  We\'ve got some fantastic news to share that will make your experience with our product even better. We\'re thrilled to announce the implementation of API-Keys, which brings a new level of control and convenience to your development process. So, let\'s dive right into the details! ‚ú®  ## API-Keys for Enhanced Functionality üîë  Starting now, we have introduced API-Keys to streamline your interactions with our methods. You might have noticed a slight change while making requests ‚Äì now, all you need to do is include the parameter `X-API-KEY` in the Header of your request. Simple as that!  ## Get Your API-Key in a Snap! ‚ö°Ô∏è  Securing your API-Key is a breeze. We\'ve made the process super user-friendly to ensure you can get started quickly. Just head over to our website and fill out a simple form. Once you\'ve done that, your shiny new API-Key will be delivered straight to your email inbox. Easy peasy! üìß  [Get Your API-Key Here](https://api.rarible.org/registration) [Configure SDK with API-key](https://github.com/rarible/sdk#api-querying)  ## Unlock the Power of the Rarible Protocol üîì  As passionate developers, we know you\'re always hungry for knowledge and eager to explore new frontiers. That\'s why we invite you to discover the incredible world of the Rarible Protocol. By visiting our dedicated protocol page, you\'ll gain access to a treasure trove of useful information, tips, and insights that will elevate your development skills to new heights. üöÄ  [Explore the Rarible Protocol](https://rarible.org)  So, buckle up and get ready for an enhanced development journey with our API-Keys. We\'re excited to see what you\'ll create using our revamped system! üí™üöÄ  Stay curious, keep innovating, and happy coding! ‚ú®  [P.S. Join our Discord Server to stay up to date and ask questions](https://discord.gg/rarifoundation)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AmmTradeInfo, EthereumApiErrorBadRequest, EthereumApiErrorEntityNotFound, EthereumApiErrorServerError, EthereumOrderUpdateApiError, HoldNftItemIds, Order, OrderCurrencies, OrderForm, OrderIds, OrderSort, OrderStatus, OrdersPagination, Platform, PrepareOrderTxForm, PrepareOrderTxResponse, PreparedOrderTx, SyncSort } from '../models';
export interface BuyerFeeSignatureRequest {
    fee: number;
    orderForm: OrderForm;
}
export interface GetAllSyncRequest {
    sort?: SyncSort;
    continuation?: string;
    size?: number;
}
export interface GetAmmBuyInfoRequest {
    hash: string;
    numNFTs: number;
}
export interface GetAmmOrderItemIdsRequest {
    hash: string;
    continuation?: string;
    size?: number;
}
export interface GetAmmOrdersByItemRequest {
    contract: string;
    tokenId: string;
    continuation?: string;
    size?: number;
}
export interface GetByIdsRequest {
    orderIds: OrderIds;
}
export interface GetCurrenciesByBidOrdersOfItemRequest {
    contract: string;
    tokenId: string;
    status?: Array<OrderStatus>;
}
export interface GetCurrenciesBySellOrdersOfItemRequest {
    contract: string;
    tokenId: string;
    status?: Array<OrderStatus>;
}
export interface GetOrderBidsByItemRequest {
    contract: string;
    tokenId: string;
    maker?: Array<string>;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetOrderBidsByItemAndByStatusRequest {
    contract: string;
    tokenId: string;
    maker?: Array<string>;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
    currencyId?: string;
    startDate?: number;
    endDate?: number;
}
export interface GetOrderBidsByMakerAndByStatusRequest {
    maker: Array<string>;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
    currencyIds?: Array<string>;
    startDate?: number;
    endDate?: number;
}
export interface GetOrderByHashRequest {
    hash: string;
}
export interface GetOrdersAllRequest {
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetOrdersAllByStatusRequest {
    sort?: OrderSort;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
}
export interface GetOrdersByIdsRequest {
    orderIds: OrderIds;
}
export interface GetSellOrdersRequest {
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByCollectionRequest {
    collection: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByCollectionAndByStatusRequest {
    collection: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
}
export interface GetSellOrdersByItemRequest {
    contract: string;
    tokenId: string;
    maker?: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
}
export interface GetSellOrdersByItemAndByStatusRequest {
    contract: string;
    tokenId: string;
    maker?: string;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
    currencyId?: string;
}
export interface GetSellOrdersByMakerAndByStatusRequest {
    maker: Array<string>;
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
}
export interface GetSellOrdersByStatusRequest {
    origin?: string;
    platform?: Platform;
    continuation?: string;
    size?: number;
    status?: Array<OrderStatus>;
    sort?: OrderSort;
}
export interface GetValidatedOrderByHashRequest {
    hash: string;
}
export interface PrepareOrderCancelTransactionRequest {
    hash: string;
}
export interface PrepareOrderTransactionRequest {
    hash: string;
    prepareOrderTxForm: PrepareOrderTxForm;
}
export interface ReportOrderRequest {
    hash: string;
}
export interface UpdateOrderMakeStockRequest {
    hash: string;
}
export interface UpsertOrderRequest {
    orderForm: OrderForm;
}
/**
 * no description
 */
export declare class OrderControllerApi extends runtime.BaseAPI {
    /**
     * Buyer\'s signature for a fee
     */
    buyerFeeSignatureRaw(requestParameters: BuyerFeeSignatureRequest): Promise<BuyerFeeSignatureResponse>;
    /**
     * Buyer\'s signature for a fee
     */
    buyerFeeSignature(requestParameters: BuyerFeeSignatureRequest): Promise<string>;
    /**
     * Returns all orders with dbUpdatedAt sorting
     */
    getAllSyncRaw(requestParameters: GetAllSyncRequest): Promise<GetAllSyncResponse>;
    /**
     * Returns all orders with dbUpdatedAt sorting
     */
    getAllSync(requestParameters: GetAllSyncRequest): Promise<OrdersPagination>;
    /**
     * Get for buy pricing info from AMM
     */
    getAmmBuyInfoRaw(requestParameters: GetAmmBuyInfoRequest): Promise<GetAmmBuyInfoResponse>;
    /**
     * Get for buy pricing info from AMM
     */
    getAmmBuyInfo(requestParameters: GetAmmBuyInfoRequest): Promise<AmmTradeInfo>;
    /**
     * Returns all item ida hold by AMM order
     */
    getAmmOrderItemIdsRaw(requestParameters: GetAmmOrderItemIdsRequest): Promise<GetAmmOrderItemIdsResponse>;
    /**
     * Returns all item ida hold by AMM order
     */
    getAmmOrderItemIds(requestParameters: GetAmmOrderItemIdsRequest): Promise<HoldNftItemIds>;
    /**
     * Returns all AMM orders by item and order status
     */
    getAmmOrdersByItemRaw(requestParameters: GetAmmOrdersByItemRequest): Promise<GetAmmOrdersByItemResponse>;
    /**
     * Returns all AMM orders by item and order status
     */
    getAmmOrdersByItem(requestParameters: GetAmmOrdersByItemRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders by order hash
     */
    getByIdsRaw(requestParameters: GetByIdsRequest): Promise<GetByIdsResponse>;
    /**
     * Returns all orders by order hash
     */
    getByIds(requestParameters: GetByIdsRequest): Promise<OrdersPagination>;
    /**
     * Returns currencies made as payment in all bid orders of the item
     */
    getCurrenciesByBidOrdersOfItemRaw(requestParameters: GetCurrenciesByBidOrdersOfItemRequest): Promise<GetCurrenciesByBidOrdersOfItemResponse>;
    /**
     * Returns currencies made as payment in all bid orders of the item
     */
    getCurrenciesByBidOrdersOfItem(requestParameters: GetCurrenciesByBidOrdersOfItemRequest): Promise<OrderCurrencies>;
    /**
     * Returns currencies taken as payment in all sell orders of the item
     */
    getCurrenciesBySellOrdersOfItemRaw(requestParameters: GetCurrenciesBySellOrdersOfItemRequest): Promise<GetCurrenciesBySellOrdersOfItemResponse>;
    /**
     * Returns currencies taken as payment in all sell orders of the item
     */
    getCurrenciesBySellOrdersOfItem(requestParameters: GetCurrenciesBySellOrdersOfItemRequest): Promise<OrderCurrencies>;
    /**
     * Returns all order bids by item
     */
    getOrderBidsByItemRaw(requestParameters: GetOrderBidsByItemRequest): Promise<GetOrderBidsByItemResponse>;
    /**
     * Returns all order bids by item
     */
    getOrderBidsByItem(requestParameters: GetOrderBidsByItemRequest): Promise<OrdersPagination>;
    /**
     * Returns all order bids by item and order status
     */
    getOrderBidsByItemAndByStatusRaw(requestParameters: GetOrderBidsByItemAndByStatusRequest): Promise<GetOrderBidsByItemAndByStatusResponse>;
    /**
     * Returns all order bids by item and order status
     */
    getOrderBidsByItemAndByStatus(requestParameters: GetOrderBidsByItemAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all order bids by maker and order status
     */
    getOrderBidsByMakerAndByStatusRaw(requestParameters: GetOrderBidsByMakerAndByStatusRequest): Promise<GetOrderBidsByMakerAndByStatusResponse>;
    /**
     * Returns all order bids by maker and order status
     */
    getOrderBidsByMakerAndByStatus(requestParameters: GetOrderBidsByMakerAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns the order by order hash
     */
    getOrderByHashRaw(requestParameters: GetOrderByHashRequest): Promise<GetOrderByHashResponse>;
    /**
     * Returns the order by order hash
     */
    getOrderByHash(requestParameters: GetOrderByHashRequest): Promise<Order>;
    /**
     * Returns all orders by specified parameters
     */
    getOrdersAllRaw(requestParameters: GetOrdersAllRequest): Promise<GetOrdersAllResponse>;
    /**
     * Returns all orders by specified parameters
     */
    getOrdersAll(requestParameters: GetOrdersAllRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders with status sorting
     */
    getOrdersAllByStatusRaw(requestParameters: GetOrdersAllByStatusRequest): Promise<GetOrdersAllByStatusResponse>;
    /**
     * Returns all orders with status sorting
     */
    getOrdersAllByStatus(requestParameters: GetOrdersAllByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders by order hash
     */
    getOrdersByIdsRaw(requestParameters: GetOrdersByIdsRequest): Promise<GetOrdersByIdsResponse>;
    /**
     * Returns all orders by order hash
     */
    getOrdersByIds(requestParameters: GetOrdersByIdsRequest): Promise<Array<Order>>;
    /**
     * Returns all orders for sale by specified parameters
     */
    getSellOrdersRaw(requestParameters: GetSellOrdersRequest): Promise<GetSellOrdersResponse>;
    /**
     * Returns all orders for sale by specified parameters
     */
    getSellOrders(requestParameters: GetSellOrdersRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by collection
     */
    getSellOrdersByCollectionRaw(requestParameters: GetSellOrdersByCollectionRequest): Promise<GetSellOrdersByCollectionResponse>;
    /**
     * Returns all orders for sale by collection
     */
    getSellOrdersByCollection(requestParameters: GetSellOrdersByCollectionRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by collection and order status
     */
    getSellOrdersByCollectionAndByStatusRaw(requestParameters: GetSellOrdersByCollectionAndByStatusRequest): Promise<GetSellOrdersByCollectionAndByStatusResponse>;
    /**
     * Returns all orders for sale by collection and order status
     */
    getSellOrdersByCollectionAndByStatus(requestParameters: GetSellOrdersByCollectionAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by item
     */
    getSellOrdersByItemRaw(requestParameters: GetSellOrdersByItemRequest): Promise<GetSellOrdersByItemResponse>;
    /**
     * Returns all orders for sale by item
     */
    getSellOrdersByItem(requestParameters: GetSellOrdersByItemRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by item and order status
     */
    getSellOrdersByItemAndByStatusRaw(requestParameters: GetSellOrdersByItemAndByStatusRequest): Promise<GetSellOrdersByItemAndByStatusResponse>;
    /**
     * Returns all orders for sale by item and order status
     */
    getSellOrdersByItemAndByStatus(requestParameters: GetSellOrdersByItemAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by maker and order status
     */
    getSellOrdersByMakerAndByStatusRaw(requestParameters: GetSellOrdersByMakerAndByStatusRequest): Promise<GetSellOrdersByMakerAndByStatusResponse>;
    /**
     * Returns all orders for sale by maker and order status
     */
    getSellOrdersByMakerAndByStatus(requestParameters: GetSellOrdersByMakerAndByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns all orders for sale by order status
     */
    getSellOrdersByStatusRaw(requestParameters: GetSellOrdersByStatusRequest): Promise<GetSellOrdersByStatusResponse>;
    /**
     * Returns all orders for sale by order status
     */
    getSellOrdersByStatus(requestParameters: GetSellOrdersByStatusRequest): Promise<OrdersPagination>;
    /**
     * Returns validated order by order hash
     */
    getValidatedOrderByHashRaw(requestParameters: GetValidatedOrderByHashRequest): Promise<GetValidatedOrderByHashResponse>;
    /**
     * Returns validated order by order hash
     */
    getValidatedOrderByHash(requestParameters: GetValidatedOrderByHashRequest): Promise<Order>;
    /**
     * Prepare order for cancel transaction
     */
    prepareOrderCancelTransactionRaw(requestParameters: PrepareOrderCancelTransactionRequest): Promise<PrepareOrderCancelTransactionResponse>;
    /**
     * Prepare order for cancel transaction
     */
    prepareOrderCancelTransaction(requestParameters: PrepareOrderCancelTransactionRequest): Promise<PreparedOrderTx>;
    /**
     * Prepare order transaction.
     */
    prepareOrderTransactionRaw(requestParameters: PrepareOrderTransactionRequest): Promise<PrepareOrderTransactionResponse>;
    /**
     * Prepare order transaction.
     */
    prepareOrderTransaction(requestParameters: PrepareOrderTransactionRequest): Promise<PrepareOrderTxResponse>;
    /**
     * Report not working order
     */
    reportOrderRaw(requestParameters: ReportOrderRequest): Promise<ReportOrderResponse>;
    /**
     * Report not working order
     */
    reportOrder(requestParameters: ReportOrderRequest): Promise<void>;
    /**
     * Update stock of the order by order hash
     */
    updateOrderMakeStockRaw(requestParameters: UpdateOrderMakeStockRequest): Promise<UpdateOrderMakeStockResponse>;
    /**
     * Update stock of the order by order hash
     */
    updateOrderMakeStock(requestParameters: UpdateOrderMakeStockRequest): Promise<Order>;
    /**
     * Create or update order
     */
    upsertOrderRaw(requestParameters: UpsertOrderRequest): Promise<UpsertOrderResponse>;
    /**
     * Create or update order
     */
    upsertOrder(requestParameters: UpsertOrderRequest): Promise<Order>;
}
export type BuyerFeeSignature200 = {
    status: 200;
    value: string;
};
export type BuyerFeeSignature400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type BuyerFeeSignature500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type BuyerFeeSignatureResponse = BuyerFeeSignature200 | BuyerFeeSignature400 | BuyerFeeSignature500;
export type GetAllSync200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetAllSync400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetAllSync500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetAllSyncResponse = GetAllSync200 | GetAllSync400 | GetAllSync500;
export type GetAmmBuyInfo200 = {
    status: 200;
    value: AmmTradeInfo;
};
export type GetAmmBuyInfo400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetAmmBuyInfo500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetAmmBuyInfoResponse = GetAmmBuyInfo200 | GetAmmBuyInfo400 | GetAmmBuyInfo500;
export type GetAmmOrderItemIds200 = {
    status: 200;
    value: HoldNftItemIds;
};
export type GetAmmOrderItemIds400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetAmmOrderItemIds500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetAmmOrderItemIdsResponse = GetAmmOrderItemIds200 | GetAmmOrderItemIds400 | GetAmmOrderItemIds500;
export type GetAmmOrdersByItem200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetAmmOrdersByItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetAmmOrdersByItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetAmmOrdersByItemResponse = GetAmmOrdersByItem200 | GetAmmOrdersByItem400 | GetAmmOrdersByItem500;
export type GetByIds200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetByIds400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetByIds500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetByIdsResponse = GetByIds200 | GetByIds400 | GetByIds500;
export type GetCurrenciesByBidOrdersOfItem200 = {
    status: 200;
    value: OrderCurrencies;
};
export type GetCurrenciesByBidOrdersOfItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetCurrenciesByBidOrdersOfItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetCurrenciesByBidOrdersOfItemResponse = GetCurrenciesByBidOrdersOfItem200 | GetCurrenciesByBidOrdersOfItem400 | GetCurrenciesByBidOrdersOfItem500;
export type GetCurrenciesBySellOrdersOfItem200 = {
    status: 200;
    value: OrderCurrencies;
};
export type GetCurrenciesBySellOrdersOfItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetCurrenciesBySellOrdersOfItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetCurrenciesBySellOrdersOfItemResponse = GetCurrenciesBySellOrdersOfItem200 | GetCurrenciesBySellOrdersOfItem400 | GetCurrenciesBySellOrdersOfItem500;
export type GetOrderBidsByItem200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetOrderBidsByItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetOrderBidsByItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetOrderBidsByItemResponse = GetOrderBidsByItem200 | GetOrderBidsByItem400 | GetOrderBidsByItem500;
export type GetOrderBidsByItemAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetOrderBidsByItemAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetOrderBidsByItemAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetOrderBidsByItemAndByStatusResponse = GetOrderBidsByItemAndByStatus200 | GetOrderBidsByItemAndByStatus400 | GetOrderBidsByItemAndByStatus500;
export type GetOrderBidsByMakerAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetOrderBidsByMakerAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetOrderBidsByMakerAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetOrderBidsByMakerAndByStatusResponse = GetOrderBidsByMakerAndByStatus200 | GetOrderBidsByMakerAndByStatus400 | GetOrderBidsByMakerAndByStatus500;
export type GetOrderByHash200 = {
    status: 200;
    value: Order;
};
export type GetOrderByHash404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export type GetOrderByHash400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetOrderByHash500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetOrderByHashResponse = GetOrderByHash200 | GetOrderByHash404 | GetOrderByHash400 | GetOrderByHash500;
export type GetOrdersAll200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetOrdersAll400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetOrdersAll500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetOrdersAllResponse = GetOrdersAll200 | GetOrdersAll400 | GetOrdersAll500;
export type GetOrdersAllByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetOrdersAllByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetOrdersAllByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetOrdersAllByStatusResponse = GetOrdersAllByStatus200 | GetOrdersAllByStatus400 | GetOrdersAllByStatus500;
export type GetOrdersByIds200 = {
    status: 200;
    value: Array<Order>;
};
export type GetOrdersByIds400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetOrdersByIds500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetOrdersByIdsResponse = GetOrdersByIds200 | GetOrdersByIds400 | GetOrdersByIds500;
export type GetSellOrders200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetSellOrders400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetSellOrders500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetSellOrdersResponse = GetSellOrders200 | GetSellOrders400 | GetSellOrders500;
export type GetSellOrdersByCollection200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetSellOrdersByCollection400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetSellOrdersByCollection500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetSellOrdersByCollectionResponse = GetSellOrdersByCollection200 | GetSellOrdersByCollection400 | GetSellOrdersByCollection500;
export type GetSellOrdersByCollectionAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetSellOrdersByCollectionAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetSellOrdersByCollectionAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetSellOrdersByCollectionAndByStatusResponse = GetSellOrdersByCollectionAndByStatus200 | GetSellOrdersByCollectionAndByStatus400 | GetSellOrdersByCollectionAndByStatus500;
export type GetSellOrdersByItem200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetSellOrdersByItem400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetSellOrdersByItem500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetSellOrdersByItemResponse = GetSellOrdersByItem200 | GetSellOrdersByItem400 | GetSellOrdersByItem500;
export type GetSellOrdersByItemAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetSellOrdersByItemAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetSellOrdersByItemAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetSellOrdersByItemAndByStatusResponse = GetSellOrdersByItemAndByStatus200 | GetSellOrdersByItemAndByStatus400 | GetSellOrdersByItemAndByStatus500;
export type GetSellOrdersByMakerAndByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetSellOrdersByMakerAndByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetSellOrdersByMakerAndByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetSellOrdersByMakerAndByStatusResponse = GetSellOrdersByMakerAndByStatus200 | GetSellOrdersByMakerAndByStatus400 | GetSellOrdersByMakerAndByStatus500;
export type GetSellOrdersByStatus200 = {
    status: 200;
    value: OrdersPagination;
};
export type GetSellOrdersByStatus400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetSellOrdersByStatus500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetSellOrdersByStatusResponse = GetSellOrdersByStatus200 | GetSellOrdersByStatus400 | GetSellOrdersByStatus500;
export type GetValidatedOrderByHash200 = {
    status: 200;
    value: Order;
};
export type GetValidatedOrderByHash404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export type GetValidatedOrderByHash400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type GetValidatedOrderByHash500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type GetValidatedOrderByHashResponse = GetValidatedOrderByHash200 | GetValidatedOrderByHash404 | GetValidatedOrderByHash400 | GetValidatedOrderByHash500;
export type PrepareOrderCancelTransaction200 = {
    status: 200;
    value: PreparedOrderTx;
};
export type PrepareOrderCancelTransaction404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export type PrepareOrderCancelTransaction400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type PrepareOrderCancelTransaction500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type PrepareOrderCancelTransactionResponse = PrepareOrderCancelTransaction200 | PrepareOrderCancelTransaction404 | PrepareOrderCancelTransaction400 | PrepareOrderCancelTransaction500;
export type PrepareOrderTransaction200 = {
    status: 200;
    value: PrepareOrderTxResponse;
};
export type PrepareOrderTransaction404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export type PrepareOrderTransaction400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type PrepareOrderTransaction500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type PrepareOrderTransactionResponse = PrepareOrderTransaction200 | PrepareOrderTransaction404 | PrepareOrderTransaction400 | PrepareOrderTransaction500;
export type ReportOrder200 = {
    status: 200;
};
export type ReportOrder404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export type ReportOrder400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type ReportOrder500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type ReportOrderResponse = ReportOrder200 | ReportOrder404 | ReportOrder400 | ReportOrder500;
export type UpdateOrderMakeStock200 = {
    status: 200;
    value: Order;
};
export type UpdateOrderMakeStock404 = {
    status: 404;
    value: EthereumApiErrorEntityNotFound;
};
export type UpdateOrderMakeStock400 = {
    status: 400;
    value: EthereumApiErrorBadRequest;
};
export type UpdateOrderMakeStock500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type UpdateOrderMakeStockResponse = UpdateOrderMakeStock200 | UpdateOrderMakeStock404 | UpdateOrderMakeStock400 | UpdateOrderMakeStock500;
export type UpsertOrder200 = {
    status: 200;
    value: Order;
};
export type UpsertOrder400 = {
    status: 400;
    value: EthereumOrderUpdateApiError;
};
export type UpsertOrder500 = {
    status: 500;
    value: EthereumApiErrorServerError;
};
export type UpsertOrderResponse = UpsertOrder200 | UpsertOrder400 | UpsertOrder500;
