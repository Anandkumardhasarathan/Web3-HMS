"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * # Exciting News  Hey there, amazing developers! üëã  We\'ve got some fantastic news to share that will make your experience with our product even better. We\'re thrilled to announce the implementation of API-Keys, which brings a new level of control and convenience to your development process. So, let\'s dive right into the details! ‚ú®  ## API-Keys for Enhanced Functionality üîë  Starting now, we have introduced API-Keys to streamline your interactions with our methods. You might have noticed a slight change while making requests ‚Äì now, all you need to do is include the parameter `X-API-KEY` in the Header of your request. Simple as that!  ## Get Your API-Key in a Snap! ‚ö°Ô∏è  Securing your API-Key is a breeze. We\'ve made the process super user-friendly to ensure you can get started quickly. Just head over to our website and fill out a simple form. Once you\'ve done that, your shiny new API-Key will be delivered straight to your email inbox. Easy peasy! üìß  [Get Your API-Key Here](https://api.rarible.org/registration) [Configure SDK with API-key](https://github.com/rarible/sdk#api-querying)  ## Unlock the Power of the Rarible Protocol üîì  As passionate developers, we know you\'re always hungry for knowledge and eager to explore new frontiers. That\'s why we invite you to discover the incredible world of the Rarible Protocol. By visiting our dedicated protocol page, you\'ll gain access to a treasure trove of useful information, tips, and insights that will elevate your development skills to new heights. üöÄ  [Explore the Rarible Protocol](https://rarible.org)  So, buckle up and get ready for an enhanced development journey with our API-Keys. We\'re excited to see what you\'ll create using our revamped system! üí™üöÄ  Stay curious, keep innovating, and happy coding! ‚ú®  [P.S. Join our Discord Server to stay up to date and ask questions](https://discord.gg/rarifoundation)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrderControllerApi = void 0;
const runtime = __importStar(require("../runtime"));
/**
 * no description
 */
class OrderControllerApi extends runtime.BaseAPI {
    /**
     * Buyer\'s signature for a fee
     */
    buyerFeeSignatureRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fee === null || requestParameters.fee === undefined) {
                throw new runtime.RequiredError('fee', 'Required parameter requestParameters.fee was null or undefined when calling buyerFeeSignature.');
            }
            if (requestParameters.orderForm === null || requestParameters.orderForm === undefined) {
                throw new runtime.RequiredError('orderForm', 'Required parameter requestParameters.orderForm was null or undefined when calling buyerFeeSignature.');
            }
            const queryParameters = {};
            if (requestParameters.fee !== undefined) {
                queryParameters['fee'] = requestParameters.fee;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/buyerFeeSignature`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.orderForm,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Buyer\'s signature for a fee
     */
    buyerFeeSignature(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buyerFeeSignatureRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders with dbUpdatedAt sorting
     */
    getAllSyncRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/sync`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders with dbUpdatedAt sorting
     */
    getAllSync(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllSyncRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Get for buy pricing info from AMM
     */
    getAmmBuyInfoRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getAmmBuyInfo.');
            }
            if (requestParameters.numNFTs === null || requestParameters.numNFTs === undefined) {
                throw new runtime.RequiredError('numNFTs', 'Required parameter requestParameters.numNFTs was null or undefined when calling getAmmBuyInfo.');
            }
            const queryParameters = {};
            if (requestParameters.numNFTs !== undefined) {
                queryParameters['numNFTs'] = requestParameters.numNFTs;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/amm/{hash}/buyInfo`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Get for buy pricing info from AMM
     */
    getAmmBuyInfo(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAmmBuyInfoRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all item ida hold by AMM order
     */
    getAmmOrderItemIdsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getAmmOrderItemIds.');
            }
            const queryParameters = {};
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/amm/{hash}/holdItemIds`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all item ida hold by AMM order
     */
    getAmmOrderItemIds(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAmmOrderItemIdsRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all AMM orders by item and order status
     */
    getAmmOrdersByItemRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.contract === null || requestParameters.contract === undefined) {
                throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getAmmOrdersByItem.');
            }
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getAmmOrdersByItem.');
            }
            const queryParameters = {};
            if (requestParameters.contract !== undefined) {
                queryParameters['contract'] = requestParameters.contract;
            }
            if (requestParameters.tokenId !== undefined) {
                queryParameters['tokenId'] = requestParameters.tokenId;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/amm/byItem`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all AMM orders by item and order status
     */
    getAmmOrdersByItem(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAmmOrdersByItemRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders by order hash
     */
    getByIdsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.orderIds === null || requestParameters.orderIds === undefined) {
                throw new runtime.RequiredError('orderIds', 'Required parameter requestParameters.orderIds was null or undefined when calling getByIds.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/byOrderIds`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.orderIds,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders by order hash
     */
    getByIds(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getByIdsRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns currencies made as payment in all bid orders of the item
     */
    getCurrenciesByBidOrdersOfItemRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.contract === null || requestParameters.contract === undefined) {
                throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getCurrenciesByBidOrdersOfItem.');
            }
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getCurrenciesByBidOrdersOfItem.');
            }
            const queryParameters = {};
            if (requestParameters.contract !== undefined) {
                queryParameters['contract'] = requestParameters.contract;
            }
            if (requestParameters.tokenId !== undefined) {
                queryParameters['tokenId'] = requestParameters.tokenId;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/currencies/byBidOrdersOfItem`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns currencies made as payment in all bid orders of the item
     */
    getCurrenciesByBidOrdersOfItem(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCurrenciesByBidOrdersOfItemRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns currencies taken as payment in all sell orders of the item
     */
    getCurrenciesBySellOrdersOfItemRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.contract === null || requestParameters.contract === undefined) {
                throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getCurrenciesBySellOrdersOfItem.');
            }
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getCurrenciesBySellOrdersOfItem.');
            }
            const queryParameters = {};
            if (requestParameters.contract !== undefined) {
                queryParameters['contract'] = requestParameters.contract;
            }
            if (requestParameters.tokenId !== undefined) {
                queryParameters['tokenId'] = requestParameters.tokenId;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/currencies/bySellOrdersOfItem`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns currencies taken as payment in all sell orders of the item
     */
    getCurrenciesBySellOrdersOfItem(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCurrenciesBySellOrdersOfItemRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all order bids by item
     */
    getOrderBidsByItemRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.contract === null || requestParameters.contract === undefined) {
                throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getOrderBidsByItem.');
            }
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getOrderBidsByItem.');
            }
            const queryParameters = {};
            if (requestParameters.contract !== undefined) {
                queryParameters['contract'] = requestParameters.contract;
            }
            if (requestParameters.tokenId !== undefined) {
                queryParameters['tokenId'] = requestParameters.tokenId;
            }
            if (requestParameters.maker) {
                queryParameters['maker'] = requestParameters.maker;
            }
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/bids/byItem`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all order bids by item
     */
    getOrderBidsByItem(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrderBidsByItemRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all order bids by item and order status
     */
    getOrderBidsByItemAndByStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.contract === null || requestParameters.contract === undefined) {
                throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getOrderBidsByItemAndByStatus.');
            }
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getOrderBidsByItemAndByStatus.');
            }
            const queryParameters = {};
            if (requestParameters.contract !== undefined) {
                queryParameters['contract'] = requestParameters.contract;
            }
            if (requestParameters.tokenId !== undefined) {
                queryParameters['tokenId'] = requestParameters.tokenId;
            }
            if (requestParameters.maker) {
                queryParameters['maker'] = requestParameters.maker;
            }
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.currencyId !== undefined) {
                queryParameters['currencyId'] = requestParameters.currencyId;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/bids/byItemAndByStatus`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all order bids by item and order status
     */
    getOrderBidsByItemAndByStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrderBidsByItemAndByStatusRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all order bids by maker and order status
     */
    getOrderBidsByMakerAndByStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.maker === null || requestParameters.maker === undefined) {
                throw new runtime.RequiredError('maker', 'Required parameter requestParameters.maker was null or undefined when calling getOrderBidsByMakerAndByStatus.');
            }
            const queryParameters = {};
            if (requestParameters.maker) {
                queryParameters['maker'] = requestParameters.maker;
            }
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.currencyIds) {
                queryParameters['currencyIds'] = requestParameters.currencyIds;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['startDate'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['endDate'] = requestParameters.endDate;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/bids/byMakerAndByStatus`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all order bids by maker and order status
     */
    getOrderBidsByMakerAndByStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrderBidsByMakerAndByStatusRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns the order by order hash
     */
    getOrderByHashRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getOrderByHash.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 404) {
                return {
                    status: 404,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns the order by order hash
     */
    getOrderByHash(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrderByHashRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders by specified parameters
     */
    getOrdersAllRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/all`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders by specified parameters
     */
    getOrdersAll(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrdersAllRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders with status sorting
     */
    getOrdersAllByStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/all/byStatus`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders with status sorting
     */
    getOrdersAllByStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrdersAllByStatusRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders by order hash
     */
    getOrdersByIdsRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.orderIds === null || requestParameters.orderIds === undefined) {
                throw new runtime.RequiredError('orderIds', 'Required parameter requestParameters.orderIds was null or undefined when calling getOrdersByIds.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/byIds`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.orderIds,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders by order hash
     */
    getOrdersByIds(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrdersByIdsRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by specified parameters
     */
    getSellOrdersRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/sell`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by specified parameters
     */
    getSellOrders(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellOrdersRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by collection
     */
    getSellOrdersByCollectionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.collection === null || requestParameters.collection === undefined) {
                throw new runtime.RequiredError('collection', 'Required parameter requestParameters.collection was null or undefined when calling getSellOrdersByCollection.');
            }
            const queryParameters = {};
            if (requestParameters.collection !== undefined) {
                queryParameters['collection'] = requestParameters.collection;
            }
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/sell/byCollection`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by collection
     */
    getSellOrdersByCollection(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellOrdersByCollectionRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by collection and order status
     */
    getSellOrdersByCollectionAndByStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.collection === null || requestParameters.collection === undefined) {
                throw new runtime.RequiredError('collection', 'Required parameter requestParameters.collection was null or undefined when calling getSellOrdersByCollectionAndByStatus.');
            }
            const queryParameters = {};
            if (requestParameters.collection !== undefined) {
                queryParameters['collection'] = requestParameters.collection;
            }
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/sell/byCollectionAndByStatus`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by collection and order status
     */
    getSellOrdersByCollectionAndByStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellOrdersByCollectionAndByStatusRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by item
     */
    getSellOrdersByItemRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.contract === null || requestParameters.contract === undefined) {
                throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getSellOrdersByItem.');
            }
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getSellOrdersByItem.');
            }
            const queryParameters = {};
            if (requestParameters.contract !== undefined) {
                queryParameters['contract'] = requestParameters.contract;
            }
            if (requestParameters.tokenId !== undefined) {
                queryParameters['tokenId'] = requestParameters.tokenId;
            }
            if (requestParameters.maker !== undefined) {
                queryParameters['maker'] = requestParameters.maker;
            }
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/sell/byItem`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by item
     */
    getSellOrdersByItem(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellOrdersByItemRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by item and order status
     */
    getSellOrdersByItemAndByStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.contract === null || requestParameters.contract === undefined) {
                throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getSellOrdersByItemAndByStatus.');
            }
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getSellOrdersByItemAndByStatus.');
            }
            const queryParameters = {};
            if (requestParameters.contract !== undefined) {
                queryParameters['contract'] = requestParameters.contract;
            }
            if (requestParameters.tokenId !== undefined) {
                queryParameters['tokenId'] = requestParameters.tokenId;
            }
            if (requestParameters.maker !== undefined) {
                queryParameters['maker'] = requestParameters.maker;
            }
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.currencyId !== undefined) {
                queryParameters['currencyId'] = requestParameters.currencyId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/sell/byItemAndByStatus`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by item and order status
     */
    getSellOrdersByItemAndByStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellOrdersByItemAndByStatusRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by maker and order status
     */
    getSellOrdersByMakerAndByStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.maker === null || requestParameters.maker === undefined) {
                throw new runtime.RequiredError('maker', 'Required parameter requestParameters.maker was null or undefined when calling getSellOrdersByMakerAndByStatus.');
            }
            const queryParameters = {};
            if (requestParameters.maker) {
                queryParameters['maker'] = requestParameters.maker;
            }
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/sell/byMakerAndByStatus`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by maker and order status
     */
    getSellOrdersByMakerAndByStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellOrdersByMakerAndByStatusRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by order status
     */
    getSellOrdersByStatusRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.origin !== undefined) {
                queryParameters['origin'] = requestParameters.origin;
            }
            if (requestParameters.platform !== undefined) {
                queryParameters['platform'] = requestParameters.platform;
            }
            if (requestParameters.continuation !== undefined) {
                queryParameters['continuation'] = requestParameters.continuation;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.status) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.sort !== undefined) {
                queryParameters['sort'] = requestParameters.sort;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/sellByStatus`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns all orders for sale by order status
     */
    getSellOrdersByStatus(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSellOrdersByStatusRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Returns validated order by order hash
     */
    getValidatedOrderByHashRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getValidatedOrderByHash.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/{hash}/validated`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 404) {
                return {
                    status: 404,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Returns validated order by order hash
     */
    getValidatedOrderByHash(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getValidatedOrderByHashRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Prepare order for cancel transaction
     */
    prepareOrderCancelTransactionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling prepareOrderCancelTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/{hash}/prepareCancelTx`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 404) {
                return {
                    status: 404,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Prepare order for cancel transaction
     */
    prepareOrderCancelTransaction(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.prepareOrderCancelTransactionRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Prepare order transaction.
     */
    prepareOrderTransactionRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling prepareOrderTransaction.');
            }
            if (requestParameters.prepareOrderTxForm === null || requestParameters.prepareOrderTxForm === undefined) {
                throw new runtime.RequiredError('prepareOrderTxForm', 'Required parameter requestParameters.prepareOrderTxForm was null or undefined when calling prepareOrderTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/{hash}/prepareTx`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.prepareOrderTxForm,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 404) {
                return {
                    status: 404,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Prepare order transaction.
     */
    prepareOrderTransaction(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.prepareOrderTransactionRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Report not working order
     */
    reportOrderRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling reportOrder.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/{hash}/report`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                };
            }
            if (response.status === 404) {
                return {
                    status: 404,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Report not working order
     */
    reportOrder(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reportOrderRaw(requestParameters);
        });
    }
    /**
     * Update stock of the order by order hash
     */
    updateOrderMakeStockRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling updateOrderMakeStock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders/{hash}/updateMakeStock`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 404) {
                return {
                    status: 404,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Update stock of the order by order hash
     */
    updateOrderMakeStock(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateOrderMakeStockRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
    /**
     * Create or update order
     */
    upsertOrderRaw(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.orderForm === null || requestParameters.orderForm === undefined) {
                throw new runtime.RequiredError('orderForm', 'Required parameter requestParameters.orderForm was null or undefined when calling upsertOrder.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
            }
            const response = yield this.request({
                path: `/v0.1/order/orders`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.orderForm,
            });
            if (response.status === 200) {
                return {
                    status: 200,
                    value: yield response.json()
                };
            }
            if (response.status === 400) {
                return {
                    status: 400,
                    value: yield response.json()
                };
            }
            if (response.status === 500) {
                return {
                    status: 500,
                    value: yield response.json()
                };
            }
            throw response;
        });
    }
    /**
     * Create or update order
     */
    upsertOrder(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.upsertOrderRaw(requestParameters);
            if (response.status === 200) {
                return response.value;
            }
            throw response;
        });
    }
}
exports.OrderControllerApi = OrderControllerApi;
