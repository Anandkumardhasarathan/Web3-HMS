import { Asset } from "./Asset";
import { AssetType } from "./AssetType";
import { BigNumberLike } from "@rarible/types";
import { Binary } from "@rarible/types";
import { EVMAddress } from "@rarible/types";
import { OrderActivityMatchSide } from "./OrderActivityMatchSide";
import { Word } from "@rarible/types";
export type Activity = OrderActivity | NftActivity;
export declare enum OrderActivitySource {
    RARIBLE = "RARIBLE",
    OPEN_SEA = "OPEN_SEA",
    CRYPTO_PUNKS = "CRYPTO_PUNKS",
    X2Y2 = "X2Y2",
    LOOKSRARE = "LOOKSRARE",
    SUDOSWAP = "SUDOSWAP",
    BLUR = "BLUR"
}
export type OrderActivity = OrderActivityMatch | OrderActivityBid | OrderActivityList | OrderActivityCancelBid | OrderActivityCancelList;
export declare enum OrderActivityMatchType {
    SELL = "SELL",
    ACCEPT_BID = "ACCEPT_BID"
}
export type OrderActivityMatch = {
    "@type": "match";
    id: string;
    date: string;
    source: OrderActivitySource;
    lastUpdatedAt?: string;
    reverted?: boolean;
    left: OrderActivityMatchSide;
    right: OrderActivityMatchSide;
    price: BigNumberLike;
    priceUsd?: BigNumberLike;
    transactionHash: Word;
    blockHash: Word;
    blockNumber: number;
    logIndex: number;
    type?: OrderActivityMatchType;
    marketplaceMarker?: Word;
    counterMarketplaceMarker?: Word;
};
export type OrderActivityBid = {
    "@type": "bid";
    id: string;
    date: string;
    source: OrderActivitySource;
    lastUpdatedAt?: string;
    reverted?: boolean;
    hash: Word;
    maker: EVMAddress;
    make: Asset;
    take: Asset;
    price: BigNumberLike;
    priceUsd?: BigNumberLike;
};
export type OrderActivityList = {
    "@type": "list";
    id: string;
    date: string;
    source: OrderActivitySource;
    lastUpdatedAt?: string;
    reverted?: boolean;
    hash: Word;
    maker: EVMAddress;
    make: Asset;
    take: Asset;
    price: BigNumberLike;
    priceUsd?: BigNumberLike;
};
export type OrderActivityCancelBid = {
    "@type": "cancel_bid";
    id: string;
    date: string;
    source: OrderActivitySource;
    lastUpdatedAt?: string;
    reverted?: boolean;
    hash: Word;
    maker: EVMAddress;
    make: AssetType;
    take: AssetType;
    transactionHash: Word;
    blockHash: Word;
    blockNumber: number;
    logIndex: number;
};
export type OrderActivityCancelList = {
    "@type": "cancel_list";
    id: string;
    date: string;
    source: OrderActivitySource;
    lastUpdatedAt?: string;
    reverted?: boolean;
    hash: Word;
    maker: EVMAddress;
    make: AssetType;
    take: AssetType;
    transactionHash: Word;
    blockHash: Word;
    blockNumber: number;
    logIndex: number;
};
export type NftActivity = Mint | Burn | Transfer | SendToChain | ReceiveFromChain;
export type Mint = {
    "@type": "mint";
    owner: EVMAddress;
    contract: EVMAddress;
    tokenId: BigNumberLike;
    value: BigNumberLike;
    transactionHash: Word;
    blockHash: Word;
    blockNumber: number;
    logIndex: number;
    id: string;
    date: string;
    lastUpdatedAt?: string;
    reverted?: boolean;
    mintPrice?: BigNumberLike;
    mintPayment?: Asset;
};
export type Burn = {
    "@type": "burn";
    owner: EVMAddress;
    contract: EVMAddress;
    tokenId: BigNumberLike;
    value: BigNumberLike;
    transactionHash: Word;
    blockHash: Word;
    blockNumber: number;
    logIndex: number;
    id: string;
    date: string;
    lastUpdatedAt?: string;
    reverted?: boolean;
};
export type Transfer = {
    "@type": "transfer";
    owner: EVMAddress;
    contract: EVMAddress;
    tokenId: BigNumberLike;
    value: BigNumberLike;
    transactionHash: Word;
    blockHash: Word;
    blockNumber: number;
    logIndex: number;
    id: string;
    date: string;
    lastUpdatedAt?: string;
    reverted?: boolean;
    from: EVMAddress;
    purchase?: boolean;
};
export type SendToChain = {
    "@type": "sentToChain";
    owner: EVMAddress;
    contract: EVMAddress;
    tokenId: BigNumberLike;
    value: BigNumberLike;
    transactionHash: Word;
    blockHash: Word;
    blockNumber: number;
    logIndex: number;
    id: string;
    date: string;
    lastUpdatedAt?: string;
    reverted?: boolean;
    to: Binary;
    chainId: BigNumberLike;
};
export type ReceiveFromChain = {
    "@type": "receiveFromChain";
    owner: EVMAddress;
    contract: EVMAddress;
    tokenId: BigNumberLike;
    value: BigNumberLike;
    transactionHash: Word;
    blockHash: Word;
    blockNumber: number;
    logIndex: number;
    id: string;
    date: string;
    lastUpdatedAt?: string;
    reverted?: boolean;
    from: Binary;
    chainId: BigNumberLike;
};
