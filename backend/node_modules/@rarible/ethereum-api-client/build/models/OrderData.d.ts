import { BigNumberLike } from "@rarible/types";
import { Binary } from "@rarible/types";
import { EVMAddress } from "@rarible/types";
import { LooksRareMerkleProof } from "./LooksRareMerkleProof";
import { Part } from "./Part";
import { SeaportConsideration } from "./SeaportConsideration";
import { SeaportOffer } from "./SeaportOffer";
import { SeaportOrderType } from "./SeaportOrderType";
import { SudoSwapCurveType } from "./SudoSwapCurveType";
import { SudoSwapPoolType } from "./SudoSwapPoolType";
import { Word } from "@rarible/types";
export type OrderData = OrderRaribleV2Data | OrderDataLegacy | OrderOpenSeaV1DataV1 | OrderSeaportDataV1 | OrderCryptoPunksData | OrderLooksRareDataV1 | OrderLooksRareDataV2 | OrderX2Y2Data | OrderAmmDataV1;
export type OrderRaribleV2Data = OrderRaribleV2DataV1 | OrderRaribleV2DataV2 | OrderRaribleV2DataV3 | OrderRaribleV2DataV3Sell | OrderRaribleV2DataV3Buy;
export type OrderRaribleV2DataV1 = {
    dataType: "RARIBLE_V2_DATA_V1";
    payouts: Array<Part>;
    originFees: Array<Part>;
};
export type OrderRaribleV2DataV2 = {
    dataType: "RARIBLE_V2_DATA_V2";
    payouts: Array<Part>;
    originFees: Array<Part>;
    isMakeFill: boolean;
};
export type OrderRaribleV2DataV3 = {
    dataType: "RARIBLE_V2_DATA_V3";
    payouts: Array<Part>;
    originFees: Array<Part>;
    isMakeFill: boolean;
};
export type OrderRaribleV2DataV3Sell = {
    dataType: "RARIBLE_V2_DATA_V3_SELL";
    payout?: Part;
    originFeeFirst?: Part;
    originFeeSecond?: Part;
    maxFeesBasePoint: number;
    marketplaceMarker?: Word;
};
export type OrderRaribleV2DataV3Buy = {
    dataType: "RARIBLE_V2_DATA_V3_BUY";
    payout?: Part;
    originFeeFirst?: Part;
    originFeeSecond?: Part;
    marketplaceMarker?: Word;
};
export type OrderDataLegacy = {
    dataType: "LEGACY";
    fee: number;
};
export declare enum OrderOpenSeaV1DataV1FeeMethod {
    PROTOCOL_FEE = "PROTOCOL_FEE",
    SPLIT_FEE = "SPLIT_FEE"
}
export declare enum OrderOpenSeaV1DataV1Side {
    BUY = "BUY",
    SELL = "SELL"
}
export declare enum OrderOpenSeaV1DataV1SaleKind {
    FIXED_PRICE = "FIXED_PRICE",
    DUTCH_AUCTION = "DUTCH_AUCTION"
}
export declare enum OrderOpenSeaV1DataV1HowToCall {
    CALL = "CALL",
    DELEGATE_CALL = "DELEGATE_CALL"
}
export type OrderOpenSeaV1DataV1 = {
    dataType: "OPEN_SEA_V1_DATA_V1";
    exchange: EVMAddress;
    makerRelayerFee: BigNumberLike;
    takerRelayerFee: BigNumberLike;
    makerProtocolFee: BigNumberLike;
    takerProtocolFee: BigNumberLike;
    feeRecipient: EVMAddress;
    feeMethod: OrderOpenSeaV1DataV1FeeMethod;
    side: OrderOpenSeaV1DataV1Side;
    saleKind: OrderOpenSeaV1DataV1SaleKind;
    howToCall: OrderOpenSeaV1DataV1HowToCall;
    callData: Binary;
    replacementPattern: Binary;
    staticTarget: EVMAddress;
    staticExtraData: Binary;
    extra: BigNumberLike;
    target?: EVMAddress;
};
export type OrderSeaportDataV1 = OrderBasicSeaportDataV1;
export type OrderBasicSeaportDataV1 = {
    dataType: "BASIC_SEAPORT_DATA_V1";
    protocol: EVMAddress;
    orderType: SeaportOrderType;
    offer: Array<SeaportOffer>;
    consideration: Array<SeaportConsideration>;
    zone: EVMAddress;
    zoneHash: Word;
    conduitKey: Word;
    counter?: number;
    nonce?: BigNumberLike;
};
export type OrderCryptoPunksData = {
    dataType: "CRYPTO_PUNKS_DATA";
};
export type OrderLooksRareDataV1 = {
    dataType: "LOOKSRARE_DATA_V1";
    minPercentageToAsk: number;
    strategy: EVMAddress;
    nonce: number;
    params?: Binary;
};
export declare enum OrderLooksRareDataV2QuoteType {
    BID = "BID",
    ASK = "ASK"
}
export type OrderLooksRareDataV2 = {
    dataType: "LOOKSRARE_DATA_V2";
    quoteType: OrderLooksRareDataV2QuoteType;
    globalNonce: BigNumberLike;
    orderNonce: BigNumberLike;
    subsetNonce: BigNumberLike;
    strategyId: BigNumberLike;
    additionalParameters: Binary;
    merkleRoot?: Binary;
    merkleProof?: Array<LooksRareMerkleProof>;
};
export type OrderX2Y2Data = {
    dataType: "X2Y2_DATA";
    itemHash: Word;
    isCollectionOffer: boolean;
    isBundle: boolean;
    side: number;
    orderId: BigNumberLike;
};
export type OrderAmmDataV1 = OrderSudoSwapAmmDataV1;
export type OrderSudoSwapAmmDataV1 = {
    dataType: "SUDOSWAP_AMM_DATA_V1";
    poolAddress: EVMAddress;
    bondingCurve: EVMAddress;
    curveType: SudoSwapCurveType;
    assetRecipient: EVMAddress;
    poolType: SudoSwapPoolType;
    delta: BigNumberLike;
    fee: BigNumberLike;
    feeDecimal: number;
};
