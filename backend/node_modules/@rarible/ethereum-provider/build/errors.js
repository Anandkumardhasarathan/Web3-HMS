"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumProviderError = void 0;
class EthereumProviderError extends Error {
    constructor(data) {
        var _a, _b, _c, _d;
        super(EthereumProviderError.getErrorMessage(data === null || data === void 0 ? void 0 : data.error));
        Object.setPrototypeOf(this, EthereumProviderError.prototype);
        this.name = "EthereumProviderError";
        this.error = data === null || data === void 0 ? void 0 : data.error;
        if ((_a = data === null || data === void 0 ? void 0 : data.error) === null || _a === void 0 ? void 0 : _a.stack) {
            this.stack = this.getNewStack(data === null || data === void 0 ? void 0 : data.error);
        }
        this.provider = data === null || data === void 0 ? void 0 : data.provider;
        this.data = data === null || data === void 0 ? void 0 : data.data;
        this.method = data === null || data === void 0 ? void 0 : data.method;
        this.code = ((_b = data === null || data === void 0 ? void 0 : data.error) === null || _b === void 0 ? void 0 : _b.code) || ((_d = (_c = data === null || data === void 0 ? void 0 : data.error) === null || _c === void 0 ? void 0 : _c.error) === null || _d === void 0 ? void 0 : _d.code) || (data === null || data === void 0 ? void 0 : data.code);
        this.signer = data === null || data === void 0 ? void 0 : data.signer;
        this.chainId = data === null || data === void 0 ? void 0 : data.chainId;
        this.providerId = data === null || data === void 0 ? void 0 : data.providerId;
        this.blockNumber = data === null || data === void 0 ? void 0 : data.blockNumber;
    }
    static getErrorMessage(error) {
        if (typeof error === "string")
            return error;
        return (error === null || error === void 0 ? void 0 : error.message) || "EthereumProviderError";
    }
    getNewStack(error) {
        var _a;
        try {
            return ((_a = this.stack) === null || _a === void 0 ? void 0 : _a.split("\n").slice(0, 2).join("\n")) + "\n" + error.stack || this.stack;
        }
        catch (e) {
            return this.stack || error.stack;
        }
    }
}
exports.EthereumProviderError = EthereumProviderError;
