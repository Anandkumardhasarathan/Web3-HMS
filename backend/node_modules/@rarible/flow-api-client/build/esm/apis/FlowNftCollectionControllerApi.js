/* tslint:disable */
/* eslint-disable */
/**
 * flow-protocol-model-common
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { __awaiter, __extends, __generator } from "tslib";
import * as runtime from '../runtime';
/**
 * no description
 */
var FlowNftCollectionControllerApi = /** @class */ (function (_super) {
    __extends(FlowNftCollectionControllerApi, _super);
    function FlowNftCollectionControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns Collection by ID
     */
    FlowNftCollectionControllerApi.prototype.getNftCollectionByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters.collection === null || requestParameters.collection === undefined) {
                            throw new runtime.RequiredError('collection', 'Required parameter requestParameters.collection was null or undefined when calling getNftCollectionById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/collections/{collection}".replace("{" + "collection" + "}", encodeURIComponent(String(requestParameters.collection))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _c.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _c.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 500)) return [3 /*break*/, 5];
                        _b = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _c.sent(),
                            _b)];
                    case 5: throw response;
                }
            });
        });
    };
    /**
     * Returns Collection by ID
     */
    FlowNftCollectionControllerApi.prototype.getNftCollectionById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftCollectionByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftCollectionControllerApi.prototype.searchNftAllCollectionsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/collections/all",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _c.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _c.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 500)) return [3 /*break*/, 5];
                        _b = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _c.sent(),
                            _b)];
                    case 5: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftCollectionControllerApi.prototype.searchNftAllCollections = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchNftAllCollectionsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftCollectionControllerApi.prototype.searchNftCollectionsByIdsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters.ids === null || requestParameters.ids === undefined) {
                            throw new runtime.RequiredError('ids', 'Required parameter requestParameters.ids was null or undefined when calling searchNftCollectionsByIds.');
                        }
                        queryParameters = {};
                        if (requestParameters.ids) {
                            queryParameters['ids'] = requestParameters.ids;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/collections/byIds",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _c.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _c.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 500)) return [3 /*break*/, 5];
                        _b = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _c.sent(),
                            _b)];
                    case 5: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftCollectionControllerApi.prototype.searchNftCollectionsByIds = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchNftCollectionsByIdsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftCollectionControllerApi.prototype.searchNftCollectionsByOwnerRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters.owner === null || requestParameters.owner === undefined) {
                            throw new runtime.RequiredError('owner', 'Required parameter requestParameters.owner was null or undefined when calling searchNftCollectionsByOwner.');
                        }
                        queryParameters = {};
                        if (requestParameters.owner !== undefined) {
                            queryParameters['owner'] = requestParameters.owner;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/collections/byOwner",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _c.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _c.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 500)) return [3 /*break*/, 5];
                        _b = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _c.sent(),
                            _b)];
                    case 5: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftCollectionControllerApi.prototype.searchNftCollectionsByOwner = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchNftCollectionsByOwnerRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    return FlowNftCollectionControllerApi;
}(runtime.BaseAPI));
export { FlowNftCollectionControllerApi };
