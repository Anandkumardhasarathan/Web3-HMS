/* tslint:disable */
/* eslint-disable */
/**
 * flow-protocol-model-common
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { __awaiter, __extends, __generator } from "tslib";
import * as runtime from '../runtime';
/**
 * no description
 */
var FlowNftItemControllerApi = /** @class */ (function (_super) {
    __extends(FlowNftItemControllerApi, _super);
    function FlowNftItemControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns Items by Ids
     */
    FlowNftItemControllerApi.prototype.getItemByIdsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (requestParameters.flowItemIds === null || requestParameters.flowItemIds === undefined) {
                            throw new runtime.RequiredError('flowItemIds', 'Required parameter requestParameters.flowItemIds was null or undefined when calling getItemByIds.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/items/byIds",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.flowItemIds,
                            })];
                    case 1:
                        response = _e.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _e.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 404)) return [3 /*break*/, 5];
                        _b = {
                            status: 404
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _e.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 400)) return [3 /*break*/, 7];
                        _c = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _e.sent(),
                            _c)];
                    case 7:
                        if (!(response.status === 500)) return [3 /*break*/, 9];
                        _d = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 8: return [2 /*return*/, (_d.value = _e.sent(),
                            _d)];
                    case 9: throw response;
                }
            });
        });
    };
    /**
     * Returns Items by Ids
     */
    FlowNftItemControllerApi.prototype.getItemByIds = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getItemByIdsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftAllItemsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.showDeleted !== undefined) {
                            queryParameters['showDeleted'] = requestParameters.showDeleted;
                        }
                        if (requestParameters.lastUpdatedFrom !== undefined) {
                            queryParameters['lastUpdatedFrom'] = requestParameters.lastUpdatedFrom;
                        }
                        if (requestParameters.lastUpdatedTo !== undefined) {
                            queryParameters['lastUpdatedTo'] = requestParameters.lastUpdatedTo;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/items/all",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _b.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _b.sent(),
                            _a)];
                    case 3: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftAllItems = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftAllItemsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
                            throw new runtime.RequiredError('itemId', 'Required parameter requestParameters.itemId was null or undefined when calling getNftItemById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/items/{itemId}".replace("{" + "itemId" + "}", encodeURIComponent(String(requestParameters.itemId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _b.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _b.sent(),
                            _a)];
                    case 3: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftItemByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemMetaByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
                            throw new runtime.RequiredError('itemId', 'Required parameter requestParameters.itemId was null or undefined when calling getNftItemMetaById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/items/meta/{itemId}".replace("{" + "itemId" + "}", encodeURIComponent(String(requestParameters.itemId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _b.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _b.sent(),
                            _a)];
                    case 3: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemMetaById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftItemMetaByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemRoyaltyByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
                            throw new runtime.RequiredError('itemId', 'Required parameter requestParameters.itemId was null or undefined when calling getNftItemRoyaltyById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/items/{itemId}/royalty".replace("{" + "itemId" + "}", encodeURIComponent(String(requestParameters.itemId))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemRoyaltyById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftItemRoyaltyByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemsByCollectionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters.collection === null || requestParameters.collection === undefined) {
                            throw new runtime.RequiredError('collection', 'Required parameter requestParameters.collection was null or undefined when calling getNftItemsByCollection.');
                        }
                        queryParameters = {};
                        if (requestParameters.collection !== undefined) {
                            queryParameters['collection'] = requestParameters.collection;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/items/byCollection",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _c.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _c.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 500)) return [3 /*break*/, 5];
                        _b = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _c.sent(),
                            _b)];
                    case 5: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemsByCollection = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftItemsByCollectionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemsByCreatorRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (requestParameters.address === null || requestParameters.address === undefined) {
                            throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getNftItemsByCreator.');
                        }
                        queryParameters = {};
                        if (requestParameters.address !== undefined) {
                            queryParameters['address'] = requestParameters.address;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/items/byCreator",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _b.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _b.sent(),
                            _a)];
                    case 3: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemsByCreator = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftItemsByCreatorRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemsByOwnerRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (requestParameters.address === null || requestParameters.address === undefined) {
                            throw new runtime.RequiredError('address', 'Required parameter requestParameters.address was null or undefined when calling getNftItemsByOwner.');
                        }
                        queryParameters = {};
                        if (requestParameters.address !== undefined) {
                            queryParameters['address'] = requestParameters.address;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/items/byAccount",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _b.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _b.sent(),
                            _a)];
                    case 3: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.getNftItemsByOwner = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftItemsByOwnerRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.resetItemMetaRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
                            throw new runtime.RequiredError('itemId', 'Required parameter requestParameters.itemId was null or undefined when calling resetItemMeta.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/items/meta/{itemId}".replace("{" + "itemId" + "}", encodeURIComponent(String(requestParameters.itemId))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _b.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _b.sent(),
                            _a)];
                    case 3: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftItemControllerApi.prototype.resetItemMeta = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resetItemMetaRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    return FlowNftItemControllerApi;
}(runtime.BaseAPI));
export { FlowNftItemControllerApi };
