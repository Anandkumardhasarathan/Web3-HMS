/* tslint:disable */
/* eslint-disable */
/**
 * flow-protocol-model-common
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { __awaiter, __extends, __generator } from "tslib";
import * as runtime from '../runtime';
/**
 * no description
 */
var FlowNftOrderActivityControllerApi = /** @class */ (function (_super) {
    __extends(FlowNftOrderActivityControllerApi, _super);
    function FlowNftOrderActivityControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByCollectionRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getNftOrderActivitiesByCollection.');
                        }
                        if (requestParameters.collection === null || requestParameters.collection === undefined) {
                            throw new runtime.RequiredError('collection', 'Required parameter requestParameters.collection was null or undefined when calling getNftOrderActivitiesByCollection.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.collection !== undefined) {
                            queryParameters['collection'] = requestParameters.collection;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/order/activities/byCollection",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByCollection = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOrderActivitiesByCollectionRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByCollectionsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getNftOrderActivitiesByCollections.');
                        }
                        if (requestParameters.collection === null || requestParameters.collection === undefined) {
                            throw new runtime.RequiredError('collection', 'Required parameter requestParameters.collection was null or undefined when calling getNftOrderActivitiesByCollections.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.collection) {
                            queryParameters['collection'] = requestParameters.collection;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/order/activities/byCollections",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByCollections = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOrderActivitiesByCollectionsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.nftActivitiesByIdRequest === null || requestParameters.nftActivitiesByIdRequest === undefined) {
                            throw new runtime.RequiredError('nftActivitiesByIdRequest', 'Required parameter requestParameters.nftActivitiesByIdRequest was null or undefined when calling getNftOrderActivitiesById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/order/activities/byId",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: requestParameters.nftActivitiesByIdRequest,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOrderActivitiesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByItemRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getNftOrderActivitiesByItem.');
                        }
                        if (requestParameters.contract === null || requestParameters.contract === undefined) {
                            throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getNftOrderActivitiesByItem.');
                        }
                        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                            throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getNftOrderActivitiesByItem.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.contract !== undefined) {
                            queryParameters['contract'] = requestParameters.contract;
                        }
                        if (requestParameters.tokenId !== undefined) {
                            queryParameters['tokenId'] = requestParameters.tokenId;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/order/activities/byItem",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByItem = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOrderActivitiesByItemRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByItemAndOwnerRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getNftOrderActivitiesByItemAndOwner.');
                        }
                        if (requestParameters.contract === null || requestParameters.contract === undefined) {
                            throw new runtime.RequiredError('contract', 'Required parameter requestParameters.contract was null or undefined when calling getNftOrderActivitiesByItemAndOwner.');
                        }
                        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                            throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getNftOrderActivitiesByItemAndOwner.');
                        }
                        if (requestParameters.owner === null || requestParameters.owner === undefined) {
                            throw new runtime.RequiredError('owner', 'Required parameter requestParameters.owner was null or undefined when calling getNftOrderActivitiesByItemAndOwner.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.contract !== undefined) {
                            queryParameters['contract'] = requestParameters.contract;
                        }
                        if (requestParameters.tokenId !== undefined) {
                            queryParameters['tokenId'] = requestParameters.tokenId;
                        }
                        if (requestParameters.owner !== undefined) {
                            queryParameters['owner'] = requestParameters.owner;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/order/activities/byItemAndOwner",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByItemAndOwner = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOrderActivitiesByItemAndOwnerRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByUserRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getNftOrderActivitiesByUser.');
                        }
                        if (requestParameters.user === null || requestParameters.user === undefined) {
                            throw new runtime.RequiredError('user', 'Required parameter requestParameters.user was null or undefined when calling getNftOrderActivitiesByUser.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.user) {
                            queryParameters['user'] = requestParameters.user;
                        }
                        if (requestParameters.from !== undefined) {
                            queryParameters['from'] = requestParameters.from;
                        }
                        if (requestParameters.to !== undefined) {
                            queryParameters['to'] = requestParameters.to;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/order/activities/byUser",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesByUser = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOrderActivitiesByUserRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesSyncRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getNftOrderActivitiesSync.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/order/activities/sync",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderActivitiesSync = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOrderActivitiesSyncRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderAllActivitiesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response, _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getNftOrderAllActivities.');
                        }
                        queryParameters = {};
                        if (requestParameters.type) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.continuation !== undefined) {
                            queryParameters['continuation'] = requestParameters.continuation;
                        }
                        if (requestParameters.size !== undefined) {
                            queryParameters['size'] = requestParameters.size;
                        }
                        if (requestParameters.sort !== undefined) {
                            queryParameters['sort'] = requestParameters.sort;
                        }
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/v0.1/order/activities/all",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _d.sent();
                        if (!(response.status === 200)) return [3 /*break*/, 3];
                        _a = {
                            status: 200
                        };
                        return [4 /*yield*/, response.json()];
                    case 2: return [2 /*return*/, (_a.value = _d.sent(),
                            _a)];
                    case 3:
                        if (!(response.status === 400)) return [3 /*break*/, 5];
                        _b = {
                            status: 400
                        };
                        return [4 /*yield*/, response.json()];
                    case 4: return [2 /*return*/, (_b.value = _d.sent(),
                            _b)];
                    case 5:
                        if (!(response.status === 500)) return [3 /*break*/, 7];
                        _c = {
                            status: 500
                        };
                        return [4 /*yield*/, response.json()];
                    case 6: return [2 /*return*/, (_c.value = _d.sent(),
                            _c)];
                    case 7: throw response;
                }
            });
        });
    };
    /**
     */
    FlowNftOrderActivityControllerApi.prototype.getNftOrderAllActivities = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNftOrderAllActivitiesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        if (response.status === 200) {
                            return [2 /*return*/, response.value];
                        }
                        throw response;
                }
            });
        });
    };
    return FlowNftOrderActivityControllerApi;
}(runtime.BaseAPI));
export { FlowNftOrderActivityControllerApi };
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByCollectionTypeEnum;
(function (GetNftOrderActivitiesByCollectionTypeEnum) {
    GetNftOrderActivitiesByCollectionTypeEnum["TRANSFER"] = "TRANSFER";
    GetNftOrderActivitiesByCollectionTypeEnum["MINT"] = "MINT";
    GetNftOrderActivitiesByCollectionTypeEnum["BURN"] = "BURN";
    GetNftOrderActivitiesByCollectionTypeEnum["SELL"] = "SELL";
    GetNftOrderActivitiesByCollectionTypeEnum["LIST"] = "LIST";
    GetNftOrderActivitiesByCollectionTypeEnum["CANCELLIST"] = "CANCEL_LIST";
    GetNftOrderActivitiesByCollectionTypeEnum["BID"] = "BID";
    GetNftOrderActivitiesByCollectionTypeEnum["CANCELBID"] = "CANCEL_BID";
})(GetNftOrderActivitiesByCollectionTypeEnum || (GetNftOrderActivitiesByCollectionTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByCollectionSortEnum;
(function (GetNftOrderActivitiesByCollectionSortEnum) {
    GetNftOrderActivitiesByCollectionSortEnum["LATESTFIRST"] = "LATEST_FIRST";
    GetNftOrderActivitiesByCollectionSortEnum["EARLIESTFIRST"] = "EARLIEST_FIRST";
})(GetNftOrderActivitiesByCollectionSortEnum || (GetNftOrderActivitiesByCollectionSortEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByCollectionsTypeEnum;
(function (GetNftOrderActivitiesByCollectionsTypeEnum) {
    GetNftOrderActivitiesByCollectionsTypeEnum["TRANSFER"] = "TRANSFER";
    GetNftOrderActivitiesByCollectionsTypeEnum["MINT"] = "MINT";
    GetNftOrderActivitiesByCollectionsTypeEnum["BURN"] = "BURN";
    GetNftOrderActivitiesByCollectionsTypeEnum["SELL"] = "SELL";
    GetNftOrderActivitiesByCollectionsTypeEnum["LIST"] = "LIST";
    GetNftOrderActivitiesByCollectionsTypeEnum["CANCELLIST"] = "CANCEL_LIST";
    GetNftOrderActivitiesByCollectionsTypeEnum["BID"] = "BID";
    GetNftOrderActivitiesByCollectionsTypeEnum["CANCELBID"] = "CANCEL_BID";
})(GetNftOrderActivitiesByCollectionsTypeEnum || (GetNftOrderActivitiesByCollectionsTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByCollectionsSortEnum;
(function (GetNftOrderActivitiesByCollectionsSortEnum) {
    GetNftOrderActivitiesByCollectionsSortEnum["LATESTFIRST"] = "LATEST_FIRST";
    GetNftOrderActivitiesByCollectionsSortEnum["EARLIESTFIRST"] = "EARLIEST_FIRST";
})(GetNftOrderActivitiesByCollectionsSortEnum || (GetNftOrderActivitiesByCollectionsSortEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByItemTypeEnum;
(function (GetNftOrderActivitiesByItemTypeEnum) {
    GetNftOrderActivitiesByItemTypeEnum["TRANSFER"] = "TRANSFER";
    GetNftOrderActivitiesByItemTypeEnum["MINT"] = "MINT";
    GetNftOrderActivitiesByItemTypeEnum["BURN"] = "BURN";
    GetNftOrderActivitiesByItemTypeEnum["SELL"] = "SELL";
    GetNftOrderActivitiesByItemTypeEnum["LIST"] = "LIST";
    GetNftOrderActivitiesByItemTypeEnum["CANCELLIST"] = "CANCEL_LIST";
    GetNftOrderActivitiesByItemTypeEnum["BID"] = "BID";
    GetNftOrderActivitiesByItemTypeEnum["CANCELBID"] = "CANCEL_BID";
})(GetNftOrderActivitiesByItemTypeEnum || (GetNftOrderActivitiesByItemTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByItemSortEnum;
(function (GetNftOrderActivitiesByItemSortEnum) {
    GetNftOrderActivitiesByItemSortEnum["LATESTFIRST"] = "LATEST_FIRST";
    GetNftOrderActivitiesByItemSortEnum["EARLIESTFIRST"] = "EARLIEST_FIRST";
})(GetNftOrderActivitiesByItemSortEnum || (GetNftOrderActivitiesByItemSortEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByItemAndOwnerTypeEnum;
(function (GetNftOrderActivitiesByItemAndOwnerTypeEnum) {
    GetNftOrderActivitiesByItemAndOwnerTypeEnum["TRANSFER"] = "TRANSFER";
    GetNftOrderActivitiesByItemAndOwnerTypeEnum["MINT"] = "MINT";
})(GetNftOrderActivitiesByItemAndOwnerTypeEnum || (GetNftOrderActivitiesByItemAndOwnerTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByItemAndOwnerSortEnum;
(function (GetNftOrderActivitiesByItemAndOwnerSortEnum) {
    GetNftOrderActivitiesByItemAndOwnerSortEnum["LATESTFIRST"] = "LATEST_FIRST";
    GetNftOrderActivitiesByItemAndOwnerSortEnum["EARLIESTFIRST"] = "EARLIEST_FIRST";
})(GetNftOrderActivitiesByItemAndOwnerSortEnum || (GetNftOrderActivitiesByItemAndOwnerSortEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByUserTypeEnum;
(function (GetNftOrderActivitiesByUserTypeEnum) {
    GetNftOrderActivitiesByUserTypeEnum["TRANSFERFROM"] = "TRANSFER_FROM";
    GetNftOrderActivitiesByUserTypeEnum["TRANSFERTO"] = "TRANSFER_TO";
    GetNftOrderActivitiesByUserTypeEnum["MINT"] = "MINT";
    GetNftOrderActivitiesByUserTypeEnum["BURN"] = "BURN";
    GetNftOrderActivitiesByUserTypeEnum["SELL"] = "SELL";
    GetNftOrderActivitiesByUserTypeEnum["BUY"] = "BUY";
    GetNftOrderActivitiesByUserTypeEnum["LIST"] = "LIST";
    GetNftOrderActivitiesByUserTypeEnum["CANCELLIST"] = "CANCEL_LIST";
    GetNftOrderActivitiesByUserTypeEnum["BID"] = "BID";
    GetNftOrderActivitiesByUserTypeEnum["CANCELBID"] = "CANCEL_BID";
    GetNftOrderActivitiesByUserTypeEnum["MAKEBID"] = "MAKE_BID";
    GetNftOrderActivitiesByUserTypeEnum["GETBID"] = "GET_BID";
})(GetNftOrderActivitiesByUserTypeEnum || (GetNftOrderActivitiesByUserTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesByUserSortEnum;
(function (GetNftOrderActivitiesByUserSortEnum) {
    GetNftOrderActivitiesByUserSortEnum["LATESTFIRST"] = "LATEST_FIRST";
    GetNftOrderActivitiesByUserSortEnum["EARLIESTFIRST"] = "EARLIEST_FIRST";
})(GetNftOrderActivitiesByUserSortEnum || (GetNftOrderActivitiesByUserSortEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesSyncTypeEnum;
(function (GetNftOrderActivitiesSyncTypeEnum) {
    GetNftOrderActivitiesSyncTypeEnum["TRANSFER"] = "TRANSFER";
    GetNftOrderActivitiesSyncTypeEnum["MINT"] = "MINT";
    GetNftOrderActivitiesSyncTypeEnum["BURN"] = "BURN";
    GetNftOrderActivitiesSyncTypeEnum["SELL"] = "SELL";
    GetNftOrderActivitiesSyncTypeEnum["LIST"] = "LIST";
    GetNftOrderActivitiesSyncTypeEnum["CANCELLIST"] = "CANCEL_LIST";
    GetNftOrderActivitiesSyncTypeEnum["BID"] = "BID";
    GetNftOrderActivitiesSyncTypeEnum["CANCELBID"] = "CANCEL_BID";
})(GetNftOrderActivitiesSyncTypeEnum || (GetNftOrderActivitiesSyncTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderActivitiesSyncSortEnum;
(function (GetNftOrderActivitiesSyncSortEnum) {
    GetNftOrderActivitiesSyncSortEnum["LATESTFIRST"] = "LATEST_FIRST";
    GetNftOrderActivitiesSyncSortEnum["EARLIESTFIRST"] = "EARLIEST_FIRST";
})(GetNftOrderActivitiesSyncSortEnum || (GetNftOrderActivitiesSyncSortEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderAllActivitiesTypeEnum;
(function (GetNftOrderAllActivitiesTypeEnum) {
    GetNftOrderAllActivitiesTypeEnum["TRANSFER"] = "TRANSFER";
    GetNftOrderAllActivitiesTypeEnum["MINT"] = "MINT";
    GetNftOrderAllActivitiesTypeEnum["BURN"] = "BURN";
    GetNftOrderAllActivitiesTypeEnum["SELL"] = "SELL";
    GetNftOrderAllActivitiesTypeEnum["LIST"] = "LIST";
    GetNftOrderAllActivitiesTypeEnum["CANCELLIST"] = "CANCEL_LIST";
    GetNftOrderAllActivitiesTypeEnum["BID"] = "BID";
    GetNftOrderAllActivitiesTypeEnum["CANCELBID"] = "CANCEL_BID";
})(GetNftOrderAllActivitiesTypeEnum || (GetNftOrderAllActivitiesTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetNftOrderAllActivitiesSortEnum;
(function (GetNftOrderAllActivitiesSortEnum) {
    GetNftOrderAllActivitiesSortEnum["LATESTFIRST"] = "LATEST_FIRST";
    GetNftOrderAllActivitiesSortEnum["EARLIESTFIRST"] = "EARLIEST_FIRST";
})(GetNftOrderAllActivitiesSortEnum || (GetNftOrderAllActivitiesSortEnum = {}));
