"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkInitGamisodesCollections = exports.checkInitCollections = void 0;
var tslib_1 = require("tslib");
var t = tslib_1.__importStar(require("@onflow/types"));
var types_1 = require("@rarible/types");
var transaction_1 = require("../common/transaction");
var config_1 = require("../config/config");
var check_init_1 = require("../scripts/nft/mattel/check-init");
var check_init_2 = require("../scripts/nft/gamisodes/check-init");
function checkInitCollections(fcl, auth, network, from) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, _b, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    if (!!from) return [3 /*break*/, 5];
                    if (!auth) return [3 /*break*/, 2];
                    _b = types_1.toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_d.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = types_1.toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_d.sent()).addr]);
                    _d.label = 4;
                case 4:
                    from = _a;
                    _d.label = 5;
                case 5:
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    return [2 /*return*/, (0, transaction_1.runScript)(fcl, {
                            cadence: check_init_1.checkInitMattelContracts,
                            args: fcl.args([fcl.arg(from, t.Address)]),
                        }, config_1.CONFIGS[network].mainAddressMap)];
            }
        });
    });
}
exports.checkInitCollections = checkInitCollections;
function checkInitGamisodesCollections(fcl, auth, network, from) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, _b, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    if (!!from) return [3 /*break*/, 5];
                    if (!auth) return [3 /*break*/, 2];
                    _b = types_1.toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_d.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = types_1.toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_d.sent()).addr]);
                    _d.label = 4;
                case 4:
                    from = _a;
                    _d.label = 5;
                case 5:
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    return [2 /*return*/, (0, transaction_1.runScript)(fcl, {
                            cadence: check_init_2.checkInitGamisodesContracts,
                            args: fcl.args([fcl.arg(from, t.Address)]),
                        }, config_1.CONFIGS[network].mainAddressMap)];
            }
        });
    });
}
exports.checkInitGamisodesCollections = checkInitGamisodesCollections;
