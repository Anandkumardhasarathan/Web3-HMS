"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupVault = exports.setupAccount = void 0;
var tslib_1 = require("tslib");
var transaction_1 = require("../common/transaction");
var nft_1 = require("../tx-code-store/nft");
var get_config_1 = require("../common/collection/get-config");
var whitelabel_storefront_1 = require("../tx-code-store/order/whitelabel-storefront");
var config_1 = require("../config/config");
var nft_2 = require("../scripts/nft");
var template_replacer_1 = require("../common/template-replacer");
var cadence_code_config_1 = require("../config/cadence-code-config");
function setupAccount(fcl, auth, network, collection) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, map, name, txId_1, txId;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    _a = (0, get_config_1.getCollectionConfig)(network, collection), map = _a.map, name = _a.name;
                    if (!(0, whitelabel_storefront_1.isWhitelabelCollection)(name)) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, {
                            cadence: (0, template_replacer_1.fillCodeTemplate)((0, whitelabel_storefront_1.isGamisodesCollection)(name)
                                ? nft_2.txInitGamisodesContractsAndStorefrontV2
                                : nft_2.txInitMattelContractsAndStorefrontV2, (0, cadence_code_config_1.getNftCodeConfig)(name)),
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId_1 = _b.sent();
                    return [2 /*return*/, (0, transaction_1.waitForSeal)(fcl, txId_1)];
                case 2: return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, nft_1.getNftCode)(name).setupAccount(), auth)];
                case 3:
                    txId = _b.sent();
                    return [2 /*return*/, (0, transaction_1.waitForSeal)(fcl, txId)];
            }
        });
    });
}
exports.setupAccount = setupAccount;
function setupVault(fcl, auth, network) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var map, txId;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    map = config_1.CONFIGS[network].mainAddressMap;
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, {
                            cadence: nft_2.txInitVault,
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId = _a.sent();
                    return [2 /*return*/, (0, transaction_1.waitForSeal)(fcl, txId)];
            }
        });
    });
}
exports.setupVault = setupVault;
