"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupCollections = exports.setupGamisodesCollections = exports.setupMattelCollections = void 0;
var tslib_1 = require("tslib");
var transaction_1 = require("../common/transaction");
var config_1 = require("../config/config");
var nft_1 = require("../scripts/nft");
function setupMattelCollections(fcl, auth, network) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var txId;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, config_1.CONFIGS[network].mainAddressMap, {
                            cadence: nft_1.txInitMattelContractsAndStorefrontV2,
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId = _a.sent();
                    return [2 /*return*/, (0, transaction_1.waitForSeal)(fcl, txId)];
            }
        });
    });
}
exports.setupMattelCollections = setupMattelCollections;
function setupGamisodesCollections(fcl, auth, network) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var txId;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, config_1.CONFIGS[network].mainAddressMap, {
                            cadence: nft_1.txInitGamisodesContractsAndStorefrontV2,
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId = _a.sent();
                    return [2 /*return*/, (0, transaction_1.waitForSeal)(fcl, txId)];
            }
        });
    });
}
exports.setupGamisodesCollections = setupGamisodesCollections;
function setupCollections(fcl, auth, network) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var txId;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, config_1.CONFIGS[network].mainAddressMap, {
                            cadence: nft_1.txInitNFTContractsAndStorefrontV2,
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId = _a.sent();
                    return [2 /*return*/, (0, transaction_1.waitForSeal)(fcl, txId)];
            }
        });
    });
}
exports.setupCollections = setupCollections;
