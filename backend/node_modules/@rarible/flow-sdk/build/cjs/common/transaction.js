"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contractAddressHex = exports.subscribeForTxResult = exports.waitForSeal = exports.runTransaction = exports.runScript = void 0;
var tslib_1 = require("tslib");
var template_replacer_1 = require("./template-replacer");
var errors_1 = require("./errors");
var runScript = function (fcl, params, addressMap) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var cadence, result, error_1;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                cadence = (0, template_replacer_1.replaceImportAddresses)(params.cadence, addressMap);
                return [4 /*yield*/, fcl.send([fcl.script(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["", ""], ["", ""])), cadence), params.args])];
            case 1:
                result = _a.sent();
                return [4 /*yield*/, fcl.decode(result)];
            case 2: return [2 /*return*/, _a.sent()];
            case 3:
                error_1 = _a.sent();
                throw new errors_1.FlowRunScriptError({ error: error_1, params: params });
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.runScript = runScript;
var runTransaction = function (fcl_1, addressMap_1, params_1, signature_1) {
    var args_1 = [];
    for (var _i = 4; _i < arguments.length; _i++) {
        args_1[_i - 4] = arguments[_i];
    }
    return tslib_1.__awaiter(void 0, tslib_1.__spreadArray([fcl_1, addressMap_1, params_1, signature_1], args_1, true), void 0, function (fcl, addressMap, params, signature, gasLimit) {
        var code, ix, tx, error_2;
        if (gasLimit === void 0) { gasLimit = 999; }
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    code = (0, template_replacer_1.replaceImportAddresses)(params.cadence, addressMap);
                    ix = [fcl.limit(gasLimit)];
                    ix.push(fcl.payer(signature || fcl.authz), fcl.proposer(signature || fcl.authz), fcl.authorizations([signature || fcl.authz]));
                    if (params.args) {
                        ix.push(params.args);
                    }
                    ix.push(fcl.transaction(code));
                    return [4 /*yield*/, fcl.send(ix)];
                case 1:
                    tx = _a.sent();
                    return [2 /*return*/, tx.transactionId];
                case 2:
                    error_2 = _a.sent();
                    throw new errors_1.FlowRunTransactionError({ error: error_2, params: params });
                case 3: return [2 /*return*/];
            }
        });
    });
};
exports.runTransaction = runTransaction;
var waitForSeal = function (fcl, txId) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var sealed, error_3;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, fcl.tx(txId).onceSealed()];
            case 1:
                sealed = _a.sent();
                return [2 /*return*/, tslib_1.__assign(tslib_1.__assign({}, sealed), { txId: txId })];
            case 2:
                error_3 = _a.sent();
                throw new errors_1.FlowSealError({ error: error_3, txId: txId });
            case 3: return [2 /*return*/];
        }
    });
}); };
exports.waitForSeal = waitForSeal;
function subscribeForTxResult(fcl, txId, cb) {
    var unsub = fcl
        .tx(txId)
        .subscribe(function (transaction) {
        cb(tslib_1.__assign({ txId: txId }, transaction));
        if (fcl.tx.isSealed(transaction)) {
            unsub();
        }
    });
}
exports.subscribeForTxResult = subscribeForTxResult;
var contractAddressHex = function (fcl, label) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var contract;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fcl.config().get(label)];
            case 1:
                contract = _a.sent();
                return [2 /*return*/, fcl.sansPrefix(contract)];
        }
    });
}); };
exports.contractAddressHex = contractAddressHex;
var templateObject_1;
