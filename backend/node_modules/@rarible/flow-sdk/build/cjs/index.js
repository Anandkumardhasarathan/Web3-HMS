"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFlowFungibleBalance = exports.CONFIGS = exports.getFungibleBalanceSimple = exports.FLOW_ENV_CONFIG = exports.isFlowContractAddress = exports.toFlowContractAddress = exports.waitForSeal = exports.replaceImportAddresses = exports.isFlowItemId = exports.toFlowItemId = exports.createFlowSdk = exports.createFlowApisSdk = void 0;
var tslib_1 = require("tslib");
var ApiClient = tslib_1.__importStar(require("@rarible/flow-api-client"));
var types_1 = require("@rarible/types");
Object.defineProperty(exports, "toFlowContractAddress", { enumerable: true, get: function () { return types_1.toFlowContractAddress; } });
Object.defineProperty(exports, "isFlowContractAddress", { enumerable: true, get: function () { return types_1.isFlowContractAddress; } });
var mint_1 = require("./nft/mint");
var burn_1 = require("./nft/burn");
var transfer_1 = require("./nft/transfer");
var sell_1 = require("./order/sell");
var fill_1 = require("./order/fill/fill");
var cancel_order_1 = require("./order/cancel-order");
var sign_user_message_1 = require("./signature/sign-user-message");
var get_fungible_balance_1 = require("./wallet/get-fungible-balance");
var bid_1 = require("./order/bid");
var bid_update_1 = require("./order/bid-update");
var cancel_bid_1 = require("./order/cancel-bid");
var setup_account_1 = require("./collection/setup-account");
var get_protocol_fee_1 = require("./order/get-protocol-fee");
var update_order_1 = require("./order/update-order");
var env_1 = require("./config/env");
var transfer_funds_1 = require("./wallet/transfer-funds");
var setup_collections_1 = require("./collection/setup-collections");
var check_init_collections_1 = require("./collection/check-init-collections");
function createFlowApisSdk(env, params) {
    if (params === void 0) { params = {}; }
    var configuration = new ApiClient.Configuration(tslib_1.__assign({ basePath: env_1.ENV_CONFIG[env].basePath, headers: typeof params.apiKey === "string" ? { "X-API-KEY": params.apiKey } : {} }, params));
    return {
        collection: new ApiClient.FlowNftCollectionControllerApi(configuration),
        item: new ApiClient.FlowNftItemControllerApi(configuration),
        ownership: new ApiClient.FlowNftOwnershipControllerApi(configuration),
        order: new ApiClient.FlowOrderControllerApi(configuration),
    };
}
exports.createFlowApisSdk = createFlowApisSdk;
/**
 * Creates new instance of FlowSdk
 * @param fcl
 * @param network
 * @param params - api configuration
 * @param auth - optional, only for testing purposes
 */
function createFlowSdk(fcl, network, params, auth) {
    var blockchainNetwork = env_1.ENV_CONFIG[network].network;
    var apis = createFlowApisSdk(network, params);
    return {
        apis: apis,
        nft: {
            mint: mint_1.mint.bind(null, fcl, auth, blockchainNetwork),
            burn: burn_1.burn.bind(null, fcl, auth, blockchainNetwork),
            transfer: transfer_1.transfer.bind(null, fcl, auth, blockchainNetwork),
        },
        order: {
            sell: sell_1.sell.bind(null, fcl, apis.item, auth, blockchainNetwork),
            fill: fill_1.fill.bind(null, fcl, auth, blockchainNetwork, apis.order).bind(null, apis.item),
            cancelOrder: cancel_order_1.cancelOrder.bind(null, fcl, auth, blockchainNetwork),
            updateOrder: update_order_1.updateOrder.bind(null, fcl, apis.order, auth).bind(null, blockchainNetwork),
            bid: bid_1.bid.bind(null, fcl, auth, blockchainNetwork),
            bidUpdate: bid_update_1.bidUpdate.bind(null, fcl, auth, blockchainNetwork, apis.order),
            cancelBid: cancel_bid_1.cancelBid.bind(null, fcl, auth, blockchainNetwork),
            getProtocolFee: get_protocol_fee_1.getProtocolFee.bind(null, blockchainNetwork),
        },
        wallet: {
            getFungibleBalance: get_fungible_balance_1.getFungibleBalance.bind(null, fcl, blockchainNetwork),
            transferFunds: transfer_funds_1.transferFunds.bind(null, fcl, blockchainNetwork, auth),
            setupVault: setup_account_1.setupVault.bind(null, fcl, auth, blockchainNetwork),
        },
        collection: {
            setupAccount: setup_account_1.setupAccount.bind(null, fcl, auth, blockchainNetwork),
            setupCollections: setup_collections_1.setupCollections.bind(null, fcl, auth, blockchainNetwork),
            setupMattelCollections: setup_collections_1.setupMattelCollections.bind(null, fcl, auth, blockchainNetwork),
            setupGamisodesCollections: setup_collections_1.setupGamisodesCollections.bind(null, fcl, auth, blockchainNetwork),
            checkInitCollections: check_init_collections_1.checkInitCollections.bind(null, fcl, auth, blockchainNetwork),
            checkInitGamisodesCollections: check_init_collections_1.checkInitGamisodesCollections.bind(null, fcl, auth, blockchainNetwork),
        },
        signUserMessage: sign_user_message_1.signUserMessage.bind(null, fcl),
    };
}
exports.createFlowSdk = createFlowSdk;
var index_1 = require("./common/item/index");
Object.defineProperty(exports, "toFlowItemId", { enumerable: true, get: function () { return index_1.toFlowItemId; } });
Object.defineProperty(exports, "isFlowItemId", { enumerable: true, get: function () { return index_1.isFlowItemId; } });
var template_replacer_1 = require("./common/template-replacer");
Object.defineProperty(exports, "replaceImportAddresses", { enumerable: true, get: function () { return template_replacer_1.replaceImportAddresses; } });
var transaction_1 = require("./common/transaction");
Object.defineProperty(exports, "waitForSeal", { enumerable: true, get: function () { return transaction_1.waitForSeal; } });
exports.FLOW_ENV_CONFIG = env_1.ENV_CONFIG;
var get_ft_balance_simple_1 = require("./wallet/get-ft-balance-simple");
Object.defineProperty(exports, "getFungibleBalanceSimple", { enumerable: true, get: function () { return get_ft_balance_simple_1.getFungibleBalanceSimple; } });
var config_1 = require("./config/config");
Object.defineProperty(exports, "CONFIGS", { enumerable: true, get: function () { return config_1.CONFIGS; } });
exports.getFlowFungibleBalance = get_fungible_balance_1.getFungibleBalance;
