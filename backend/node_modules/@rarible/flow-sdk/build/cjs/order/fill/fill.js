"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fill = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var get_config_1 = require("../../common/collection/get-config");
var get_protocol_fee_1 = require("../get-protocol-fee");
var get_prepared_order_1 = require("../common/get-prepared-order");
var calculate_fees_1 = require("../../common/calculate-fees");
var transaction_1 = require("../../common/transaction");
var storefront_1 = require("../../tx-code-store/order/storefront");
var get_order_details_from_blockchain_1 = require("../common/get-order-details-from-blockchain");
var fetch_item_royalties_1 = require("../common/fetch-item-royalties");
var whitelabel_storefront_1 = require("../../tx-code-store/order/whitelabel-storefront");
var get_order_id_1 = require("../common/get-order-id");
var fill_bid_order_1 = require("./fill-bid-order");
function fill(fcl, auth, network, orderApi, itemApi, collection, currency, order, owner, originFee) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var from_1, _a, _b, _c, orderId, preparedOrder, _d, name_1, map, _e, fee, txId_1, blockChainOrder, fees, txId, protocolFee, orderPayouts, payouts, filteredPayouts, royalties, _f, includedFees;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    if (!fcl) return [3 /*break*/, 16];
                    if (!auth) return [3 /*break*/, 2];
                    _b = types_1.toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_g.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = types_1.toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_g.sent()).addr]);
                    _g.label = 4;
                case 4:
                    from_1 = _a;
                    if (!from_1) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    orderId = (0, get_order_id_1.getOrderId)(order);
                    return [4 /*yield*/, (0, get_prepared_order_1.getPreparedOrder)(orderApi, order)];
                case 5:
                    preparedOrder = _g.sent();
                    console.log("prepared order", JSON.stringify(preparedOrder, null, " "));
                    _d = (0, get_config_1.getCollectionConfig)(network, collection), name_1 = _d.name, map = _d.map;
                    _e = preparedOrder.type;
                    switch (_e) {
                        case "LIST": return [3 /*break*/, 6];
                        case "BID": return [3 /*break*/, 11];
                    }
                    return [3 /*break*/, 15];
                case 6:
                    if (!(0, whitelabel_storefront_1.isWhitelabelCollection)(name_1)) return [3 /*break*/, 8];
                    fee = preparedOrder.data.originalFees[0];
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, whitelabel_storefront_1.getWhitelabelOrderCode)(fcl, name_1).buy({
                            orderId: orderId,
                            address: owner,
                            comissionRecipient: fee ? (0, types_1.toFlowAddress)(fee.account) : undefined,
                            currency: currency,
                        }), auth)];
                case 7:
                    txId_1 = _g.sent();
                    return [2 /*return*/, (0, transaction_1.waitForSeal)(fcl, txId_1)];
                case 8: return [4 /*yield*/, (0, get_order_details_from_blockchain_1.getOrderDetailsFromBlockchain)(fcl, network, "sell", owner, orderId)];
                case 9:
                    blockChainOrder = _g.sent();
                    fees = [];
                    if (!blockChainOrder.isLegacy) {
                        fees = (0, calculate_fees_1.calculateFees)(preparedOrder.take.value, tslib_1.__spreadArray(tslib_1.__spreadArray([], (originFee || []), true), [
                            get_protocol_fee_1.getProtocolFee.percents(network).buyerFee,
                        ], false));
                    }
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, storefront_1.getOrderCode)(fcl, name_1).buy(currency, orderId, owner, fees), auth)];
                case 10:
                    txId = _g.sent();
                    return [2 /*return*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 11:
                    protocolFee = [get_protocol_fee_1.getProtocolFee.percents(network).sellerFee];
                    orderPayouts = preparedOrder.data.payouts;
                    payouts = !!orderPayouts.length ? orderPayouts : [];
                    filteredPayouts = payouts.filter(function (p) { return p.account !== from_1; });
                    if (!(network === "emulator")) return [3 /*break*/, 12];
                    _f = [];
                    return [3 /*break*/, 14];
                case 12: return [4 /*yield*/, (0, fetch_item_royalties_1.fetchItemRoyalties)(itemApi, preparedOrder.itemId)
                    /**
                     * fees included in price, royalties, originFees, protocolFees
                     */
                ];
                case 13:
                    _f = _g.sent();
                    _g.label = 14;
                case 14:
                    royalties = _f;
                    includedFees = tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], filteredPayouts, true), (originFee || []), true), royalties, true), protocolFee, true);
                    return [2 /*return*/, (0, fill_bid_order_1.fillBidOrder)(fcl, auth, currency, name_1, map, orderId, owner, (0, calculate_fees_1.calculateFees)(preparedOrder.make.value, includedFees))];
                case 15: throw new Error("Unsupported order type: ".concat(preparedOrder.type));
                case 16: throw new Error("Fcl is required for purchasing");
            }
        });
    });
}
exports.fill = fill;
