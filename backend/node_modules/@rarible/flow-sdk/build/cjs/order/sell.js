"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sell = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var utils_1 = require("@rarible/utils");
var transaction_1 = require("../common/transaction");
var get_config_1 = require("../common/collection/get-config");
var check_price_1 = require("../common/check-price");
var parse_tx_events_1 = require("../common/parse-tx-events");
var item_1 = require("../common/item");
var storefront_1 = require("../tx-code-store/order/storefront");
var fix_amount_1 = require("../common/fix-amount");
var whitelabel_storefront_1 = require("../tx-code-store/order/whitelabel-storefront");
var get_protocol_fee_1 = require("./get-protocol-fee");
var calculate_sale_cuts_1 = require("./common/calculate-sale-cuts");
var fetch_item_royalties_1 = require("./common/fetch-item-royalties");
function sell(fcl, itemApi, auth, network, request) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var collection, currency, itemId, sellItemPrice, payouts, originFees, from, _a, _b, _c, royalties, _d, _e, name_1, map, fee, comissionAmount, txId_1, tx_1, simpleOrderId_1, txId, tx, simpleOrderId;
        return tslib_1.__generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    collection = request.collection, currency = request.currency, itemId = request.itemId, sellItemPrice = request.sellItemPrice, payouts = request.payouts, originFees = request.originFees;
                    (0, check_price_1.checkPrice)(sellItemPrice);
                    if (!fcl) return [3 /*break*/, 13];
                    if (!auth) return [3 /*break*/, 2];
                    _b = types_1.toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_f.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = types_1.toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_f.sent()).addr]);
                    _f.label = 4;
                case 4:
                    from = _a;
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    if (!(network === "emulator")) return [3 /*break*/, 5];
                    _d = [];
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, (0, fetch_item_royalties_1.fetchItemRoyalties)(itemApi, itemId)];
                case 6:
                    _d = _f.sent();
                    _f.label = 7;
                case 7:
                    royalties = _d;
                    _e = (0, get_config_1.getCollectionConfig)(network, collection), name_1 = _e.name, map = _e.map;
                    if (!(0, whitelabel_storefront_1.isWhitelabelCollection)(name_1)) return [3 /*break*/, 10];
                    fee = (originFees || [])[0];
                    comissionAmount = (0, utils_1.toBn)((fee === null || fee === void 0 ? void 0 : fee.value) || 0)
                        .div(10000)
                        .multipliedBy(request.sellItemPrice)
                        .decimalPlaces(8);
                    if (comissionAmount.gte(request.sellItemPrice)) {
                        comissionAmount = (0, utils_1.toBn)(0);
                    }
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, whitelabel_storefront_1.getWhitelabelOrderCode)(fcl, name_1).create({
                            collectionName: name_1,
                            itemId: (0, item_1.extractTokenId)(itemId),
                            saleItemPrice: (0, fix_amount_1.fixAmount)(sellItemPrice),
                            customID: "RARIBLE",
                            commissionAmount: (0, fix_amount_1.fixAmount)(comissionAmount.toString()),
                            expiry: request.end instanceof Date
                                ? Math.floor(request.end.getTime() / 1000)
                                : Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 60,
                            marketplacesAddress: fee ? [(0, types_1.toFlowAddress)(fee.account)] : [],
                            currency: request.currency,
                        }), auth)];
                case 8:
                    txId_1 = _f.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId_1)];
                case 9:
                    tx_1 = _f.sent();
                    simpleOrderId_1 = (0, parse_tx_events_1.parseEvents)(tx_1.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, tslib_1.__assign(tslib_1.__assign({}, tx_1), { orderId: simpleOrderId_1 })];
                case 10: return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, storefront_1.getOrderCode)(fcl, name_1).create(currency, (0, item_1.extractTokenId)(itemId), (0, calculate_sale_cuts_1.calculateSaleCuts)(from, (0, fix_amount_1.fixAmount)(sellItemPrice), tslib_1.__spreadArray(tslib_1.__spreadArray([
                        get_protocol_fee_1.getProtocolFee.percents(network).sellerFee
                    ], (originFees || []), true), (royalties || []), true), tslib_1.__spreadArray([], (payouts || []), true))), auth)];
                case 11:
                    txId = _f.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 12:
                    tx = _f.sent();
                    simpleOrderId = (0, parse_tx_events_1.parseEvents)(tx.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, tslib_1.__assign(tslib_1.__assign({}, tx), { orderId: simpleOrderId })];
                case 13: throw new Error("Fcl is required for creating order");
            }
        });
    });
}
exports.sell = sell;
