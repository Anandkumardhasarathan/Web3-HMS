"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gamisodesBuyTxCode = void 0;
var contracts_1 = require("../contracts");
var init_1 = require("./init");
exports.gamisodesBuyTxCode = "\nimport %ftContract% from 0x%ftContract%\nimport ".concat(contracts_1.FungibleToken.name, " from 0xFungibleToken\nimport ").concat(contracts_1.MetadataViews.name, " from 0xMetadataViews\nimport ").concat(contracts_1.NonFungibleToken.name, " from 0xNonFungibleToken\nimport ").concat(contracts_1.NFTStorefrontV2.name, " from 0xNFTStorefrontV2\nimport TokenForwarding from 0xTokenForwarding\nimport Gamisodes from 0xGamisodes\nimport NiftoryNFTRegistry from 0xNiftoryNFTRegistry\nimport NiftoryNonFungibleToken from 0xNiftoryNonFungibleToken\n\ntransaction(listingResourceID: UInt64, storefrontAddress: Address, commissionRecipient: Address?) {\n    let paymentVault: @").concat(contracts_1.FungibleToken.name, ".Vault\n    let %nftContract%Collection: &%nftContract%.Collection{").concat(contracts_1.NonFungibleToken.name, ".Receiver}\n    let storefront: &").concat(contracts_1.NFTStorefrontV2.name, ".Storefront{").concat(contracts_1.NFTStorefrontV2.name, ".StorefrontPublic}\n    let listing: &").concat(contracts_1.NFTStorefrontV2.name, ".Listing{").concat(contracts_1.NFTStorefrontV2.name, ".ListingPublic}\n    var commissionRecipientCap: Capability<&{").concat(contracts_1.FungibleToken.name, ".Receiver}>?\n\n    prepare(acct: AuthAccount) {\n").concat(init_1.gamisodesRawInitPart, "\n        self.commissionRecipientCap = nil\n        // Access the storefront public resource of the seller to purchase the listing.\n        self.storefront = getAccount(storefrontAddress)\n            .getCapability<&").concat(contracts_1.NFTStorefrontV2.name, ".Storefront{").concat(contracts_1.NFTStorefrontV2.name, ".StorefrontPublic}>(\n                ").concat(contracts_1.NFTStorefrontV2.name, ".StorefrontPublicPath\n            )\n            .borrow()\n            ?? panic(\"Could not borrow Storefront from provided address\")\n\n        // Borrow the listing\n        self.listing = self.storefront.borrowListing(listingResourceID: listingResourceID)\n                    ?? panic(\"No Offer with that ID in Storefront\")\n        let price = self.listing.getDetails().salePrice\n\n        // Access the vault of the buyer to pay the sale price of the listing.\n        let mainFlowVault = acct.borrow<&%ftContract%.Vault>(from: %ftStoragePath%)\n            ?? panic(\"Cannot borrow FlowToken vault from acct storage\")\n        self.paymentVault <- mainFlowVault.withdraw(amount: price)\n\n        // Access the buyer's NFT collection to store the purchased NFT.\n        self.%nftContract%Collection = acct.borrow<&%nftContract%.Collection{").concat(contracts_1.NonFungibleToken.name, ".Receiver}>(\n            from: %nftStoragePath%\n        ) ?? panic(\"Cannot borrow buyers Pack collection receiver\")\n\n        // Fetch the commission amt.\n        let commissionAmount = self.listing.getDetails().commissionAmount\n\n        if commissionRecipient != nil && commissionAmount != 0.0 {\n            // Access the capability to receive the commission.\n            let _commissionRecipientCap = getAccount(commissionRecipient!).getCapability<&{").concat(contracts_1.FungibleToken.name, ".Receiver}>(%ftPublicPath%)\n            assert(_commissionRecipientCap.check(), message: \"Commission Recipient doesn't have FT receiving capability\")\n            self.commissionRecipientCap = _commissionRecipientCap\n        } else if commissionAmount == 0.0 {\n            self.commissionRecipientCap = nil\n        } else {\n            panic(\"Commission recipient can not be empty when commission amount is non zero\")\n        }\n    }\n\n    execute {\n        // Purchase the NFT\n        let item <- self.listing.purchase(\n            payment: <-self.paymentVault,\n            commissionRecipient: self.commissionRecipientCap\n        )\n        // Deposit the NFT in the buyer's collection.\n        self.%nftContract%Collection.deposit(token: <-item)\n    }\n}\n");
