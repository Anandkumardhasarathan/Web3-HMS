"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hwV2PackTransfer = void 0;
exports.hwV2PackTransfer = "\nimport NonFungibleToken from 0xNonFungibleToken\nimport MetadataViews from 0xMetadataViews\nimport HWGaragePackV2 from 0xHWGaragePackV2\n\ntransaction(\n    cardEditionID: UInt64\n    , to: Address\n    ) {\n\n    prepare(acct: auth(BorrowValue, IssueStorageCapabilityController, PublishCapability, SaveValue, UnpublishCapability) &Account) {\n        // Setup Pack Collection\n        let packCollectionData: MetadataViews.NFTCollectionData = HWGaragePackV2.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"ViewResolver does not resolve NFTCollectionData view\")\n\n        // exit if packCollection exists\n        if acct.storage.borrow<&HWGaragePackV2.Collection>(from: packCollectionData.storagePath) == nil {\n            // create a new empty packCollection for HWGaragePackV2\n            let packCollection: @{NonFungibleToken.Collection} <- HWGaragePackV2.createEmptyCollection(nftType: Type<@HWGaragePackV2.NFT>())\n\n            // save HWGaragePackV2 packCollection to the account\n            acct.storage.save(<-packCollection, to: packCollectionData.storagePath)\n\n            // create a public capability for the HWGaragePackV2 packCollection\n            acct.capabilities.unpublish(packCollectionData.publicPath) // remove any current pubCap\n            let packCollectionCap: Capability<&HWGaragePackV2.Collection> = acct.capabilities.storage.issue<&HWGaragePackV2.Collection>(packCollectionData.storagePath)\n            acct.capabilities.publish(packCollectionCap, at: packCollectionData.publicPath)\n        }\n\n        let packToTransfer: @HWGaragePackV2.NFT <-acct.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Provider}>(from: HWGaragePackV2.CollectionStoragePath)!.withdraw(withdrawID: cardEditionID) as! @HWGaragePackV2.NFT\n        HWGaragePackV2.transfer(uuid: packToTransfer.uuid, id: packToTransfer.id, packSeriesId: packToTransfer.packSeriesID, packEditionId: packToTransfer.packEditionID,  toAddress: to)\n        getAccount(to).capabilities.get<&{NonFungibleToken.Receiver}>(HWGaragePackV2.CollectionPublicPath).borrow()!.deposit(token: <-packToTransfer)\n\n    }\n    execute {\n    }\n}\n";
