"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWhitelabelOrderCode = exports.isWhitelabelCollection = exports.isGamisodesCollection = exports.isBarbieCollection = exports.isGarageCollection = void 0;
var tslib_1 = require("tslib");
var t = tslib_1.__importStar(require("@onflow/types"));
var nft_1 = require("../../scripts/nft");
var template_replacer_1 = require("../../common/template-replacer");
var cadence_code_config_1 = require("../../config/cadence-code-config");
var change_price_1 = require("../../scripts/nft/gamisodes/change-price");
var buy_1 = require("../../scripts/nft/gamisodes/buy");
var prepare_order_code_1 = require("./prepare-order-code");
function isGarageCollection(collection) {
    return [
        "HWGaragePack",
        "HWGarageCard",
        "HWGarageCardV2",
        "HWGaragePackV2",
        "HWGarageTokenV2",
    ].includes(collection);
}
exports.isGarageCollection = isGarageCollection;
function isBarbieCollection(collection) {
    return [
        "BBxBarbiePack",
        "BBxBarbieCard",
        "BBxBarbieToken",
    ].includes(collection);
}
exports.isBarbieCollection = isBarbieCollection;
function isGamisodesCollection(collection) {
    return [
        "Gamisodes",
    ].includes(collection);
}
exports.isGamisodesCollection = isGamisodesCollection;
function isWhitelabelCollection(collection) {
    return isGarageCollection(collection) || isBarbieCollection(collection) || isGamisodesCollection(collection);
}
exports.isWhitelabelCollection = isWhitelabelCollection;
function getWhitelabelOrderCode(fcl, collectionName) {
    return {
        create: function (o) {
            var code;
            if (isGarageCollection(collectionName)) {
                code = (0, nft_1.getGarageListTxCode)(o.collectionName, o.currency);
            }
            else if (isBarbieCollection(collectionName)) {
                code = (0, nft_1.barbieListTxCode)(collectionName, o.currency);
            }
            else if (isGamisodesCollection(collectionName)) {
                code = (0, nft_1.gamisodesListTxCode)(o.currency);
            }
            else {
                throw new Error("Unknown collection (".concat(collectionName, ")"));
            }
            return {
                cadence: (0, prepare_order_code_1.prepareOrderCode)(code, collectionName, o.currency),
                args: fcl.args([
                    fcl.arg(o.itemId, t.UInt64),
                    fcl.arg(o.saleItemPrice, t.UFix64),
                    fcl.arg(o.customID || null, t.Optional(t.String)),
                    fcl.arg(o.commissionAmount, t.UFix64),
                    fcl.arg(o.expiry, t.UInt64),
                    fcl.arg(o.marketplacesAddress, t.Array(t.Address)),
                ]),
            };
        },
        update: function (o) {
            var code;
            if (isGarageCollection(collectionName)) {
                code = (0, nft_1.getGarageChangePriceTxCode)(o.collectionName, o.currency);
            }
            else if (isBarbieCollection(collectionName)) {
                code = (0, nft_1.barbieChangePriceTxCode)(collectionName, o.currency);
            }
            else if (isGamisodesCollection(collectionName)) {
                code = (0, change_price_1.gamisodesChangePriceTxCode)(o.currency);
            }
            else {
                throw new Error("Unknown collection (".concat(collectionName, ")"));
            }
            return {
                cadence: (0, prepare_order_code_1.prepareOrderCode)(code, collectionName, o.currency),
                args: fcl.args([
                    fcl.arg(o.orderId, t.UInt64),
                    fcl.arg(o.itemId, t.UInt64),
                    fcl.arg(o.saleItemPrice, t.UFix64),
                    fcl.arg(o.customID || null, t.Optional(t.String)),
                    fcl.arg(o.commissionAmount, t.UFix64),
                    fcl.arg(o.expiry, t.UInt64),
                    fcl.arg(o.marketplacesAddress, t.Array(t.Address)),
                ]),
            };
        },
        buy: function (o) {
            var code;
            if (isGarageCollection(collectionName)) {
                code = nft_1.garageBuyTxCode;
            }
            else if (isBarbieCollection(collectionName)) {
                code = nft_1.barbieBuyTxCode;
            }
            else if (isGamisodesCollection(collectionName)) {
                code = buy_1.gamisodesBuyTxCode;
            }
            else {
                throw new Error("Unknown collection (".concat(collectionName, ")"));
            }
            return {
                cadence: (0, prepare_order_code_1.prepareOrderCode)(code, collectionName, o.currency),
                args: fcl.args([
                    fcl.arg(o.orderId, t.UInt64),
                    fcl.arg(o.address, t.Address),
                    fcl.arg(o.comissionRecipient || null, t.Optional(t.Address)),
                ]),
            };
        },
        cancel: function (orderId) {
            return {
                cadence: (0, template_replacer_1.fillCodeTemplate)(nft_1.txUnlistItemStorefrontV2, (0, cadence_code_config_1.getNftCodeConfig)(collectionName)),
                args: fcl.args([fcl.arg(orderId, t.UInt64)]),
            };
        },
        setupVault: function () {
            return {
                cadence: (0, template_replacer_1.fillCodeTemplate)(nft_1.txInitVault, (0, cadence_code_config_1.getNftCodeConfig)(collectionName)),
                args: fcl.args([]),
            };
        },
    };
}
exports.getWhitelabelOrderCode = getWhitelabelOrderCode;
