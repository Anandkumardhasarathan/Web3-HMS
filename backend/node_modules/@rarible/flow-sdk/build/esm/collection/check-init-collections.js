import { __awaiter, __generator } from "tslib";
import * as t from "@onflow/types";
import { toFlowAddress } from "@rarible/types";
import { runScript } from "../common/transaction";
import { CONFIGS } from "../config/config";
import { checkInitMattelContracts } from "../scripts/nft/mattel/check-init";
import { checkInitGamisodesContracts } from "../scripts/nft/gamisodes/check-init";
export function checkInitCollections(fcl, auth, network, from) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    if (!!from) return [3 /*break*/, 5];
                    if (!auth) return [3 /*break*/, 2];
                    _b = toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_d.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_d.sent()).addr]);
                    _d.label = 4;
                case 4:
                    from = _a;
                    _d.label = 5;
                case 5:
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    return [2 /*return*/, runScript(fcl, {
                            cadence: checkInitMattelContracts,
                            args: fcl.args([fcl.arg(from, t.Address)]),
                        }, CONFIGS[network].mainAddressMap)];
            }
        });
    });
}
export function checkInitGamisodesCollections(fcl, auth, network, from) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    if (!!from) return [3 /*break*/, 5];
                    if (!auth) return [3 /*break*/, 2];
                    _b = toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_d.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_d.sent()).addr]);
                    _d.label = 4;
                case 4:
                    from = _a;
                    _d.label = 5;
                case 5:
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    return [2 /*return*/, runScript(fcl, {
                            cadence: checkInitGamisodesContracts,
                            args: fcl.args([fcl.arg(from, t.Address)]),
                        }, CONFIGS[network].mainAddressMap)];
            }
        });
    });
}
