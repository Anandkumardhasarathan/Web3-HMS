import { __awaiter, __generator } from "tslib";
import { runTransaction, waitForSeal } from "../common/transaction";
import { getNftCode } from "../tx-code-store/nft";
import { getCollectionConfig } from "../common/collection/get-config";
import { isGamisodesCollection, isWhitelabelCollection, } from "../tx-code-store/order/whitelabel-storefront";
import { CONFIGS } from "../config/config";
import { txInitGamisodesContractsAndStorefrontV2, txInitMattelContractsAndStorefrontV2, txInitVault, } from "../scripts/nft";
import { fillCodeTemplate } from "../common/template-replacer";
import { getNftCodeConfig } from "../config/cadence-code-config";
export function setupAccount(fcl, auth, network, collection) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, map, name, txId_1, txId;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    _a = getCollectionConfig(network, collection), map = _a.map, name = _a.name;
                    if (!isWhitelabelCollection(name)) return [3 /*break*/, 2];
                    return [4 /*yield*/, runTransaction(fcl, map, {
                            cadence: fillCodeTemplate(isGamisodesCollection(name)
                                ? txInitGamisodesContractsAndStorefrontV2
                                : txInitMattelContractsAndStorefrontV2, getNftCodeConfig(name)),
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId_1 = _b.sent();
                    return [2 /*return*/, waitForSeal(fcl, txId_1)];
                case 2: return [4 /*yield*/, runTransaction(fcl, map, getNftCode(name).setupAccount(), auth)];
                case 3:
                    txId = _b.sent();
                    return [2 /*return*/, waitForSeal(fcl, txId)];
            }
        });
    });
}
export function setupVault(fcl, auth, network) {
    return __awaiter(this, void 0, void 0, function () {
        var map, txId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    map = CONFIGS[network].mainAddressMap;
                    return [4 /*yield*/, runTransaction(fcl, map, {
                            cadence: txInitVault,
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId = _a.sent();
                    return [2 /*return*/, waitForSeal(fcl, txId)];
            }
        });
    });
}
