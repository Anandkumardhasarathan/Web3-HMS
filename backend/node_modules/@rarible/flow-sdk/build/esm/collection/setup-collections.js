import { __awaiter, __generator } from "tslib";
import { runTransaction, waitForSeal } from "../common/transaction";
import { CONFIGS } from "../config/config";
import { txInitGamisodesContractsAndStorefrontV2, txInitMattelContractsAndStorefrontV2, txInitNFTContractsAndStorefrontV2, } from "../scripts/nft";
export function setupMattelCollections(fcl, auth, network) {
    return __awaiter(this, void 0, void 0, function () {
        var txId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    return [4 /*yield*/, runTransaction(fcl, CONFIGS[network].mainAddressMap, {
                            cadence: txInitMattelContractsAndStorefrontV2,
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId = _a.sent();
                    return [2 /*return*/, waitForSeal(fcl, txId)];
            }
        });
    });
}
export function setupGamisodesCollections(fcl, auth, network) {
    return __awaiter(this, void 0, void 0, function () {
        var txId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    return [4 /*yield*/, runTransaction(fcl, CONFIGS[network].mainAddressMap, {
                            cadence: txInitGamisodesContractsAndStorefrontV2,
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId = _a.sent();
                    return [2 /*return*/, waitForSeal(fcl, txId)];
            }
        });
    });
}
export function setupCollections(fcl, auth, network) {
    return __awaiter(this, void 0, void 0, function () {
        var txId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for setup collection on account");
                    }
                    return [4 /*yield*/, runTransaction(fcl, CONFIGS[network].mainAddressMap, {
                            cadence: txInitNFTContractsAndStorefrontV2,
                            args: fcl.args([]),
                        }, auth)];
                case 1:
                    txId = _a.sent();
                    return [2 /*return*/, waitForSeal(fcl, txId)];
            }
        });
    });
}
