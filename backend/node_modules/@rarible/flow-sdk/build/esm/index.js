import { __assign } from "tslib";
import * as ApiClient from "@rarible/flow-api-client";
import { toFlowContractAddress, isFlowContractAddress } from "@rarible/types";
import { mint as mintTemplate } from "./nft/mint";
import { burn as burnTemplate } from "./nft/burn";
import { transfer as transferTemplate } from "./nft/transfer";
import { sell as sellTemplate } from "./order/sell";
import { fill as buyTemplate } from "./order/fill/fill";
import { cancelOrder as cancelOrderTmeplate } from "./order/cancel-order";
import { signUserMessage as signUserMessageTemplate } from "./signature/sign-user-message";
import { getFungibleBalance as getFungibleBalanceTemplate } from "./wallet/get-fungible-balance";
import { bid as bidTemplate } from "./order/bid";
import { bidUpdate as bidUpdateTemplate } from "./order/bid-update";
import { cancelBid as cancelBidTmeplate } from "./order/cancel-bid";
import { setupAccount as setupAccountTemplate, setupVault } from "./collection/setup-account";
import { getProtocolFee as getProtocolFeeUpdateTemplate } from "./order/get-protocol-fee";
import { updateOrder as updateOrderTemplate } from "./order/update-order";
import { ENV_CONFIG } from "./config/env";
import { transferFunds } from "./wallet/transfer-funds";
import { setupGamisodesCollections, setupMattelCollections, setupCollections } from "./collection/setup-collections";
import { checkInitCollections, checkInitGamisodesCollections, } from "./collection/check-init-collections";
export function createFlowApisSdk(env, params) {
    if (params === void 0) { params = {}; }
    var configuration = new ApiClient.Configuration(__assign({ basePath: ENV_CONFIG[env].basePath, headers: typeof params.apiKey === "string" ? { "X-API-KEY": params.apiKey } : {} }, params));
    return {
        collection: new ApiClient.FlowNftCollectionControllerApi(configuration),
        item: new ApiClient.FlowNftItemControllerApi(configuration),
        ownership: new ApiClient.FlowNftOwnershipControllerApi(configuration),
        order: new ApiClient.FlowOrderControllerApi(configuration),
    };
}
/**
 * Creates new instance of FlowSdk
 * @param fcl
 * @param network
 * @param params - api configuration
 * @param auth - optional, only for testing purposes
 */
export function createFlowSdk(fcl, network, params, auth) {
    var blockchainNetwork = ENV_CONFIG[network].network;
    var apis = createFlowApisSdk(network, params);
    return {
        apis: apis,
        nft: {
            mint: mintTemplate.bind(null, fcl, auth, blockchainNetwork),
            burn: burnTemplate.bind(null, fcl, auth, blockchainNetwork),
            transfer: transferTemplate.bind(null, fcl, auth, blockchainNetwork),
        },
        order: {
            sell: sellTemplate.bind(null, fcl, apis.item, auth, blockchainNetwork),
            fill: buyTemplate.bind(null, fcl, auth, blockchainNetwork, apis.order).bind(null, apis.item),
            cancelOrder: cancelOrderTmeplate.bind(null, fcl, auth, blockchainNetwork),
            updateOrder: updateOrderTemplate.bind(null, fcl, apis.order, auth).bind(null, blockchainNetwork),
            bid: bidTemplate.bind(null, fcl, auth, blockchainNetwork),
            bidUpdate: bidUpdateTemplate.bind(null, fcl, auth, blockchainNetwork, apis.order),
            cancelBid: cancelBidTmeplate.bind(null, fcl, auth, blockchainNetwork),
            getProtocolFee: getProtocolFeeUpdateTemplate.bind(null, blockchainNetwork),
        },
        wallet: {
            getFungibleBalance: getFungibleBalanceTemplate.bind(null, fcl, blockchainNetwork),
            transferFunds: transferFunds.bind(null, fcl, blockchainNetwork, auth),
            setupVault: setupVault.bind(null, fcl, auth, blockchainNetwork),
        },
        collection: {
            setupAccount: setupAccountTemplate.bind(null, fcl, auth, blockchainNetwork),
            setupCollections: setupCollections.bind(null, fcl, auth, blockchainNetwork),
            setupMattelCollections: setupMattelCollections.bind(null, fcl, auth, blockchainNetwork),
            setupGamisodesCollections: setupGamisodesCollections.bind(null, fcl, auth, blockchainNetwork),
            checkInitCollections: checkInitCollections.bind(null, fcl, auth, blockchainNetwork),
            checkInitGamisodesCollections: checkInitGamisodesCollections.bind(null, fcl, auth, blockchainNetwork),
        },
        signUserMessage: signUserMessageTemplate.bind(null, fcl),
    };
}
export { toFlowItemId, isFlowItemId } from "./common/item/index";
export { replaceImportAddresses } from "./common/template-replacer";
export { waitForSeal } from "./common/transaction";
export { toFlowContractAddress, isFlowContractAddress };
export var FLOW_ENV_CONFIG = ENV_CONFIG;
export { getFungibleBalanceSimple } from "./wallet/get-ft-balance-simple";
export { CONFIGS } from "./config/config";
export var getFlowFungibleBalance = getFungibleBalanceTemplate;
