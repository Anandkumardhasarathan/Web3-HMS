import { __assign, __awaiter, __generator } from "tslib";
import { runTransaction, waitForSeal } from "../common/transaction";
import { getNftCode } from "../tx-code-store/nft";
import { getCollectionConfig } from "../common/collection/get-config";
import { toFlowItemId } from "../common/item";
import { validateRoyalties } from "./common/validate-royalties";
export function mint(fcl, auth, network, collection, metadata, royalties) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, map, address, config, name, validatedRoyalties, txId, txResult, mintEvent;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fcl) {
                        throw new Error("Fcl is required for mint");
                    }
                    _a = getCollectionConfig(network, collection), map = _a.map, address = _a.address, config = _a.config, name = _a.name;
                    if (!config.features.includes("MINT")) return [3 /*break*/, 3];
                    validatedRoyalties = validateRoyalties(royalties);
                    return [4 /*yield*/, runTransaction(fcl, map, getNftCode(name).mint(fcl, address, metadata, validatedRoyalties), auth)];
                case 1:
                    txId = _b.sent();
                    return [4 /*yield*/, waitForSeal(fcl, txId)];
                case 2:
                    txResult = _b.sent();
                    if (txResult.events.length) {
                        mintEvent = txResult.events.find(function (e) { return e.type.split(".")[3] === "Mint"; });
                        if (mintEvent) {
                            return [2 /*return*/, __assign({ tokenId: toFlowItemId("".concat(collection, ":").concat(mintEvent.data.id)) }, txResult)];
                        }
                        throw new Error("Mint event not found in transaction response");
                    }
                    throw new Error("Something went wrong, transaction sent but events is empty");
                case 3: throw new Error("This collection doesn't support 'mint'");
            }
        });
    });
}
