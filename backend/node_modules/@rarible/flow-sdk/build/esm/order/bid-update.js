import { __assign, __awaiter, __generator } from "tslib";
import { toFlowAddress } from "@rarible/types";
import { runTransaction, waitForSeal } from "../common/transaction";
import { getCollectionConfig } from "../common/collection/get-config";
import { getBidCode } from "../tx-code-store/order/rarible-open-bid";
import { parseEvents } from "../common/parse-tx-events";
import { fixAmount } from "../common/fix-amount";
import { getOrderDetailsFromBlockchain } from "./common/get-order-details-from-blockchain";
import { getPreparedOrder } from "./common/get-prepared-order";
import { calculateUpdateOrderSaleCuts } from "./common/calculate-update-order-sale-cuts";
import { getOrderId } from "./common/get-order-id";
export function bidUpdate(fcl, auth, network, orderApi, collection, currency, order, price) {
    return __awaiter(this, void 0, void 0, function () {
        var from, _a, _b, _c, preparedOrder, _d, name_1, map, orderId, bidSaleCuts, txId, txResponse, simpleOrderId;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    if (!fcl) return [3 /*break*/, 9];
                    if (!auth) return [3 /*break*/, 2];
                    _b = toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_e.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_e.sent()).addr]);
                    _e.label = 4;
                case 4:
                    from = _a;
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    return [4 /*yield*/, getPreparedOrder(orderApi, order)];
                case 5:
                    preparedOrder = _e.sent();
                    _d = getCollectionConfig(network, collection), name_1 = _d.name, map = _d.map;
                    orderId = getOrderId(preparedOrder.id);
                    return [4 /*yield*/, getOrderDetailsFromBlockchain(fcl, network, "bid", from, orderId)];
                case 6:
                    bidSaleCuts = _e.sent();
                    return [4 /*yield*/, runTransaction(fcl, map, getBidCode(fcl, name_1).update(currency, orderId, fixAmount(price), calculateUpdateOrderSaleCuts(preparedOrder.make.value, price, bidSaleCuts.saleCuts)), auth)];
                case 7:
                    txId = _e.sent();
                    return [4 /*yield*/, waitForSeal(fcl, txId)];
                case 8:
                    txResponse = _e.sent();
                    simpleOrderId = parseEvents(txResponse.events, "BidAvailable", "bidId");
                    return [2 /*return*/, __assign(__assign({}, txResponse), { orderId: simpleOrderId })];
                case 9: throw new Error("Fcl is required for purchasing");
            }
        });
    });
}
