import { __assign, __awaiter, __generator, __spreadArray } from "tslib";
import { runTransaction, waitForSeal } from "../common/transaction";
import { getCollectionConfig } from "../common/collection/get-config";
import { getBidCode } from "../tx-code-store/order/rarible-open-bid";
import { parseEvents } from "../common/parse-tx-events";
import { extractTokenId } from "../common/item";
import { calculateFees } from "../common/calculate-fees";
import { fixAmount } from "../common/fix-amount";
import { getProtocolFee } from "./get-protocol-fee";
export function bid(fcl, auth, network, collection, currency, itemId, price, originFee) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, name_1, map, protocolFees, requestFees, txId, txResponse, simpleOrderId;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fcl) return [3 /*break*/, 3];
                    _a = getCollectionConfig(network, collection), name_1 = _a.name, map = _a.map;
                    protocolFees = [getProtocolFee.percents(network).buyerFee];
                    requestFees = originFee || [];
                    return [4 /*yield*/, runTransaction(fcl, map, getBidCode(fcl, name_1).create(currency, extractTokenId(itemId), fixAmount(price), __spreadArray([], calculateFees(price, __spreadArray(__spreadArray([], protocolFees, true), requestFees, true)), true)), auth)];
                case 1:
                    txId = _b.sent();
                    return [4 /*yield*/, waitForSeal(fcl, txId)];
                case 2:
                    txResponse = _b.sent();
                    simpleOrderId = parseEvents(txResponse.events, "BidAvailable", "bidId");
                    return [2 /*return*/, __assign(__assign({}, txResponse), { orderId: simpleOrderId })];
                case 3: throw new Error("Fcl is required for purchasing");
            }
        });
    });
}
