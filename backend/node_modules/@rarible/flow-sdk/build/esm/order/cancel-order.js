import { __awaiter, __generator } from "tslib";
import { runTransaction, waitForSeal } from "../common/transaction";
import { getCollectionConfig } from "../common/collection/get-config";
import { getOrderCode } from "../tx-code-store/order/storefront";
import { getWhitelabelOrderCode, isWhitelabelCollection } from "../tx-code-store/order/whitelabel-storefront";
import { getOrderId } from "./common/get-order-id";
export function cancelOrder(fcl, auth, network, collection, orderId) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, name_1, map, preparedOrderId, txId_1, txId;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fcl) return [3 /*break*/, 4];
                    _a = getCollectionConfig(network, collection), name_1 = _a.name, map = _a.map;
                    preparedOrderId = getOrderId(orderId);
                    if (!isWhitelabelCollection(name_1)) return [3 /*break*/, 2];
                    return [4 /*yield*/, runTransaction(fcl, map, getWhitelabelOrderCode(fcl, name_1).cancel(preparedOrderId), auth)];
                case 1:
                    txId_1 = _b.sent();
                    return [2 /*return*/, waitForSeal(fcl, txId_1)];
                case 2: return [4 /*yield*/, runTransaction(fcl, map, getOrderCode(fcl, name_1).cancel(preparedOrderId), auth)];
                case 3:
                    txId = _b.sent();
                    return [2 /*return*/, waitForSeal(fcl, txId)];
                case 4: throw new Error("Fcl is required for cancelling order");
            }
        });
    });
}
