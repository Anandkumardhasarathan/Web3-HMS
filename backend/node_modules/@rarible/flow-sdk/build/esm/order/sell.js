import { __assign, __awaiter, __generator, __spreadArray } from "tslib";
import { toFlowAddress } from "@rarible/types";
import { toBn } from "@rarible/utils";
import { runTransaction, waitForSeal } from "../common/transaction";
import { getCollectionConfig } from "../common/collection/get-config";
import { checkPrice } from "../common/check-price";
import { parseEvents } from "../common/parse-tx-events";
import { extractTokenId } from "../common/item";
import { getOrderCode } from "../tx-code-store/order/storefront";
import { fixAmount } from "../common/fix-amount";
import { getWhitelabelOrderCode, isWhitelabelCollection } from "../tx-code-store/order/whitelabel-storefront";
import { getProtocolFee } from "./get-protocol-fee";
import { calculateSaleCuts } from "./common/calculate-sale-cuts";
import { fetchItemRoyalties } from "./common/fetch-item-royalties";
export function sell(fcl, itemApi, auth, network, request) {
    return __awaiter(this, void 0, void 0, function () {
        var collection, currency, itemId, sellItemPrice, payouts, originFees, from, _a, _b, _c, royalties, _d, _e, name_1, map, fee, comissionAmount, txId_1, tx_1, simpleOrderId_1, txId, tx, simpleOrderId;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    collection = request.collection, currency = request.currency, itemId = request.itemId, sellItemPrice = request.sellItemPrice, payouts = request.payouts, originFees = request.originFees;
                    checkPrice(sellItemPrice);
                    if (!fcl) return [3 /*break*/, 13];
                    if (!auth) return [3 /*break*/, 2];
                    _b = toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_f.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_f.sent()).addr]);
                    _f.label = 4;
                case 4:
                    from = _a;
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    if (!(network === "emulator")) return [3 /*break*/, 5];
                    _d = [];
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, fetchItemRoyalties(itemApi, itemId)];
                case 6:
                    _d = _f.sent();
                    _f.label = 7;
                case 7:
                    royalties = _d;
                    _e = getCollectionConfig(network, collection), name_1 = _e.name, map = _e.map;
                    if (!isWhitelabelCollection(name_1)) return [3 /*break*/, 10];
                    fee = (originFees || [])[0];
                    comissionAmount = toBn((fee === null || fee === void 0 ? void 0 : fee.value) || 0)
                        .div(10000)
                        .multipliedBy(request.sellItemPrice)
                        .decimalPlaces(8);
                    if (comissionAmount.gte(request.sellItemPrice)) {
                        comissionAmount = toBn(0);
                    }
                    return [4 /*yield*/, runTransaction(fcl, map, getWhitelabelOrderCode(fcl, name_1).create({
                            collectionName: name_1,
                            itemId: extractTokenId(itemId),
                            saleItemPrice: fixAmount(sellItemPrice),
                            customID: "RARIBLE",
                            commissionAmount: fixAmount(comissionAmount.toString()),
                            expiry: request.end instanceof Date
                                ? Math.floor(request.end.getTime() / 1000)
                                : Math.floor(Date.now() / 1000) + 60 * 60 * 24 * 60,
                            marketplacesAddress: fee ? [toFlowAddress(fee.account)] : [],
                            currency: request.currency,
                        }), auth)];
                case 8:
                    txId_1 = _f.sent();
                    return [4 /*yield*/, waitForSeal(fcl, txId_1)];
                case 9:
                    tx_1 = _f.sent();
                    simpleOrderId_1 = parseEvents(tx_1.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, __assign(__assign({}, tx_1), { orderId: simpleOrderId_1 })];
                case 10: return [4 /*yield*/, runTransaction(fcl, map, getOrderCode(fcl, name_1).create(currency, extractTokenId(itemId), calculateSaleCuts(from, fixAmount(sellItemPrice), __spreadArray(__spreadArray([
                        getProtocolFee.percents(network).sellerFee
                    ], (originFees || []), true), (royalties || []), true), __spreadArray([], (payouts || []), true))), auth)];
                case 11:
                    txId = _f.sent();
                    return [4 /*yield*/, waitForSeal(fcl, txId)];
                case 12:
                    tx = _f.sent();
                    simpleOrderId = parseEvents(tx.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, __assign(__assign({}, tx), { orderId: simpleOrderId })];
                case 13: throw new Error("Fcl is required for creating order");
            }
        });
    });
}
