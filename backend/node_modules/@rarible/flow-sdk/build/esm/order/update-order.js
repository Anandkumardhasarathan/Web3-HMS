import { __assign, __awaiter, __generator } from "tslib";
import { toBn } from "@rarible/utils";
import { toFlowAddress } from "@rarible/types";
import { runTransaction, waitForSeal } from "../common/transaction";
import { getCollectionConfig } from "../common/collection/get-config";
import { checkPrice } from "../common/check-price";
import { parseEvents } from "../common/parse-tx-events";
import { getOrderCode } from "../tx-code-store/order/storefront";
import { getWhitelabelOrderCode, isWhitelabelCollection } from "../tx-code-store/order/whitelabel-storefront";
import { fixAmount } from "../common/fix-amount";
import { getOrderDetailsFromBlockchain, getStorefrontV2OrderDetailsFromBlockchain, } from "./common/get-order-details-from-blockchain";
import { getPreparedOrder } from "./common/get-prepared-order";
import { calculateUpdateOrderSaleCuts } from "./common/calculate-update-order-sale-cuts";
import { getOrderId } from "./common/get-order-id";
export function updateOrder(fcl, orderApi, auth, network, request) {
    return __awaiter(this, void 0, void 0, function () {
        var collection, currency, sellItemPrice, order, from, _a, _b, _c, orderId, preparedOrder, _d, name_1, map, details, fee, comissionAmount, txId_1, tx_1, simpleOrderId_1, orderSaleCuts, txId, tx, simpleOrderId;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    collection = request.collection, currency = request.currency, sellItemPrice = request.sellItemPrice, order = request.order;
                    checkPrice(sellItemPrice);
                    if (!fcl) return [3 /*break*/, 13];
                    if (!auth) return [3 /*break*/, 2];
                    _b = toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_e.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_e.sent()).addr]);
                    _e.label = 4;
                case 4:
                    from = _a;
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    orderId = getOrderId(request.order);
                    return [4 /*yield*/, getPreparedOrder(orderApi, order)];
                case 5:
                    preparedOrder = _e.sent();
                    _d = getCollectionConfig(network, collection), name_1 = _d.name, map = _d.map;
                    if (!isWhitelabelCollection(name_1)) return [3 /*break*/, 9];
                    return [4 /*yield*/, getStorefrontV2OrderDetailsFromBlockchain(fcl, network, from, orderId)];
                case 6:
                    details = _e.sent();
                    if (details.purchased) {
                        throw new Error("Item was purchased");
                    }
                    fee = preparedOrder.data.originalFees[0];
                    comissionAmount = toBn((fee === null || fee === void 0 ? void 0 : fee.value) || 0)
                        .div(10000)
                        .multipliedBy(request.sellItemPrice)
                        .decimalPlaces(8);
                    if (comissionAmount.gte(request.sellItemPrice)) {
                        comissionAmount = toBn(0);
                    }
                    return [4 /*yield*/, runTransaction(fcl, map, getWhitelabelOrderCode(fcl, name_1).update({
                            collectionName: name_1,
                            orderId: orderId,
                            itemId: parseInt(details.nftID),
                            saleItemPrice: fixAmount(request.sellItemPrice),
                            customID: "RARIBLE",
                            commissionAmount: fixAmount(comissionAmount.toString()),
                            expiry: parseInt(details.expiry),
                            marketplacesAddress: fee ? [toFlowAddress(fee.account)] : [],
                            currency: currency,
                        }), auth)];
                case 7:
                    txId_1 = _e.sent();
                    return [4 /*yield*/, waitForSeal(fcl, txId_1)];
                case 8:
                    tx_1 = _e.sent();
                    simpleOrderId_1 = parseEvents(tx_1.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, __assign(__assign({}, tx_1), { orderId: simpleOrderId_1 })];
                case 9: return [4 /*yield*/, getOrderDetailsFromBlockchain(fcl, network, "sell", from, orderId)];
                case 10:
                    orderSaleCuts = _e.sent();
                    return [4 /*yield*/, runTransaction(fcl, map, getOrderCode(fcl, name_1).update(currency, orderId, calculateUpdateOrderSaleCuts(preparedOrder.take.value, request.sellItemPrice, orderSaleCuts.saleCuts)), auth)];
                case 11:
                    txId = _e.sent();
                    return [4 /*yield*/, waitForSeal(fcl, txId)];
                case 12:
                    tx = _e.sent();
                    simpleOrderId = parseEvents(tx.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, __assign(__assign({}, tx), { orderId: simpleOrderId })];
                case 13: throw new Error("Fcl is required for updating order");
            }
        });
    });
}
