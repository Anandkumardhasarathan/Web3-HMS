export var garageRawInitPart = "\n        // HWGaragePack\n   let packCollectionData: MetadataViews.NFTCollectionData = HWGaragePack.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n     ?? panic(\"ViewResolver does not resolve NFTCollectionData view\")\n\n   // exit if packCollection exists\n   if acct.storage.borrow<&HWGaragePack.Collection>(from: packCollectionData.storagePath) == nil {\n     // create a new empty packCollection for HWGaragePack\n     let packCollection: @{NonFungibleToken.Collection} <- HWGaragePack.createEmptyCollection(nftType: Type<@HWGaragePack.NFT>())\n\n     // save HWGaragePack packCollection to the account\n     acct.storage.save(<-packCollection, to: packCollectionData.storagePath)\n\n     // create a public capability for the HWGaragePack packCollection\n     acct.capabilities.unpublish(packCollectionData.publicPath) // remove any current pubCap\n     let packCollectionCap: Capability<&HWGaragePack.Collection> = acct.capabilities.storage.issue<&HWGaragePack.Collection>(packCollectionData.storagePath)\n     acct.capabilities.publish(packCollectionCap, at: packCollectionData.publicPath)\n   }\n\n   // HWGarageCard\n   let cardCollectionData: MetadataViews.NFTCollectionData = HWGarageCard.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n     ?? panic(\"ViewResolver does not resolve NFTCollectionData view\")\n\n   // exit if cardCollection exists\n   if acct.storage.borrow<&HWGarageCard.Collection>(from: cardCollectionData.storagePath) == nil {\n     // create a new empty cardCollection for HWGarageCard\n     let cardCollection: @{NonFungibleToken.Collection} <- HWGarageCard.createEmptyCollection(nftType: Type<@HWGarageCard.NFT>())\n\n     // save HWGarageCard cardCollection to the account\n     acct.storage.save(<-cardCollection, to: cardCollectionData.storagePath)\n\n     // create a public capability for the HWGarageCard cardCollection\n     acct.capabilities.unpublish(cardCollectionData.publicPath) // remove any current pubCap\n     let cardCollectionCap: Capability<&HWGarageCard.Collection> = acct.capabilities.storage.issue<&HWGarageCard.Collection>(cardCollectionData.storagePath)\n     acct.capabilities.publish(cardCollectionCap, at: cardCollectionData.publicPath)\n   }\n\n   // HWGarageTokenV2\n   let tokenCollectionDataV2: MetadataViews.NFTCollectionData = HWGarageTokenV2.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n     ?? panic(\"ViewResolver does not resolve NFTCollectionData view\")\n\n   if acct.storage.borrow<&HWGarageTokenV2.Collection>(from: tokenCollectionDataV2.storagePath) == nil {\n     // create a new empty tokenCollection for HWGarageTokenV2\n     let tokenCollection: @{NonFungibleToken.Collection} <- HWGarageTokenV2.createEmptyCollection(nftType: Type<@HWGarageTokenV2.NFT>())\n\n     // save HWGarageTokenV2 tokenCollection to the account\n     acct.storage.save(<-tokenCollection, to: tokenCollectionDataV2.storagePath)\n\n     // create a public capability for the HWGarageTokenV2 tokenCollection\n     acct.capabilities.unpublish(tokenCollectionDataV2.publicPath) // remove any current pubCap\n     let tokenCollectionCap = acct.capabilities.storage.issue<&HWGarageTokenV2.Collection>(tokenCollectionDataV2.storagePath)\n     acct.capabilities.publish(tokenCollectionCap, at: tokenCollectionDataV2.publicPath)\n   }\n\n   // HWGarageCardV2\n   let cardCollectionDataV2: MetadataViews.NFTCollectionData = HWGarageCardV2.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n     ?? panic(\"ViewResolver does not resolve NFTCollectionData view\")\n\n   // exit if cardCollection exists\n   if acct.storage.borrow<&HWGarageCardV2.Collection>(from: cardCollectionDataV2.storagePath) == nil {\n     // create a new empty cardCollection for HWGarageCardV2\n     let cardCollection: @{NonFungibleToken.Collection} <- HWGarageCardV2.createEmptyCollection(nftType: Type<@HWGarageCardV2.NFT>())\n\n     // save HWGarageCardV2 cardCollection to the account\n     acct.storage.save(<-cardCollection, to: cardCollectionDataV2.storagePath)\n\n     // create a public capability for the HWGarageCardV2 cardCollection\n     acct.capabilities.unpublish(cardCollectionDataV2.publicPath) // remove any current pubCap\n     let cardCollectionCap = acct.capabilities.storage.issue<&HWGarageCardV2.Collection>(cardCollectionDataV2.storagePath)\n     acct.capabilities.publish(cardCollectionCap, at: cardCollectionDataV2.publicPath)\n   }\n\n   // HWGaragePackV2\n   let garagePackCollectionDataV2: MetadataViews.NFTCollectionData = HWGaragePackV2.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n     ?? panic(\"ViewResolver does not resolve NFTCollectionData view\")\n\n   // exit if packCollection exists\n   if acct.storage.borrow<&HWGaragePackV2.Collection>(from: garagePackCollectionDataV2.storagePath) == nil {\n     // create a new empty packCollection for HWGaragePackV2\n     let packCollection: @{NonFungibleToken.Collection} <- HWGaragePackV2.createEmptyCollection(nftType: Type<@HWGaragePackV2.NFT>())\n\n     // save HWGaragePackV2 packCollection to the account\n     acct.storage.save(<-packCollection, to: garagePackCollectionDataV2.storagePath)\n\n     // create a public capability for the HWGaragePackV2 packCollection\n     acct.capabilities.unpublish(garagePackCollectionDataV2.publicPath) // remove any current pubCap\n     let packCollectionCap = acct.capabilities.storage.issue<&HWGaragePackV2.Collection>(garagePackCollectionDataV2.storagePath)\n     acct.capabilities.publish(packCollectionCap, at: garagePackCollectionDataV2.publicPath)\n   }\n";
export var garagePreparePartOfInit = "\n".concat(garageRawInitPart, "\n");
export var garageImports = "\n    import HWGarageCard from 0xHWGarageCard\n    import HWGaragePack from 0xHWGaragePack\n    import HWGarageCardV2 from 0xHWGarageCardV2\n    import HWGaragePackV2 from 0xHWGaragePackV2\n    import HWGarageTokenV2 from 0xHWGarageTokenV2\n  ";
