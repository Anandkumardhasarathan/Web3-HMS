export var hwV2CardTransfer = "\nimport NonFungibleToken from 0xNonFungibleToken\nimport MetadataViews from 0xMetadataViews\nimport HWGarageCardV2 from 0xHWGarageCardV2\n\ntransaction(\n    cardEditionID: UInt64\n    , to: Address\n    ) {\n\n    prepare(acct: auth(BorrowValue, IssueStorageCapabilityController, PublishCapability, SaveValue, UnpublishCapability) &Account) {\n        // Setup Card Collection\n        let cardCollectionData: MetadataViews.NFTCollectionData = HWGarageCardV2.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"ViewResolver does not resolve NFTCollectionData view\")\n\n        // exit if cardCollection exists\n        if acct.storage.borrow<&HWGarageCardV2.Collection>(from: cardCollectionData.storagePath) == nil {\n            // create a new empty cardCollection for HWGarageCardV2\n            let cardCollection: @{NonFungibleToken.Collection} <- HWGarageCardV2.createEmptyCollection(nftType: Type<@HWGarageCardV2.NFT>())\n\n            // save HWGarageCardV2 cardCollection to the account\n            acct.storage.save(<-cardCollection, to: cardCollectionData.storagePath)\n\n            // create a public capability for the HWGarageCardV2 cardCollection\n            acct.capabilities.unpublish(cardCollectionData.publicPath) // remove any current pubCap\n            let cardCollectionCap: Capability<&HWGarageCardV2.Collection> = acct.capabilities.storage.issue<&HWGarageCardV2.Collection>(cardCollectionData.storagePath)\n            acct.capabilities.publish(cardCollectionCap, at: cardCollectionData.publicPath)\n        }\n\n        let cardToTransfer: @HWGarageCardV2.NFT <-acct.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Provider}>(from: HWGarageCardV2.CollectionStoragePath)!.withdraw(withdrawID: cardEditionID) as! @HWGarageCardV2.NFT\n        HWGarageCardV2.transfer(uuid: cardToTransfer.uuid, id: cardToTransfer.id, packSeriesId: cardToTransfer.packSeriesID, cardEditionId: cardToTransfer.cardEditionID,  toAddress: to)\n        getAccount(to).capabilities.get<&{NonFungibleToken.Receiver}>(HWGarageCardV2.CollectionPublicPath).borrow()!.deposit(token: <-cardToTransfer)\n\n    }\n    execute {\n    }\n}\n";
