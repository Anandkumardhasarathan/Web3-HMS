export var hwV2TokenTransfer = "\nimport NonFungibleToken from 0xNonFungibleToken\nimport MetadataViews from 0xMetadataViews\nimport HWGarageTokenV2 from 0xHWGarageTokenV2\n\ntransaction(\n    cardEditionID: UInt64\n    , to: Address\n    ) {\n\n    prepare(acct: auth(BorrowValue, IssueStorageCapabilityController, PublishCapability, SaveValue, UnpublishCapability) &Account) {\n        // Setup Token Collection\n        let tokenCollectionData: MetadataViews.NFTCollectionData = HWGarageTokenV2.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"ViewResolver does not resolve NFTCollectionData view\")\n\n        // exit if tokenCollection exists\n        if acct.storage.borrow<&HWGarageTokenV2.Collection>(from: tokenCollectionData.storagePath) == nil {\n            // create a new empty tokenCollection for HWGarageTokenV2\n            let tokenCollection: @{NonFungibleToken.Collection} <- HWGarageTokenV2.createEmptyCollection(nftType: Type<@HWGarageTokenV2.NFT>())\n\n            // save HWGarageTokenV2 tokenCollection to the account\n            acct.storage.save(<-tokenCollection, to: tokenCollectionData.storagePath)\n\n            // create a public capability for the HWGarageTokenV2 tokenCollection\n            acct.capabilities.unpublish(tokenCollectionData.publicPath) // remove any current pubCap\n            let tokenCollectionCap: Capability<&HWGarageTokenV2.Collection> = acct.capabilities.storage.issue<&HWGarageTokenV2.Collection>(tokenCollectionData.storagePath)\n            acct.capabilities.publish(tokenCollectionCap, at: tokenCollectionData.publicPath)\n        }\n\n        let tokenToTransfer: @HWGarageTokenV2.NFT <-acct.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Provider}>(from: HWGarageTokenV2.CollectionStoragePath)!.withdraw(withdrawID: cardEditionID) as! @HWGarageTokenV2.NFT\n        HWGarageTokenV2.transfer(uuid: tokenToTransfer.uuid, id: tokenToTransfer.id, packSeriesId: tokenToTransfer.packSeriesID, tokenEditionId: tokenToTransfer.tokenEditionID,  toAddress: to)\n        getAccount(to).capabilities.get<&{NonFungibleToken.Receiver}>(HWGarageTokenV2.CollectionPublicPath).borrow()!.deposit(token: <-tokenToTransfer)\n\n    }\n    execute {\n    }\n}\n\n";
