export var transfer = "\n    import FungibleToken from 0xFungibleToken\n    import %ftContract% from address\n\n    transaction(recepient: Address, amount: UFix64){\n    let sentVault: @{FungibleToken.Vault}\n\n      prepare(signer: auth(BorrowValue) &Account){\n\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &%ftContract%.Vault>(from: %ftStoragePath%)\n          ?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        // Withdraw tokens from the signer's stored vault\n        self.sentVault <- vaultRef.withdraw(amount: amount)\n\n      }\n\n      execute {\n\n          // Get a reference to the recipient's Receiver\n          let receiverRef =  getAccount(recepient)\n              .capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver)\n                  ?? panic(\"Could not borrow receiver reference to the recipient's Vault\")\n\n          // Deposit the withdrawn tokens in the recipient's receiver\n          receiverRef.deposit(from: <-self.sentVault)\n      }\n    }\n  ";
