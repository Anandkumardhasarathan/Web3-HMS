import * as t from "@onflow/types";
import { prepareFees } from "../common/conver-fee-to-cadence";
import { fixAmount } from "../../common/fix-amount";
import { openBidTransactionCode } from "../../scripts/bid/bid";
import { prepareOrderCode } from "./prepare-order-code";
export function getBidCode(fcl, collectionName) {
    return {
        create: function (currency, itemId, price, fees) {
            return {
                cadence: prepareOrderCode(openBidTransactionCode.openBid, collectionName, currency),
                args: fcl.args([
                    fcl.arg(itemId, t.UInt64), fcl.arg(fixAmount(price), t.UFix64), fcl.arg(prepareFees(fees), t.Dictionary({
                        key: t.Address,
                        value: t.UFix64,
                    })),
                ]),
            };
        },
        update: function (currency, bidId, price, fees) {
            return {
                cadence: prepareOrderCode(openBidTransactionCode.updateBid, collectionName, currency),
                args: fcl.args([
                    fcl.arg(bidId, t.UInt64),
                    fcl.arg(fixAmount(price), t.UFix64),
                    fcl.arg(prepareFees(fees), t.Dictionary({
                        key: t.Address,
                        value: t.UFix64,
                    })),
                ]),
            };
        },
        close: function (currency, bidId, openBidAddress, fees) {
            return {
                cadence: prepareOrderCode(openBidTransactionCode.closeBid, collectionName, currency),
                args: fcl.args([
                    fcl.arg(bidId, t.UInt64), fcl.arg(openBidAddress, t.Address), fcl.arg(prepareFees(fees), t.Dictionary({
                        key: t.Address,
                        value: t.UFix64,
                    })),
                ]),
            };
        },
        cancel: function (bidId) {
            return {
                cadence: openBidTransactionCode.cancelBid,
                args: fcl.args([fcl.arg(bidId, t.UInt64)]),
            };
        },
    };
}
