import * as t from "@onflow/types";
import { barbieBuyTxCode, barbieListTxCode, barbieChangePriceTxCode, garageBuyTxCode, getGarageChangePriceTxCode, getGarageListTxCode, txUnlistItemStorefrontV2, gamisodesListTxCode, txInitVault, } from "../../scripts/nft";
import { fillCodeTemplate } from "../../common/template-replacer";
import { getNftCodeConfig } from "../../config/cadence-code-config";
import { gamisodesChangePriceTxCode } from "../../scripts/nft/gamisodes/change-price";
import { gamisodesBuyTxCode } from "../../scripts/nft/gamisodes/buy";
import { prepareOrderCode } from "./prepare-order-code";
export function isGarageCollection(collection) {
    return [
        "HWGaragePack",
        "HWGarageCard",
        "HWGarageCardV2",
        "HWGaragePackV2",
        "HWGarageTokenV2",
    ].includes(collection);
}
export function isBarbieCollection(collection) {
    return [
        "BBxBarbiePack",
        "BBxBarbieCard",
        "BBxBarbieToken",
    ].includes(collection);
}
export function isGamisodesCollection(collection) {
    return [
        "Gamisodes",
    ].includes(collection);
}
export function isWhitelabelCollection(collection) {
    return isGarageCollection(collection) || isBarbieCollection(collection) || isGamisodesCollection(collection);
}
export function getWhitelabelOrderCode(fcl, collectionName) {
    return {
        create: function (o) {
            var code;
            if (isGarageCollection(collectionName)) {
                code = getGarageListTxCode(o.collectionName, o.currency);
            }
            else if (isBarbieCollection(collectionName)) {
                code = barbieListTxCode(collectionName, o.currency);
            }
            else if (isGamisodesCollection(collectionName)) {
                code = gamisodesListTxCode(o.currency);
            }
            else {
                throw new Error("Unknown collection (".concat(collectionName, ")"));
            }
            return {
                cadence: prepareOrderCode(code, collectionName, o.currency),
                args: fcl.args([
                    fcl.arg(o.itemId, t.UInt64),
                    fcl.arg(o.saleItemPrice, t.UFix64),
                    fcl.arg(o.customID || null, t.Optional(t.String)),
                    fcl.arg(o.commissionAmount, t.UFix64),
                    fcl.arg(o.expiry, t.UInt64),
                    fcl.arg(o.marketplacesAddress, t.Array(t.Address)),
                ]),
            };
        },
        update: function (o) {
            var code;
            if (isGarageCollection(collectionName)) {
                code = getGarageChangePriceTxCode(o.collectionName, o.currency);
            }
            else if (isBarbieCollection(collectionName)) {
                code = barbieChangePriceTxCode(collectionName, o.currency);
            }
            else if (isGamisodesCollection(collectionName)) {
                code = gamisodesChangePriceTxCode(o.currency);
            }
            else {
                throw new Error("Unknown collection (".concat(collectionName, ")"));
            }
            return {
                cadence: prepareOrderCode(code, collectionName, o.currency),
                args: fcl.args([
                    fcl.arg(o.orderId, t.UInt64),
                    fcl.arg(o.itemId, t.UInt64),
                    fcl.arg(o.saleItemPrice, t.UFix64),
                    fcl.arg(o.customID || null, t.Optional(t.String)),
                    fcl.arg(o.commissionAmount, t.UFix64),
                    fcl.arg(o.expiry, t.UInt64),
                    fcl.arg(o.marketplacesAddress, t.Array(t.Address)),
                ]),
            };
        },
        buy: function (o) {
            var code;
            if (isGarageCollection(collectionName)) {
                code = garageBuyTxCode;
            }
            else if (isBarbieCollection(collectionName)) {
                code = barbieBuyTxCode;
            }
            else if (isGamisodesCollection(collectionName)) {
                code = gamisodesBuyTxCode;
            }
            else {
                throw new Error("Unknown collection (".concat(collectionName, ")"));
            }
            return {
                cadence: prepareOrderCode(code, collectionName, o.currency),
                args: fcl.args([
                    fcl.arg(o.orderId, t.UInt64),
                    fcl.arg(o.address, t.Address),
                    fcl.arg(o.comissionRecipient || null, t.Optional(t.Address)),
                ]),
            };
        },
        cancel: function (orderId) {
            return {
                cadence: fillCodeTemplate(txUnlistItemStorefrontV2, getNftCodeConfig(collectionName)),
                args: fcl.args([fcl.arg(orderId, t.UInt64)]),
            };
        },
        setupVault: function () {
            return {
                cadence: fillCodeTemplate(txInitVault, getNftCodeConfig(collectionName)),
                args: fcl.args([]),
            };
        },
    };
}
