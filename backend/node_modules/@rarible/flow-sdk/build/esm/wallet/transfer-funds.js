import { __awaiter, __generator } from "tslib";
import * as t from "@onflow/types";
import { runTransaction, waitForSeal } from "../common/transaction";
import { CONFIGS } from "../config/config";
import { fixAmount } from "../common/fix-amount";
import { prepareFtCode } from "../tx-code-store/order/prepare-order-code";
import { transfer } from "../scripts/wallet/transfer";
export function transferFunds(fcl, network, auth, request) {
    return __awaiter(this, void 0, void 0, function () {
        var txId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!fcl) return [3 /*break*/, 3];
                    return [4 /*yield*/, runTransaction(fcl, CONFIGS[network].mainAddressMap, {
                            cadence: prepareFtCode(transfer, request.currency),
                            args: fcl.args([
                                fcl.arg(request.recipient, t.Address),
                                fcl.arg(fixAmount(request.amount.toString()), t.UFix64),
                            ]),
                        }, auth)];
                case 1:
                    txId = _a.sent();
                    return [4 /*yield*/, waitForSeal(fcl, txId)];
                case 2: return [2 /*return*/, _a.sent()];
                case 3: throw new Error("Fcl is required for transfer Flow");
            }
        });
    });
}
