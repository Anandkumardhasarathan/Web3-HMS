"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleAxiosErrorResponse = exports.handleFetchErrorResponse = exports.NetworkError = exports.Warning = void 0;
var tslib_1 = require("tslib");
// eslint-disable-next-line unicorn/custom-error-definition
var Warning = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(Warning, _super);
    function Warning(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, Warning.prototype);
        _this.name = "Warning";
        return _this;
    }
    return Warning;
}(Error));
exports.Warning = Warning;
var NetworkError = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(NetworkError, _super);
    function NetworkError(options) {
        var _this = _super.call(this, JSON.stringify(options, null, " ")) || this;
        Object.setPrototypeOf(_this, NetworkError.prototype);
        _this.name = "NetworkError";
        _this.code = options.code || "NETWORK_ERR";
        _this.status = options.status;
        _this.url = options.url;
        _this.data = options.data;
        _this.formData = options.formData;
        _this.method = options.method;
        return _this;
    }
    return NetworkError;
}(Error));
exports.NetworkError = NetworkError;
function handleFetchErrorResponse(response, options) {
    var _a, _b, _c;
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var data;
        return (0, tslib_1.__generator)(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!(isFetchResponse(response) && !response.ok)) return [3 /*break*/, 2];
                    return [4 /*yield*/, response
                            .clone()
                            .json()
                            .catch(function () { return response.clone().text(); })
                            .catch(function () { return "unknown error"; })];
                case 1:
                    data = _d.sent();
                    throw new NetworkError({
                        status: response.status,
                        url: decodeURIComponent(response.url),
                        data: data,
                        formData: (_b = (_a = options === null || options === void 0 ? void 0 : options.requestInit) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.toString(),
                        method: (_c = options === null || options === void 0 ? void 0 : options.requestInit) === null || _c === void 0 ? void 0 : _c.method,
                        code: options === null || options === void 0 ? void 0 : options.code,
                    });
                case 2: return [2 /*return*/];
            }
        });
    });
}
exports.handleFetchErrorResponse = handleFetchErrorResponse;
function isFetchResponse(response) {
    return typeof response === "object" && response !== null && "ok" in response;
}
function handleAxiosErrorResponse(error, options) {
    if (isAxiosError(error)) {
        throw createAxiosNetworkError(error, options === null || options === void 0 ? void 0 : options.code);
    }
}
exports.handleAxiosErrorResponse = handleAxiosErrorResponse;
function decodeUri(url) {
    return url ? decodeURIComponent(url) : "unknown-url";
}
function isAxiosError(e) {
    return typeof e === "object" && e !== null && "isAxiosError" in e;
}
function createAxiosNetworkError(error, code) {
    var _a, _b;
    if (error.response) {
        return new NetworkError({
            status: error.response.status,
            url: decodeUri(error.config.url),
            data: error.response.data,
            formData: error.config.data,
            method: error.config.method,
            code: code,
        });
    }
    if (error.request) {
        return new NetworkError({
            status: (_a = error.request) === null || _a === void 0 ? void 0 : _a.status,
            url: decodeUri(error.config.url),
            data: (_b = error.request) === null || _b === void 0 ? void 0 : _b.readyState,
            formData: error.config.data,
            method: error.config.method,
            code: code,
        });
    }
    return new NetworkError({
        status: -1,
        url: "unknown",
        data: "none",
        formData: undefined,
        method: "unknown",
        code: code,
    });
}
