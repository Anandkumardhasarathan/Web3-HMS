"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deprecatedMethodAction = exports.deprecatedMethod = exports.getDeprecatedAction = exports.DeprecatedMethodError = exports.getDeprecatedMethodFn = exports.nonImplementedAction = exports.notImplemented = exports.getNonImplementedAction = exports.NotImplementedError = exports.getNotImplementedFn = void 0;
const action_1 = require("@rarible/action");
function getNotImplementedFn(message = "Not implemented") {
    return () => {
        throw new NotImplementedError(message);
    };
}
exports.getNotImplementedFn = getNotImplementedFn;
class NotImplementedError extends Error {
    constructor(message) {
        super(message);
        this.name = "NotImplementedError";
        Object.setPrototypeOf(this, NotImplementedError.prototype);
    }
}
exports.NotImplementedError = NotImplementedError;
function getNonImplementedAction(msg) {
    return action_1.Action.create({
        id: "non-implemented",
        run: getNotImplementedFn(msg),
    });
}
exports.getNonImplementedAction = getNonImplementedAction;
exports.notImplemented = getNotImplementedFn();
exports.nonImplementedAction = getNonImplementedAction();
function getDeprecatedMethodFn(message = "Deprecated method") {
    return () => {
        throw new DeprecatedMethodError(message);
    };
}
exports.getDeprecatedMethodFn = getDeprecatedMethodFn;
class DeprecatedMethodError extends Error {
    constructor(message) {
        super(message);
        this.name = "DeprecatedMethodError";
        Object.setPrototypeOf(this, DeprecatedMethodError.prototype);
    }
}
exports.DeprecatedMethodError = DeprecatedMethodError;
function getDeprecatedAction(msg) {
    return action_1.Action.create({
        id: "non-implemented",
        run: getDeprecatedMethodFn(msg),
    });
}
exports.getDeprecatedAction = getDeprecatedAction;
exports.deprecatedMethod = getDeprecatedMethodFn();
exports.deprecatedMethodAction = getDeprecatedAction();
