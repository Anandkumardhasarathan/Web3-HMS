"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.conditionalRetry = exports.delay = exports.retry = void 0;
function retry(num, del, thunk) {
    return thunk().catch(error => {
        if (num === 0) {
            throw error;
        }
        return delay(del).then(() => retry(num - 1, del, thunk));
    });
}
exports.retry = retry;
function delay(num) {
    return new Promise(r => setTimeout(r, num));
}
exports.delay = delay;
/**
 * Retry with conditions (for catching and skipping special errors)
 * @param num attempts amount
 * @param del delay
 * @param thunk retrying function
 * @param conditionCallback if callbacks returns true, proceed retrying
 */
function conditionalRetry(num, del, thunk, conditionCallback) {
    return thunk().catch(error => {
        if (num === 0 || !conditionCallback(error)) {
            throw error;
        }
        return delay(del).then(() => conditionalRetry(num - 1, del, thunk, conditionCallback));
    });
}
exports.conditionalRetry = conditionalRetry;
