"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasVersion = exports.hasCode = exports.hasName = exports.isObjectLike = exports.getMajorVersion = exports.getDappType = exports.DappType = void 0;
var DappType;
(function (DappType) {
    DappType["AlphaWallet"] = "AlphaWallet";
    DappType["AToken"] = "AToken";
    DappType["Binance"] = "Binance Smart Wallet";
    DappType["Bitpie"] = "Bitpie";
    DappType["BlockWallet"] = "BlockWallet";
    DappType["Brave"] = "Brave";
    DappType["Coinbase"] = "Coinbase Wallet";
    DappType["CoinbaseBrowser"] = "Coinbase Browser";
    DappType["Dcent"] = "D'CENT";
    DappType["Frame"] = "Frame";
    DappType["HuobiWallet"] = "Huobi Wallet";
    DappType["LedgerConnect"] = "Ledger Connect";
    DappType["HyperPay"] = "HyperPay";
    DappType["ImToken"] = "imToken";
    DappType["Liquality"] = "Liquality";
    DappType["MeetOne"] = "MeetOne";
    DappType["Metamask"] = "Metamask";
    DappType["MyKey"] = "MyKey";
    DappType["Opera"] = "Opera Wallet";
    DappType["OwnBit"] = "OwnBit";
    DappType["Status"] = "Status Wallet";
    DappType["Trust"] = "Trust Wallet";
    DappType["TokenPocket"] = "TokenPocket";
    DappType["TP"] = "TP Wallet";
    DappType["WalletIo"] = "Wallet.io";
    DappType["XDEFI"] = "XDEFI Wallet";
    DappType["OneInch"] = "1inch Wallet";
    DappType["Tokenary"] = "Tokenary Wallet";
    DappType["Tally"] = "Tally Wallet";
    DappType["GameStop"] = "Game Stop";
    DappType["Dapper"] = "Dapper";
    DappType["Cipher"] = "Cipher";
    DappType["Mist"] = "Mist";
    DappType["Parity"] = "Parity";
    DappType["Mock"] = "Mock";
    DappType["Generic"] = "Web3";
    DappType["Unknown"] = "Unknown";
})(DappType || (exports.DappType = DappType = {}));
function getDappType(provider) {
    var _a, _b, _c;
    if (!provider)
        return undefined;
    if (provider.isAlphaWallet)
        return DappType.AlphaWallet;
    if (provider.isAToken)
        return DappType.AToken;
    if (provider.bbcSignTx)
        return DappType.Binance;
    if (provider.isBitpie)
        return DappType.Bitpie;
    if (provider.isBlockWallet)
        return DappType.BlockWallet;
    if (provider.isCoinbaseBrowser)
        return DappType.CoinbaseBrowser;
    if (provider.isCoinbaseWallet)
        return DappType.Coinbase;
    if (provider.isDcentWallet)
        return DappType.Dcent;
    if (provider.isFrame)
        return DappType.Frame;
    if (provider.isHbWallet)
        return DappType.HuobiWallet;
    if (provider.isHyperPay)
        return DappType.HyperPay;
    if (provider.isImToken)
        return DappType.ImToken;
    if (provider.isLiquality)
        return DappType.Liquality;
    if (provider.wallet)
        return DappType.MeetOne;
    if (provider.isMYKEY)
        return DappType.MyKey;
    if (provider.isOwnbit)
        return DappType.OwnBit;
    if (provider.isStatus)
        return DappType.Status;
    if (provider.isTrust)
        return DappType.Trust;
    if (provider.isTokenPocket)
        return DappType.TokenPocket;
    if (provider.isTp)
        return DappType.TP;
    if (provider.isWalletIO)
        return DappType.WalletIo;
    if (provider.isXDEFI)
        return DappType.XDEFI;
    if (provider.isOneInchIOSWallet)
        return DappType.OneInch;
    if (provider.isTokenary)
        return DappType.Tokenary;
    if (provider.isTally)
        return DappType.Tally;
    if (provider.isBraveWallet)
        return DappType.Brave;
    if (provider.isOpera)
        return DappType.Opera;
    if (provider.isLedgerConnect)
        return DappType.LedgerConnect;
    if (provider.isMetaMask)
        return DappType.Metamask;
    if (provider.isGamestop)
        return DappType.GameStop;
    if (((_a = provider === null || provider === void 0 ? void 0 : provider.constructor) === null || _a === void 0 ? void 0 : _a.name) === "Web3ProviderEngine")
        return DappType.Mock;
    if (((_b = provider === null || provider === void 0 ? void 0 : provider.constructor) === null || _b === void 0 ? void 0 : _b.name) === "EthereumProvider")
        return DappType.Mist;
    if (((_c = provider === null || provider === void 0 ? void 0 : provider.constructor) === null || _c === void 0 ? void 0 : _c.name) === "Web3FrameProvider")
        return DappType.Parity;
    return DappType.Unknown;
}
exports.getDappType = getDappType;
function getMajorVersion(version) {
    if (!version)
        return "";
    const components = version === null || version === void 0 ? void 0 : version.split(".");
    const [major] = components;
    return major;
}
exports.getMajorVersion = getMajorVersion;
function isObjectLike(x) {
    return typeof x === "object" && x !== null;
}
exports.isObjectLike = isObjectLike;
function hasName(x) {
    return isObjectLike(x) && "name" in x;
}
exports.hasName = hasName;
function hasCode(error) {
    return isObjectLike(error) && "code" in error;
}
exports.hasCode = hasCode;
function hasVersion(x) {
    return isObjectLike(x) && "version" in x;
}
exports.hasVersion = hasVersion;
