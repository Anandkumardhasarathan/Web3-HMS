"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchainAptosTransaction = void 0;
const tslib_1 = require("tslib");
const ts_sdk_1 = require("@aptos-labs/ts-sdk");
const api_client_1 = require("@rarible/api-client");
class BlockchainAptosTransaction {
    constructor(transaction, network, sdk) {
        this.transaction = transaction;
        this.network = network;
        this.sdk = sdk;
        this.blockchain = api_client_1.Blockchain.APTOS;
        this.hash = () => this.transaction.hash;
        this.wait = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.transaction.type === ts_sdk_1.TransactionResponseType.Pending) {
                yield this.sdk.waitForTransaction(this.transaction.hash);
            }
            return {
                blockchain: this.blockchain,
                hash: this.transaction.hash,
            };
        });
        this.getTxLink = () => {
            switch (this.network) {
                case ts_sdk_1.Network.TESTNET:
                    return `https://explorer.aptoslabs.com/txn/${this.hash()}?network=testnet`;
                case ts_sdk_1.Network.MAINNET:
                    return `https://explorer.aptoslabs.com/txn/${this.hash()}?network=mainnet`;
                default:
                    throw new Error("Unsupported transaction network");
            }
        };
    }
    get isEmpty() {
        return false;
    }
}
exports.BlockchainAptosTransaction = BlockchainAptosTransaction;
