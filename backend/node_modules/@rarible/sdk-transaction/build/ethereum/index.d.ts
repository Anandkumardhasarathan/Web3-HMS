import type { Blockchain } from "@rarible/api-client";
import type { EthereumTransaction } from "@rarible/ethereum-provider";
import type { EthereumNetwork } from "@rarible/protocol-ethereum-sdk/build/types";
import type { IBlockchainTransaction } from "../domain";
export declare class BlockchainEthereumTransaction<TransactionResult = undefined> implements IBlockchainTransaction<Blockchain, TransactionResult> {
    transaction: EthereumTransaction;
    network: EthereumNetwork;
    resultExtractor?: ((getEvents: EthereumTransaction["getEvents"]) => Promise<TransactionResult | undefined>) | undefined;
    blockchain: Blockchain;
    chainId: number;
    constructor(transaction: EthereumTransaction, network: EthereumNetwork, resultExtractor?: ((getEvents: EthereumTransaction["getEvents"]) => Promise<TransactionResult | undefined>) | undefined);
    hash: () => import("@rarible/api-client").Word;
    wait: () => Promise<{
        blockchain: Blockchain;
        hash: import("@rarible/api-client").Word;
        events: import("@rarible/ethereum-provider").EthereumTransactionEvent[];
        result: Awaited<TransactionResult> | undefined;
    }>;
    getTxLink: () => string;
    get isEmpty(): boolean;
    private getBlockchain;
    static isInstance(original: unknown): boolean;
}
