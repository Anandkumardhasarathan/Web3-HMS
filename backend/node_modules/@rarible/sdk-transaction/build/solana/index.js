"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchainSolanaTransaction = void 0;
const tslib_1 = require("tslib");
const api_client_1 = require("@rarible/api-client");
class BlockchainSolanaTransaction {
    constructor(transaction, sdk, blockchain = api_client_1.Blockchain.SOLANA) {
        this.transaction = transaction;
        this.cluster = sdk.cluster;
        this.getSdk = () => sdk; // to hide sdk from json.stringify
        this.blockchain = blockchain;
    }
    hash() {
        return this.transaction.txId;
    }
    wait() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const RETRIES_COUNT = 4;
            const check = (retryCount) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                try {
                    // can fail after 30 sec timeout
                    const res = yield this.getSdk().confirmTransaction(this.transaction.txId, "confirmed");
                    if ((_a = res.value) === null || _a === void 0 ? void 0 : _a.err) {
                        if (typeof res.value.err === "string") {
                            throw new Error(res.value.err);
                        }
                        else {
                            throw res.value.err;
                        }
                    }
                }
                catch (e) {
                    if (((_b = e === null || e === void 0 ? void 0 : e.message) === null || _b === void 0 ? void 0 : _b.includes("Transaction was not confirmed in")) && retryCount > 0) {
                        yield check(retryCount - 1);
                    }
                    else {
                        throw e;
                    }
                }
            });
            yield check(RETRIES_COUNT);
            return {
                blockchain: this.blockchain,
                hash: this.transaction.txId,
            };
        });
    }
    getTxLink() {
        const url = `https://solscan.io/tx/${this.hash()}`;
        switch (this.cluster) {
            case "mainnet-beta":
                return url;
            case "testnet":
            case "devnet":
                return url + `?cluster=${this.cluster}`;
            default:
                throw new Error("Unsupported transaction network");
        }
    }
    get isEmpty() {
        return false;
    }
}
exports.BlockchainSolanaTransaction = BlockchainSolanaTransaction;
