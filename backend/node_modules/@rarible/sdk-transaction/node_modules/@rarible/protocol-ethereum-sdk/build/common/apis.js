"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApis = exports.createEthereumApis = void 0;
const tslib_1 = require("tslib");
const EthereumApiClient = tslib_1.__importStar(require("@rarible/ethereum-api-client"));
const build_1 = require("@rarible/logger/build");
const api_config_1 = require("../config/api-config");
const index_1 = require("./index");
function createEthereumApis(env, params = {}) {
    const config = (0, api_config_1.getApiConfig)(env, Object.assign({ headers: typeof params.apiKey === "string" ? { "X-API-KEY": params.apiKey } : {}, exceptionHandler: (error, url, init) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            throw new build_1.NetworkError({
                status: -1,
                url: decodeURIComponent(url),
                formData: (_a = init === null || init === void 0 ? void 0 : init.body) === null || _a === void 0 ? void 0 : _a.toString(),
                method: init === null || init === void 0 ? void 0 : init.method,
                data: { message: error.message },
            });
        }) }, params));
    const configuration = new EthereumApiClient.Configuration(config);
    return {
        nftItem: new EthereumApiClient.NftItemControllerApi(configuration),
        nftOwnership: new EthereumApiClient.NftOwnershipControllerApi(configuration),
        order: new EthereumApiClient.OrderControllerApi(configuration),
        orderActivity: new EthereumApiClient.OrderActivityControllerApi(configuration),
        orderSignature: new EthereumApiClient.OrderSignatureControllerApi(configuration),
        orderSettings: new EthereumApiClient.OrderSettingsControllerApi(configuration),
        nftCollection: new EthereumApiClient.NftCollectionControllerApi(configuration),
        balances: new EthereumApiClient.BalanceControllerApi(configuration),
        gateway: new EthereumApiClient.GatewayControllerApi(configuration),
        nftLazyMint: new EthereumApiClient.NftLazyMintControllerApi(configuration),
    };
}
exports.createEthereumApis = createEthereumApis;
function getApis(ethereum, env, sdkConfig) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let apisEnv;
        if (ethereum) {
            const chainId = yield ethereum.getChainId();
            apisEnv = (0, index_1.getNetworkFromChainId)(chainId);
        }
        else {
            apisEnv = env;
        }
        return createEthereumApis(apisEnv, Object.assign(Object.assign({}, ((sdkConfig === null || sdkConfig === void 0 ? void 0 : sdkConfig.apiClientParams) || {})), { apiKey: sdkConfig === null || sdkConfig === void 0 ? void 0 : sdkConfig.apiKey }));
    });
}
exports.getApis = getApis;
