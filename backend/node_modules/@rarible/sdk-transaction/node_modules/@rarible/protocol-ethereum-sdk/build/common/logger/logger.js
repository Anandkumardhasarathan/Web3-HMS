"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkErrorCode = exports.createRemoteLogger = exports.getErrorMessageString = exports.getEnvironment = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const build_1 = require("@rarible/logger/build");
const utils_1 = require("@rarible/utils");
const packageJson = require("../../../package.json");
/**
 * Convert network name to stage environment name
 *
 * @param network
 */
function getEnvironment(network) {
    switch (network) {
        case "mainnet":
        case "polygon":
            return "prod";
        case "mumbai":
            return "staging";
        case "testnet":
        default:
            return "testnet";
    }
}
exports.getEnvironment = getEnvironment;
const loggerConfig = {
    service: "ethereum-sdk",
    elkUrl: "https://logging.rarible.com/",
};
function getErrorMessageString(err) {
    if (!err) {
        return "not defined";
    }
    else if (typeof err === "string") {
        return err;
    }
    else if (err instanceof Error) {
        return err.message;
    }
    else if (err.message) {
        return typeof err.message === "string" ? err.message : JSON.stringify(err.message);
    }
    else if (err.status !== undefined && err.statusText !== undefined) {
        return JSON.stringify({
            url: err.url,
            status: err.status,
            statusText: err.statusText,
        });
    }
    else {
        return JSON.stringify(err);
    }
}
exports.getErrorMessageString = getErrorMessageString;
function createRemoteLogger(context) {
    const getContext = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f;
        const data = {
            service: loggerConfig.service,
            environment: context.env,
            sessionId: (_a = context.sessionId) !== null && _a !== void 0 ? _a : (0, utils_1.getRandomId)("ethereum"),
            version: packageJson.version,
            web3Address: (_c = (yield ((_b = context.ethereum) === null || _b === void 0 ? void 0 : _b.getFrom()))) !== null && _c !== void 0 ? _c : "unknown",
            ethNetwork: (_f = (_e = (yield ((_d = context.ethereum) === null || _d === void 0 ? void 0 : _d.getChainId()))) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : "unknown",
        };
        if (context.apiKey !== undefined) {
            data.apiKey = context.apiKey;
        }
        return data;
    });
    return new build_1.RemoteLogger(msg => axios_1.default.post(loggerConfig.elkUrl, msg), {
        initialContext: getContext(),
        maxByteSize: 5 * 10240,
    });
}
exports.createRemoteLogger = createRemoteLogger;
var NetworkErrorCode;
(function (NetworkErrorCode) {
    NetworkErrorCode["ETHEREUM_EXTERNAL_ERR"] = "ETHEREUM_EXTERNAL_ERR";
})(NetworkErrorCode || (exports.NetworkErrorCode = NetworkErrorCode = {}));
