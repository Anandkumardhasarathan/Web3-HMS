"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.alephzeroTestnetConfig = void 0;
const types_1 = require("@rarible/types");
const api_client_1 = require("@rarible/api-client");
const id_1 = require("../common/id");
const utils_1 = require("./utils");
exports.alephzeroTestnetConfig = (0, utils_1.extendConfig)({
    basePath: "https://testnet-alephzero-api.rarible.org",
    chainId: 2039,
    environment: "testnet",
    blockchain: api_client_1.Blockchain.ALEPHZERO,
    exchange: {
        v2: (0, types_1.toEVMAddress)("0x6667b5ce062115651b0a6f499ac3f24A2DdFCB72"),
        wrapper: (0, types_1.toEVMAddress)("0x1385a6B618f172d6735DE3e1E4222592f58b053B"),
    },
    transferProxies: {
        nft: (0, types_1.toEVMAddress)("0xDa381535565B97640a6453fA7A1A7b161AF78cbE"),
        erc20: (0, types_1.toEVMAddress)("0x3d3c8f3aCcf388c3618BbE80598692B6d15bd4D5"),
        erc721Lazy: (0, types_1.toEVMAddress)("0x4e045aBF1e239BfA224c8DCb8F889C3d447D3804"),
        erc1155Lazy: (0, types_1.toEVMAddress)("0x2eBecaBBbe8a8C629b99aB23ed154d74CD5d4342"),
    },
    openSea: {
        metadata: (0, id_1.id32)("RARIBLE"),
    },
    factories: {
        erc721: (0, types_1.toEVMAddress)("0xB02f8F8F3527e5b2C7dB72B7eE1Af244fA8B3BAE"),
        erc1155: (0, types_1.toEVMAddress)("0x7Eabe83e0F99B6bf24Ec3F50994B972DC38D11dF"),
    },
    weth: (0, types_1.toEVMAddress)("0xcC1141eEd15EB519b08cA38A2Ee75AB8025F0DA9"),
});
