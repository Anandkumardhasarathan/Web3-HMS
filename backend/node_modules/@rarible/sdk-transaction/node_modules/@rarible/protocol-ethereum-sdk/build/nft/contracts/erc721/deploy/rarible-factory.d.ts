import type { Web3, Web3EthContractTypes } from "@rarible/web3-v4-ethereum";
import type { EVMAddress } from "@rarible/types";
import type { Ethereum, EthereumContract } from "@rarible/ethereum-provider";
export declare function createErc721FactoryContract(ethereum: Ethereum, address?: EVMAddress): EthereumContract;
export declare function createTestRaribleFactoryContract(web3: Web3, address?: EVMAddress): Web3EthContractTypes.Contract<typeof erc721RaribleFactoryABI>;
export declare const erc721RaribleFactoryABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_beacon";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_transferProxy";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_lazyTransferProxy";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "proxy";
        readonly type: "address";
    }];
    readonly name: "Create721RaribleProxy";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "previousOwner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "OwnershipTransferred";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "beacon";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
    readonly constant: true;
}, {
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
    readonly constant: true;
}, {
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "_name";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "_symbol";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "baseURI";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "contractURI";
        readonly type: "string";
    }, {
        readonly internalType: "uint256";
        readonly name: "salt";
        readonly type: "uint256";
    }];
    readonly name: "createToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "_name";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "_symbol";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "baseURI";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "contractURI";
        readonly type: "string";
    }, {
        readonly internalType: "uint256";
        readonly name: "_salt";
        readonly type: "uint256";
    }];
    readonly name: "getAddress";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
    readonly constant: true;
}];
