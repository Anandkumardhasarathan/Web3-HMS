"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErc721Contract = void 0;
const tslib_1 = require("tslib");
const domain_1 = require("../domain");
function getErc721Contract(ethereum, version, address) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (version) {
            case domain_1.ERC721VersionEnum.ERC721V3: {
                const { erc721v3Abi } = yield Promise.resolve().then(() => tslib_1.__importStar(require("./v3")));
                return ethereum.createContract(erc721v3Abi, address);
            }
            case domain_1.ERC721VersionEnum.ERC721V2: {
                const { erc721v2Abi } = yield Promise.resolve().then(() => tslib_1.__importStar(require("./v2")));
                return ethereum.createContract(erc721v2Abi, address);
            }
            case domain_1.ERC721VersionEnum.ERC721V1: {
                const { erc721v1Abi } = yield Promise.resolve().then(() => tslib_1.__importStar(require("./v1")));
                return ethereum.createContract(erc721v1Abi, address);
            }
            default:
                throw new Error("Unsupported ERC721 version");
        }
    });
}
exports.getErc721Contract = getErc721Contract;
