"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployErc1155 = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@rarible/types");
const rarible_factory_1 = require("./contracts/erc1155/deploy/rarible-factory");
const rarible_user_factory_1 = require("./contracts/erc1155/deploy/rarible-user-factory");
class DeployErc1155 {
    constructor(ethereum, send, getConfig) {
        this.ethereum = ethereum;
        this.send = send;
        this.getConfig = getConfig;
        this.deployToken = this.deployToken.bind(this);
        this.deployUserToken = this.deployUserToken.bind(this);
    }
    deployToken(name, symbol, baseURI, contractURI) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            if (!this.ethereum) {
                throw new Error("Wallet undefined");
            }
            const config = yield this.getConfig();
            const contract = (0, rarible_factory_1.createErc1155FactoryContract)(this.ethereum, config.factories.erc1155);
            const salt = (0, types_1.randomWord)();
            const tx = yield this.send(contract.functionCall("createToken", name, symbol, baseURI, contractURI, salt));
            const events = yield tx.getEvents();
            const proxyEvent = events.find(e => e.event === "Create1155RaribleProxy");
            if (!proxyEvent) {
                throw new Error("Event 'Create1155RaribleProxy' has not been found");
            }
            return {
                tx,
                address: ((_a = proxyEvent.args) === null || _a === void 0 ? void 0 : _a.proxy) || ((_b = proxyEvent.returnValues) === null || _b === void 0 ? void 0 : _b.proxy),
            };
        });
    }
    deployUserToken(name, symbol, baseURI, contractURI, operators) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            if (!this.ethereum) {
                throw new Error("Wallet undefined");
            }
            const config = yield this.getConfig();
            const contract = (0, rarible_user_factory_1.createErc1155UserFactoryContract)(this.ethereum, config.factories.erc1155);
            const salt = (0, types_1.randomWord)();
            const tx = yield this.send(contract.functionCall("createToken", name, symbol, baseURI, contractURI, operators, salt));
            const events = yield tx.getEvents();
            const proxyEvent = events.find(e => e.event === "Create1155RaribleUserProxy");
            if (!proxyEvent) {
                throw new Error("Event 'Create1155RaribleProxy' has not been found");
            }
            return {
                tx,
                address: ((_a = proxyEvent.args) === null || _a === void 0 ? void 0 : _a.proxy) || ((_b = proxyEvent.returnValues) === null || _b === void 0 ? void 0 : _b.proxy),
            };
        });
    }
}
exports.DeployErc1155 = DeployErc1155;
