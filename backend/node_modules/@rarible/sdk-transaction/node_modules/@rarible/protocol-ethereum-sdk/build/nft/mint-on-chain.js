"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCreators = exports.mintErc1155v2 = exports.mintErc1155v1 = exports.mintErc721v3 = exports.mintErc721v2 = exports.mintErc721v1 = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@rarible/types");
const create_item_id_1 = require("../common/create-item-id");
const sanitize_uri_1 = require("../common/sanitize-uri");
const mint_1 = require("./mint");
const get_token_id_1 = require("./get-token-id");
const erc721_1 = require("./contracts/erc721");
const domain_1 = require("./contracts/domain");
const erc1155_1 = require("./contracts/erc1155");
function mintErc721v1(ethereum, send, nftCollectionApi, data) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const owner = (0, types_1.toEVMAddress)(yield ethereum.getFrom());
        const erc721Contract = yield (0, erc721_1.getErc721Contract)(ethereum, domain_1.ERC721VersionEnum.ERC721V1, data.collection.id);
        const nftTokenId = yield (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId);
        const { tokenId, signature: { v, r, s }, } = nftTokenId;
        const uriPrefix = yield erc721Contract.functionCall("tokenURIPrefix").call();
        const uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
        const transaction = yield send(erc721Contract.functionCall("mint", tokenId, v, r, s, uri));
        return createMintOnChainResponse({
            transaction,
            tokenId,
            contract: data.collection.id,
            owner,
            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
        });
    });
}
exports.mintErc721v1 = mintErc721v1;
function mintErc721v2(ethereum, send, nftCollectionApi, data) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const owner = (0, types_1.toEVMAddress)(yield ethereum.getFrom());
        const erc721Contract = yield (0, erc721_1.getErc721Contract)(ethereum, domain_1.ERC721VersionEnum.ERC721V2, data.collection.id);
        const nftTokenId = yield (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId);
        const { tokenId, signature: { v, r, s }, } = nftTokenId;
        const royalties = (data.royalties || []).map(x => ({ recipient: x.account, value: x.value }));
        const uriPrefix = yield erc721Contract.functionCall("tokenURIPrefix").call();
        const uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
        const transaction = yield send(erc721Contract.functionCall("mint", tokenId, v, r, s, royalties, uri));
        return createMintOnChainResponse({
            transaction,
            tokenId,
            contract: data.collection.id,
            owner,
            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
        });
    });
}
exports.mintErc721v2 = mintErc721v2;
function mintErc721v3(ethereum, send, nftCollectionApi, data) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const creators = yield getCreators(data, ethereum);
        const owner = creators[0].account;
        const erc721Contract = yield (0, erc721_1.getErc721Contract)(ethereum, domain_1.ERC721VersionEnum.ERC721V3, data.collection.id);
        const uriPrefix = yield erc721Contract.functionCall("baseURI").call();
        const uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
        const { tokenId } = yield (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId);
        const args = {
            tokenId,
            tokenURI: uri,
            creators,
            royalties: data.royalties || [],
            signatures: ["0x"],
        };
        const transaction = yield send(erc721Contract.functionCall("mintAndTransfer", args, owner));
        return createMintOnChainResponse({
            transaction,
            tokenId,
            contract: data.collection.id,
            owner,
            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
        });
    });
}
exports.mintErc721v3 = mintErc721v3;
function mintErc1155v1(ethereum, send, nftCollectionApi, data) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const owner = (0, types_1.toEVMAddress)(yield ethereum.getFrom());
        const erc155Contract = yield (0, erc1155_1.getErc1155Contract)(ethereum, domain_1.ERC1155VersionEnum.ERC1155V1, data.collection.id);
        const nftTokenId = yield (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId);
        const { tokenId, signature: { v, r, s }, } = nftTokenId;
        const royalties = (data.royalties || []).map(x => ({ recipient: x.account, value: x.value }));
        const uriPrefix = yield erc155Contract.functionCall("tokenURIPrefix").call();
        const uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
        const transaction = yield send(erc155Contract.functionCall("mint", tokenId, v, r, s, royalties, data.supply, uri));
        return createMintOnChainResponse({
            transaction,
            tokenId,
            contract: data.collection.id,
            owner,
            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
        });
    });
}
exports.mintErc1155v1 = mintErc1155v1;
function mintErc1155v2(ethereum, send, nftCollectionApi, data) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const creators = yield getCreators(data, ethereum);
        const owner = creators[0].account;
        const erc1155Contract = yield (0, erc1155_1.getErc1155Contract)(ethereum, domain_1.ERC1155VersionEnum.ERC1155V2, data.collection.id);
        const { tokenId } = yield (0, get_token_id_1.getTokenId)(nftCollectionApi, data.collection.id, owner, data.nftTokenId);
        const uriPrefix = yield erc1155Contract.functionCall("baseURI").call();
        const uri = (0, sanitize_uri_1.sanitizeUri)(uriPrefix, data.uri);
        const args = {
            tokenId,
            tokenURI: uri,
            supply: data.supply,
            creators: creators,
            royalties: data.royalties || [],
            signatures: ["0x"],
        };
        const transaction = yield send(erc1155Contract.functionCall("mintAndTransfer", args, owner, data.supply));
        return createMintOnChainResponse({
            transaction,
            tokenId,
            contract: data.collection.id,
            owner,
            itemId: (0, create_item_id_1.createItemId)(data.collection.id, tokenId),
        });
    });
}
exports.mintErc1155v2 = mintErc1155v2;
function getCreators(data, ethereum) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (data.creators && data.creators.length > 0) {
            return data.creators;
        }
        const account = (0, types_1.toEVMAddress)(yield ethereum.getFrom());
        return [
            {
                account,
                value: 10000,
            },
        ];
    });
}
exports.getCreators = getCreators;
function createMintOnChainResponse(props) {
    return Object.assign({ type: mint_1.MintResponseTypeEnum.ON_CHAIN }, props);
}
