"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signNft = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@rarible/types");
const eip712_1 = require("./eip712");
function signNft(ethereum, getConfig, nft) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!ethereum) {
            throw new Error("Wallet undefined");
        }
        const config = yield getConfig();
        switch (nft["@type"]) {
            case "ERC721": {
                const domain = createEIP712NftDomain(config.chainId, nft.contract, "ERC721");
                const data = {
                    types: eip712_1.EIP721_NFT_TYPES,
                    domain,
                    primaryType: eip712_1.EIP721_NFT_TYPE,
                    message: Object.assign(Object.assign({}, nft), { tokenURI: nft.uri }),
                };
                const signedData = yield ethereum.signTypedData(data);
                if (!signedData) {
                    throw new Error(`signNft error: signedData is empty (${signedData}), data=${JSON.stringify(data)}`);
                }
                return (0, types_1.toBinary)(signedData);
            }
            case "ERC1155": {
                const domain = createEIP712NftDomain(config.chainId, nft.contract, "ERC1155");
                const data = {
                    types: eip712_1.EIP1155_NFT_TYPES,
                    domain,
                    primaryType: eip712_1.EIP1155_NFT_TYPE,
                    message: Object.assign(Object.assign({}, nft), { tokenURI: nft.uri }),
                };
                const signedData = yield ethereum.signTypedData(data);
                if (!signedData) {
                    throw new Error(`signNft error: signedData=${signedData}, data=${JSON.stringify(data)}`);
                }
                return (0, types_1.toBinary)(signedData);
            }
            default: {
                throw new Error("Unexpected");
            }
        }
    });
}
exports.signNft = signNft;
function createEIP712NftDomain(chainId, verifyingContract, nftType) {
    switch (nftType) {
        case "ERC721": {
            return Object.assign(Object.assign({}, eip712_1.EIP721_DOMAIN_NFT_TEMPLATE), { chainId, verifyingContract: verifyingContract });
        }
        case "ERC1155": {
            return Object.assign(Object.assign({}, eip712_1.EIP1155_DOMAIN_NFT_TEMPLATE), { chainId, verifyingContract: verifyingContract });
        }
        default: {
            throw new Error("Unexpected");
        }
    }
}
