import type { Ethereum, EthereumContract } from "@rarible/ethereum-provider";
import type { EVMAddress } from "@rarible/ethereum-api-client";
export declare function createLooksrareV2Exchange(ethereum: Ethereum, address?: EVMAddress): EthereumContract;
export declare const LOOKSRARE_V2_ABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_owner";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_protocolFeeRecipient";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_transferManager";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_weth";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [];
    readonly name: "CallerInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ChainIdInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "CreatorFeeBpTooHigh";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "CurrencyInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ERC20TransferFromFail";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LengthsInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "MerkleProofInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "length";
        readonly type: "uint256";
    }];
    readonly name: "MerkleProofTooLarge";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NewGasLimitETHTransferTooLow";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NewProtocolFeeRecipientCannotBeNullAddress";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NoOngoingTransferInProgress";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NoSelectorForStrategy";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NoncesInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NotAContract";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NotAffiliateController";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NotOwner";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NotV2Strategy";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "NullSignerAddress";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "OutsideOfTimeRange";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "PercentageTooHigh";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "QuoteTypeInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "ReentrancyFail";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "RenouncementNotInProgress";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SameDomainSeparator";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SignatureEOAInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SignatureERC1271Invalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "length";
        readonly type: "uint256";
    }];
    readonly name: "SignatureLengthInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SignatureParameterSInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint8";
        readonly name: "v";
        readonly type: "uint8";
    }];
    readonly name: "SignatureParameterVInvalid";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "StrategyHasNoSelector";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "strategyId";
        readonly type: "uint256";
    }];
    readonly name: "StrategyNotAvailable";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "StrategyNotUsed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "StrategyProtocolFeeTooHigh";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "TransferAlreadyInProgress";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "TransferNotInProgress";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "WrongPotentialOwner";
    readonly type: "error";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "affiliate";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "currency";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "affiliateFee";
        readonly type: "uint256";
    }];
    readonly name: "AffiliatePayment";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "CancelOwnershipTransfer";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "currency";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "bool";
        readonly name: "isAllowed";
        readonly type: "bool";
    }];
    readonly name: "CurrencyStatusUpdated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "InitiateOwnershipRenouncement";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "previousOwner";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "potentialOwner";
        readonly type: "address";
    }];
    readonly name: "InitiateOwnershipTransfer";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "affiliateController";
        readonly type: "address";
    }];
    readonly name: "NewAffiliateController";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "bool";
        readonly name: "isActive";
        readonly type: "bool";
    }];
    readonly name: "NewAffiliateProgramStatus";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "affiliate";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "rate";
        readonly type: "uint256";
    }];
    readonly name: "NewAffiliateRate";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "bidNonce";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "askNonce";
        readonly type: "uint256";
    }];
    readonly name: "NewBidAskNonces";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "creatorFeeManager";
        readonly type: "address";
    }];
    readonly name: "NewCreatorFeeManager";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "NewDomainSeparator";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "gasLimitETHTransfer";
        readonly type: "uint256";
    }];
    readonly name: "NewGasLimitETHTransfer";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "maxCreatorFeeBp";
        readonly type: "uint256";
    }];
    readonly name: "NewMaxCreatorFeeBp";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "NewOwner";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "protocolFeeRecipient";
        readonly type: "address";
    }];
    readonly name: "NewProtocolFeeRecipient";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "strategyId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint16";
        readonly name: "standardProtocolFeeBp";
        readonly type: "uint16";
    }, {
        readonly indexed: false;
        readonly internalType: "uint16";
        readonly name: "minTotalFeeBp";
        readonly type: "uint16";
    }, {
        readonly indexed: false;
        readonly internalType: "uint16";
        readonly name: "maxProtocolFeeBp";
        readonly type: "uint16";
    }, {
        readonly indexed: false;
        readonly internalType: "bytes4";
        readonly name: "selector";
        readonly type: "bytes4";
    }, {
        readonly indexed: false;
        readonly internalType: "bool";
        readonly name: "isMakerBid";
        readonly type: "bool";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "implementation";
        readonly type: "address";
    }];
    readonly name: "NewStrategy";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256[]";
        readonly name: "orderNonces";
        readonly type: "uint256[]";
    }];
    readonly name: "OrderNoncesCancelled";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "strategyId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "bool";
        readonly name: "isActive";
        readonly type: "bool";
    }, {
        readonly indexed: false;
        readonly internalType: "uint16";
        readonly name: "standardProtocolFeeBp";
        readonly type: "uint16";
    }, {
        readonly indexed: false;
        readonly internalType: "uint16";
        readonly name: "minTotalFeeBp";
        readonly type: "uint16";
    }];
    readonly name: "StrategyUpdated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256[]";
        readonly name: "subsetNonces";
        readonly type: "uint256[]";
    }];
    readonly name: "SubsetNoncesCancelled";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes32";
            readonly name: "orderHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "isNonceInvalidated";
            readonly type: "bool";
        }];
        readonly indexed: false;
        readonly internalType: "struct ILooksRareProtocol.NonceInvalidationParameters";
        readonly name: "nonceInvalidationParameters";
        readonly type: "tuple";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "askUser";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "bidUser";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "strategyId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "currency";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "collection";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256[]";
        readonly name: "itemIds";
        readonly type: "uint256[]";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256[]";
        readonly name: "amounts";
        readonly type: "uint256[]";
    }, {
        readonly indexed: false;
        readonly internalType: "address[2]";
        readonly name: "feeRecipients";
        readonly type: "address[2]";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256[3]";
        readonly name: "feeAmounts";
        readonly type: "uint256[3]";
    }];
    readonly name: "TakerAsk";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes32";
            readonly name: "orderHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "isNonceInvalidated";
            readonly type: "bool";
        }];
        readonly indexed: false;
        readonly internalType: "struct ILooksRareProtocol.NonceInvalidationParameters";
        readonly name: "nonceInvalidationParameters";
        readonly type: "tuple";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "bidUser";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "bidRecipient";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "strategyId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "currency";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "collection";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256[]";
        readonly name: "itemIds";
        readonly type: "uint256[]";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256[]";
        readonly name: "amounts";
        readonly type: "uint256[]";
    }, {
        readonly indexed: false;
        readonly internalType: "address[2]";
        readonly name: "feeRecipients";
        readonly type: "address[2]";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256[3]";
        readonly name: "feeAmounts";
        readonly type: "uint256[3]";
    }];
    readonly name: "TakerBid";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "MAGIC_VALUE_ORDER_NONCE_EXECUTED";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "WETH";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint16";
        readonly name: "standardProtocolFeeBp";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint16";
        readonly name: "minTotalFeeBp";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint16";
        readonly name: "maxProtocolFeeBp";
        readonly type: "uint16";
    }, {
        readonly internalType: "bytes4";
        readonly name: "selector";
        readonly type: "bytes4";
    }, {
        readonly internalType: "bool";
        readonly name: "isMakerBid";
        readonly type: "bool";
    }, {
        readonly internalType: "address";
        readonly name: "implementation";
        readonly type: "address";
    }];
    readonly name: "addStrategy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "affiliateController";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly name: "affiliateRates";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderNonces";
        readonly type: "uint256[]";
    }];
    readonly name: "cancelOrderNonces";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "cancelOwnershipTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "subsetNonces";
        readonly type: "uint256[]";
    }];
    readonly name: "cancelSubsetNonces";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "chainId";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "confirmOwnershipRenouncement";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "confirmOwnershipTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "creatorFeeManager";
    readonly outputs: readonly [{
        readonly internalType: "contract ICreatorFeeManager";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "domainSeparator";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "additionalParameters";
            readonly type: "bytes";
        }];
        readonly internalType: "struct OrderStructs.Taker[]";
        readonly name: "takerBids";
        readonly type: "tuple[]";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum QuoteType";
            readonly name: "quoteType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "globalNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "subsetNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "strategyId";
            readonly type: "uint256";
        }, {
            readonly internalType: "enum CollectionType";
            readonly name: "collectionType";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "collection";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "currency";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "startTime";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "endTime";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "itemIds";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "additionalParameters";
            readonly type: "bytes";
        }];
        readonly internalType: "struct OrderStructs.Maker[]";
        readonly name: "makerAsks";
        readonly type: "tuple[]";
    }, {
        readonly internalType: "bytes[]";
        readonly name: "makerSignatures";
        readonly type: "bytes[]";
    }, {
        readonly components: readonly [{
            readonly internalType: "bytes32";
            readonly name: "root";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "value";
                readonly type: "bytes32";
            }, {
                readonly internalType: "enum OrderStructs.MerkleTreeNodePosition";
                readonly name: "position";
                readonly type: "uint8";
            }];
            readonly internalType: "struct OrderStructs.MerkleTreeNode[]";
            readonly name: "proof";
            readonly type: "tuple[]";
        }];
        readonly internalType: "struct OrderStructs.MerkleTree[]";
        readonly name: "merkleTrees";
        readonly type: "tuple[]";
    }, {
        readonly internalType: "address";
        readonly name: "affiliate";
        readonly type: "address";
    }, {
        readonly internalType: "bool";
        readonly name: "isAtomic";
        readonly type: "bool";
    }];
    readonly name: "executeMultipleTakerBids";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "additionalParameters";
            readonly type: "bytes";
        }];
        readonly internalType: "struct OrderStructs.Taker";
        readonly name: "takerAsk";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum QuoteType";
            readonly name: "quoteType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "globalNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "subsetNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "strategyId";
            readonly type: "uint256";
        }, {
            readonly internalType: "enum CollectionType";
            readonly name: "collectionType";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "collection";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "currency";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "startTime";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "endTime";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "itemIds";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "additionalParameters";
            readonly type: "bytes";
        }];
        readonly internalType: "struct OrderStructs.Maker";
        readonly name: "makerBid";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes";
        readonly name: "makerSignature";
        readonly type: "bytes";
    }, {
        readonly components: readonly [{
            readonly internalType: "bytes32";
            readonly name: "root";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "value";
                readonly type: "bytes32";
            }, {
                readonly internalType: "enum OrderStructs.MerkleTreeNodePosition";
                readonly name: "position";
                readonly type: "uint8";
            }];
            readonly internalType: "struct OrderStructs.MerkleTreeNode[]";
            readonly name: "proof";
            readonly type: "tuple[]";
        }];
        readonly internalType: "struct OrderStructs.MerkleTree";
        readonly name: "merkleTree";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "affiliate";
        readonly type: "address";
    }];
    readonly name: "executeTakerAsk";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "additionalParameters";
            readonly type: "bytes";
        }];
        readonly internalType: "struct OrderStructs.Taker";
        readonly name: "takerBid";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum QuoteType";
            readonly name: "quoteType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "globalNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "subsetNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "strategyId";
            readonly type: "uint256";
        }, {
            readonly internalType: "enum CollectionType";
            readonly name: "collectionType";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "collection";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "currency";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "startTime";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "endTime";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "itemIds";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "additionalParameters";
            readonly type: "bytes";
        }];
        readonly internalType: "struct OrderStructs.Maker";
        readonly name: "makerAsk";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes";
        readonly name: "makerSignature";
        readonly type: "bytes";
    }, {
        readonly components: readonly [{
            readonly internalType: "bytes32";
            readonly name: "root";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "value";
                readonly type: "bytes32";
            }, {
                readonly internalType: "enum OrderStructs.MerkleTreeNodePosition";
                readonly name: "position";
                readonly type: "uint8";
            }];
            readonly internalType: "struct OrderStructs.MerkleTreeNode[]";
            readonly name: "proof";
            readonly type: "tuple[]";
        }];
        readonly internalType: "struct OrderStructs.MerkleTree";
        readonly name: "merkleTree";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "affiliate";
        readonly type: "address";
    }];
    readonly name: "executeTakerBid";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "root";
        readonly type: "bytes32";
    }, {
        readonly internalType: "uint256";
        readonly name: "proofLength";
        readonly type: "uint256";
    }];
    readonly name: "hashBatchOrder";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "batchOrderHash";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bool";
        readonly name: "bid";
        readonly type: "bool";
    }, {
        readonly internalType: "bool";
        readonly name: "ask";
        readonly type: "bool";
    }];
    readonly name: "incrementBidAskNonces";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "initiateOwnershipRenouncement";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "newPotentialOwner";
        readonly type: "address";
    }];
    readonly name: "initiateOwnershipTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "isAffiliateProgramActive";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly name: "isCurrencyAllowed";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "maxCreatorFeeBp";
    readonly outputs: readonly [{
        readonly internalType: "uint16";
        readonly name: "";
        readonly type: "uint16";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "ownershipStatus";
    readonly outputs: readonly [{
        readonly internalType: "enum IOwnableTwoSteps.Status";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "potentialOwner";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "protocolFeeRecipient";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "additionalParameters";
            readonly type: "bytes";
        }];
        readonly internalType: "struct OrderStructs.Taker";
        readonly name: "takerBid";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum QuoteType";
            readonly name: "quoteType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "globalNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "subsetNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderNonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "strategyId";
            readonly type: "uint256";
        }, {
            readonly internalType: "enum CollectionType";
            readonly name: "collectionType";
            readonly type: "uint8";
        }, {
            readonly internalType: "address";
            readonly name: "collection";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "currency";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "signer";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "startTime";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "endTime";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "itemIds";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "additionalParameters";
            readonly type: "bytes";
        }];
        readonly internalType: "struct OrderStructs.Maker";
        readonly name: "makerAsk";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "sender";
        readonly type: "address";
    }, {
        readonly internalType: "bytes32";
        readonly name: "orderHash";
        readonly type: "bytes32";
    }];
    readonly name: "restrictedExecuteTakerBid";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "protocolFeeAmount";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "strategyInfo";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "isActive";
        readonly type: "bool";
    }, {
        readonly internalType: "uint16";
        readonly name: "standardProtocolFeeBp";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint16";
        readonly name: "minTotalFeeBp";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint16";
        readonly name: "maxProtocolFeeBp";
        readonly type: "uint16";
    }, {
        readonly internalType: "bytes4";
        readonly name: "selector";
        readonly type: "bytes4";
    }, {
        readonly internalType: "bool";
        readonly name: "isMakerBid";
        readonly type: "bool";
    }, {
        readonly internalType: "address";
        readonly name: "implementation";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "transferManager";
    readonly outputs: readonly [{
        readonly internalType: "contract TransferManager";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "newAffiliateController";
        readonly type: "address";
    }];
    readonly name: "updateAffiliateController";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bool";
        readonly name: "isActive";
        readonly type: "bool";
    }];
    readonly name: "updateAffiliateProgramStatus";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "affiliate";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "bp";
        readonly type: "uint256";
    }];
    readonly name: "updateAffiliateRate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "newCreatorFeeManager";
        readonly type: "address";
    }];
    readonly name: "updateCreatorFeeManager";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "currency";
        readonly type: "address";
    }, {
        readonly internalType: "bool";
        readonly name: "isAllowed";
        readonly type: "bool";
    }];
    readonly name: "updateCurrencyStatus";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "updateDomainSeparator";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "newGasLimitETHTransfer";
        readonly type: "uint256";
    }];
    readonly name: "updateETHGasLimitForTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint16";
        readonly name: "newMaxCreatorFeeBp";
        readonly type: "uint16";
    }];
    readonly name: "updateMaxCreatorFeeBp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "newProtocolFeeRecipient";
        readonly type: "address";
    }];
    readonly name: "updateProtocolFeeRecipient";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "strategyId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bool";
        readonly name: "isActive";
        readonly type: "bool";
    }, {
        readonly internalType: "uint16";
        readonly name: "newStandardProtocolFee";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint16";
        readonly name: "newMinTotalFee";
        readonly type: "uint16";
    }];
    readonly name: "updateStrategy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly name: "userBidAskNonces";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "bidNonce";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "askNonce";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "userOrderNonce";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "userSubsetNonce";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}];
