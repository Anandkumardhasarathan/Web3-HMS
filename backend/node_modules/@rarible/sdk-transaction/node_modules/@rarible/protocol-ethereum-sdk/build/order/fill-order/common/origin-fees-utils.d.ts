import type { EVMAddress, Part } from "@rarible/ethereum-api-client";
import type { BigNumber } from "@rarible/types";
import { BigNumber as BigNum } from "@rarible/utils";
export declare const ZERO_FEE_VALUE: import("@rarible/ethereum-api-client").BigNumberLike;
/**
 * Pack 2 number value to single uint256 (BigNumber)
 * @param fees
 */
export declare function packFeesToUint(fees: [number | undefined, number | undefined]): BigNumber;
export declare function setFeesCurrency(value: string, isWeth: boolean): BigNumber;
export declare function getPackedFeeValue(fee: number | undefined): string;
/**
 * Check requirements for origin fees, converting them to single uint value for fee and list of fee receiver addresses
 * @param originFees
 */
export declare function originFeeValueConvert(originFees?: Part[]): {
    encodedFeesValue: BigNumber;
    totalFeeBasisPoints: number;
    feeAddresses: readonly [EVMAddress, EVMAddress];
};
/**
 * Add fee to value
 * @param value
 * @param feesBasisPoints
 */
export declare function calcValueWithFees(value: BigNumber | BigNum, feesBasisPoints: number): BigNum;
export declare function encodeBasisPointsPlusAccount(bp: number, account: EVMAddress): BigNumber;
