import type { EVMAddress } from "@rarible/types";
import type { Ethereum, EthereumFunctionCall, EthereumSendOptions } from "@rarible/ethereum-provider";
import type { Maybe } from "@rarible/types";
import type { SendFunction } from "../../common/send-transaction";
import type { SimpleCryptoPunkOrder, SimpleOrder } from "../types";
import type { IRaribleEthereumSdkConfig } from "../../types";
import type { GetConfigByChainId } from "../../config";
import type { CryptoPunksOrderFillRequest, OrderFillSendData, OrderHandler } from "./types";
export declare class CryptoPunksOrderHandler implements OrderHandler<CryptoPunksOrderFillRequest> {
    private readonly ethereum;
    private readonly send;
    private readonly getConfig;
    private readonly getBaseOrderFeeConfig;
    private readonly sdkConfig?;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, getConfig: GetConfigByChainId, getBaseOrderFeeConfig: (type: SimpleOrder["type"]) => Promise<number>, sdkConfig?: IRaribleEthereumSdkConfig | undefined);
    invert(request: CryptoPunksOrderFillRequest, maker: EVMAddress): SimpleCryptoPunkOrder;
    approve(order: SimpleCryptoPunkOrder, infinite: boolean): Promise<void>;
    getTransactionData(initial: SimpleCryptoPunkOrder, inverted: SimpleCryptoPunkOrder): Promise<OrderFillSendData>;
    getPunkOrderCallMethod(initial: SimpleCryptoPunkOrder): EthereumFunctionCall;
    getMatchV2Options(left: SimpleCryptoPunkOrder, right: SimpleCryptoPunkOrder): EthereumSendOptions;
    getMakeAssetWithFee(order: SimpleCryptoPunkOrder): import("@rarible/ethereum-api-client").Asset;
    getOrderFee(): number;
    getFillOrderBaseFee(): Promise<number> | number;
}
