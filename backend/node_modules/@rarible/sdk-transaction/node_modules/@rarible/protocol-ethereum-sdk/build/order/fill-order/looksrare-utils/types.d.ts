import type { BigNumberValue } from "@rarible/utils";
export declare enum SupportedChainId {
    MAINNET = 1,
    GOERLI = 5
}
/**
 * /!\ This type is used for the signature and should perfectly match the object signed by the user
 * Do not update unless the contract has been updated
 */
export interface MakerOrder {
    isOrderAsk: boolean;
    signer: string;
    collection: string;
    price: BigNumberValue;
    tokenId: BigNumberValue;
    amount: BigNumberValue;
    strategy: string;
    currency: string;
    nonce: BigNumberValue;
    startTime: BigNumberValue;
    endTime: BigNumberValue;
    minPercentageToAsk: BigNumberValue;
    params: any[];
}
export type BytesLike = ArrayLike<number> | string;
export interface MakerOrderWithEncodedParams extends Omit<MakerOrder, "params"> {
    params: BytesLike;
}
/** MakerOrderWithSignature matches the type used for API order mutations and contract calls. */
export interface MakerOrderWithSignature extends MakerOrder {
    signature: string;
}
/** MakerOrderWithVRS match the type sent to the contract when executing a trade */
export interface MakerOrderWithVRS extends Omit<MakerOrder, "params"> {
    v: number;
    r: string;
    s: string;
    params: BytesLike;
}
export interface TakerOrder {
    isOrderAsk: boolean;
    taker: string;
    price: BigNumberValue;
    tokenId: BigNumberValue;
    minPercentageToAsk: BigNumberValue;
    params: any[];
}
export interface TakerOrderWithEncodedParams extends Omit<TakerOrder, "params"> {
    params: BytesLike;
}
export interface ChainInfo {
    label: string;
    appUrl: string;
    rpcUrl: string;
    explorer: string;
    apiUrl: string;
    osApiUrl: string;
    cdnUrl: string;
    rewardsSubgraphUrl: string;
    cloudinaryUrl: string;
}
export interface EVMAddresses {
    LOOKS: string;
    LOOKS_LP: string;
    WETH: string;
    ROYALTY_FEE_MANAGER: string;
    ROYALTY_FEE_REGISTRY: string;
    ROYALTY_FEE_SETTER: string;
    EXCHANGE: string;
    TRANSFER_MANAGER_ERC721: string;
    TRANSFER_MANAGER_ERC1155: string;
    STRATEGY_STANDARD_SALE: string;
    TRANSFER_SELECTOR_NFT: string;
    STRATEGY_COLLECTION_SALE: string;
    STRATEGY_PRIVATE_SALE: string;
    STRATEGY_DUTCH_AUCTION: string;
    PRIVATE_SALE_WITH_FEE_SHARING: string;
    FEE_SHARING_SYSTEM: string;
    STAKING_POOL_FOR_LOOKS_LP: string;
    TOKEN_DISTRIBUTOR: string;
    TRADING_REWARDS_DISTRIBUTOR: string;
    MULTI_REWARDS_DISTRIBUTOR: string;
    MULTICALL2: string;
    REVERSE_RECORDS: string;
    AGGREGATOR_UNISWAP_V3: string;
    EXECUTION_MANAGER: string;
    CURRENCY_MANAGER: string;
}
