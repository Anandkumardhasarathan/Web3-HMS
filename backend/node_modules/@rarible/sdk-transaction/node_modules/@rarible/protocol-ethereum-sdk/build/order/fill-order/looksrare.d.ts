import type { Maybe } from "@rarible/types";
import type { Ethereum } from "@rarible/ethereum-provider";
import type { AssetType } from "@rarible/ethereum-api-client";
import type { BigNumber } from "@rarible/types";
import type { Part } from "@rarible/ethereum-api-client";
import type { BigNumberValue } from "@rarible/utils";
import type { SendFunction } from "../../common/send-transaction";
import type { SimpleLooksrareOrder, SimpleOrder } from "../types";
import type { EthereumNetwork } from "../../types";
import type { IRaribleEthereumSdkConfig } from "../../types";
import type { RaribleEthereumApis } from "../../common/apis";
import type { GetConfigByChainId } from "../../config";
import type { MakerOrderWithVRS, TakerOrderWithEncodedParams } from "./looksrare-utils/types";
import type { LooksrareOrderFillRequest, OrderFillSendData } from "./types";
import type { PreparedOrderRequestDataForExchangeWrapper } from "./types";
export declare class LooksrareOrderHandler {
    private readonly ethereum;
    private readonly send;
    private readonly getConfig;
    private readonly getBaseOrderFeeConfig;
    private readonly env;
    private readonly getApis;
    private readonly sdkConfig?;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, getConfig: GetConfigByChainId, getBaseOrderFeeConfig: (type: SimpleOrder["type"]) => Promise<number>, env: EthereumNetwork, getApis: () => Promise<RaribleEthereumApis>, sdkConfig?: IRaribleEthereumSdkConfig | undefined);
    convertMakerOrderToLooksrare(makerOrder: SimpleLooksrareOrder, amount: BigNumberValue): MakerOrderWithVRS;
    getFulfillWrapperData(makerOrder: MakerOrderWithVRS, takerOrderData: TakerOrderWithEncodedParams, assetClass: AssetType["assetClass"]): string;
    private prepareTransactionData;
    getTransactionDataForExchangeWrapper(request: LooksrareOrderFillRequest, originFees: Part[] | undefined, encodedFeesValue: BigNumber): Promise<PreparedOrderRequestDataForExchangeWrapper>;
    getTransactionData(request: LooksrareOrderFillRequest): Promise<OrderFillSendData>;
    getFillOrderBaseFee(): Promise<number>;
    getOrderFee(): number;
}
export declare function encodeLooksRareData(ethereum: Ethereum, makerOrder: MakerOrderWithVRS, takerOrder: TakerOrderWithEncodedParams, typeNft: string): string;
