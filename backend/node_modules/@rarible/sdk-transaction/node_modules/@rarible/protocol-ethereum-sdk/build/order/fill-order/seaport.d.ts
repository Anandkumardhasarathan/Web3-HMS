import type { Maybe } from "@rarible/types";
import type { Ethereum, EthereumTransaction } from "@rarible/ethereum-provider";
import { SeaportOrderType } from "@rarible/ethereum-api-client/build/models/SeaportOrderType";
import { SeaportItemType } from "@rarible/ethereum-api-client/build/models/SeaportItemType";
import type { BigNumber } from "@rarible/types";
import type { Asset, Part } from "@rarible/ethereum-api-client";
import type { AssetType } from "@rarible/ethereum-api-client/build/models/AssetType";
import type { SimpleOrder } from "../types";
import type { SendFunction } from "../../common/send-transaction";
import type { EthereumNetwork } from "../../types";
import type { IRaribleEthereumSdkConfig } from "../../types";
import type { RaribleEthereumApis } from "../../common/apis";
import type { GetConfigByChainId } from "../../config";
import { ItemType, OrderType } from "./seaport-utils/constants";
import type { PreparedOrderRequestDataForExchangeWrapper, SeaportV1OrderFillRequest } from "./types";
import type { TipInputItem } from "./seaport-utils/types";
import type { OrderFillSendData } from "./types";
import type { ComplexFeesReducedData } from "./common/origin-fee-reducer";
export declare class SeaportOrderHandler {
    private readonly ethereum;
    private readonly send;
    private readonly getConfig;
    private readonly getApis;
    private readonly getBaseOrderFeeConfig;
    private readonly env;
    private readonly sdkConfig?;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, getConfig: GetConfigByChainId, getApis: () => Promise<RaribleEthereumApis>, getBaseOrderFeeConfig: (type: SimpleOrder["type"]) => Promise<number>, env: EthereumNetwork, sdkConfig?: IRaribleEthereumSdkConfig | undefined);
    sendTransaction(request: SeaportV1OrderFillRequest): Promise<EthereumTransaction>;
    getSignature({ hash, protocol }: {
        hash: string;
        protocol: string;
    }): Promise<any>;
    getTransactionData(request: SeaportV1OrderFillRequest, requestOptions?: {
        disableCheckingBalances?: boolean;
    }): Promise<OrderFillSendData>;
    convertOriginFeesToTips(request: SeaportV1OrderFillRequest): TipInputItem[] | undefined;
    getTransactionDataForExchangeWrapper(request: SeaportV1OrderFillRequest, originFees: Part[] | undefined, feeValue: BigNumber, options?: {
        disableCheckingBalances?: boolean;
    }): Promise<PreparedOrderRequestDataForExchangeWrapper>;
    getAssetToApprove(request: SeaportV1OrderFillRequest, feesData: ComplexFeesReducedData): Asset;
    getFillOrderBaseFee(): Promise<number>;
    getOrderFee(): number;
}
export declare function convertOrderType(type: SeaportOrderType): OrderType;
export declare function convertItemType(type: SeaportItemType): ItemType;
export declare function getSeaportToken(assetType: AssetType): string;
