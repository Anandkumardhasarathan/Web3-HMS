import type { Maybe } from "@rarible/types";
import type { Ethereum } from "@rarible/ethereum-provider";
import type { EthereumTransaction } from "@rarible/ethereum-provider";
import type { BigNumber } from "@rarible/types";
import type { Part } from "@rarible/ethereum-api-client";
import type { SimpleOrder, SimpleX2Y2Order } from "../types";
import type { SendFunction } from "../../common/send-transaction";
import type { RaribleEthereumApis } from "../../common/apis";
import type { GetConfigByChainId } from "../../config";
import type { PreparedOrderRequestDataForExchangeWrapper, X2Y2OrderFillRequest } from "./types";
import type { OrderFillSendData } from "./types";
export declare class X2Y2OrderHandler {
    private readonly ethereum;
    private readonly send;
    private readonly getConfig;
    private readonly getBaseOrderFeeConfig;
    private readonly getApis;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, getConfig: GetConfigByChainId, getBaseOrderFeeConfig: (type: SimpleOrder["type"]) => Promise<number>, getApis: () => Promise<RaribleEthereumApis>);
    fillOrder(order: SimpleX2Y2Order, request: X2Y2OrderFillRequest): Promise<EthereumTransaction>;
    getTransactionData(request: X2Y2OrderFillRequest): Promise<OrderFillSendData>;
    getTransactionDataForExchangeWrapper(request: X2Y2OrderFillRequest, originFees: Part[] | undefined, feeValue: BigNumber): Promise<PreparedOrderRequestDataForExchangeWrapper>;
    private getWrapperData;
    getFillOrderBaseFee(): Promise<number>;
    getOrderFee(): number;
}
