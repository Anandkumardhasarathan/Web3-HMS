"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isWeb3v4 = exports.isWeb3v1 = exports.getRaribleWallet = void 0;
const tslib_1 = require("tslib");
const web3_ethereum_1 = require("@rarible/web3-ethereum");
const web3_v4_ethereum_1 = require("@rarible/web3-v4-ethereum");
const ethers_ethereum_1 = require("@rarible/ethers-ethereum");
const aptos_wallet_1 = require("@rarible/aptos-wallet");
const SdkCommon = tslib_1.__importStar(require("@rarible/sdk-common"));
const aptos_wallet_2 = require("@rarible/aptos-wallet");
const wallets_1 = require("./wallets");
function getRaribleWallet(provider) {
    if ((0, wallets_1.isBlockchainWallet)(provider))
        return provider;
    if (isEthereumProvider(provider))
        return new wallets_1.EthereumWallet(provider);
    if (isSolanaSigner(provider))
        return new wallets_1.SolanaWallet(provider);
    if (isTezosProvider(provider))
        return new wallets_1.TezosWallet(provider);
    if (isFlowProvider(provider))
        return new wallets_1.FlowWallet(provider);
    if (isImxWallet(provider))
        return new wallets_1.ImmutableXWallet(provider);
    if (isEthersSigner(provider))
        return new wallets_1.EthereumWallet(new ethers_ethereum_1.EthersEthereum(provider));
    if (isAptosCoreWallet(provider))
        return new wallets_1.AptosWallet(new aptos_wallet_1.AptosWalletCore(provider));
    if (isAptosExternalWallet(provider))
        return new wallets_1.AptosWallet(new aptos_wallet_2.AptosSdkWallet(provider));
    if (isWeb3(provider)) {
        if (isWeb3v1(provider)) {
            return new wallets_1.EthereumWallet(new web3_ethereum_1.Web3Ethereum({ web3: provider }));
        }
        if (isWeb3v4(provider)) {
            return new wallets_1.EthereumWallet(new web3_v4_ethereum_1.Web3v4Ethereum({ web3: provider }));
        }
    }
    throw new Error("Unsupported provider");
}
exports.getRaribleWallet = getRaribleWallet;
function isEthereumProvider(x) {
    return "personalSign" in x && "getFrom" in x && "getChainId" in x;
}
function isSolanaSigner(x) {
    return "signTransaction" in x && "signAllTransactions" in x && "publicKey" in x;
}
function isTezosProvider(x) {
    return "sign" in x && "kind" in x && "public_key" in x;
}
function isFlowProvider(x) {
    return "authz" in x && "send" in x && "currentUser" in x;
}
function isWeb3(x) {
    return "eth" in x && "utils" in x && "signTransaction" in x.eth && "getChainId" in x.eth;
}
function isEthersSigner(x) {
    return "provider" in x && "signMessage" in x && "signTransaction" in x && x._isSigner && "_signTypedData" in x;
}
function isImxWallet(x) {
    return "link" in x && "network" in x && "getConnectionData" in x;
}
function isWeb3v1(x) {
    return SdkCommon.isWeb3v1(x);
}
exports.isWeb3v1 = isWeb3v1;
function isWeb3v4(x) {
    return SdkCommon.isWeb3v4(x);
}
exports.isWeb3v4 = isWeb3v4;
function isAptosExternalWallet(x) {
    return SdkCommon.isObjectLike(x) && "signMessage" in x && "signAndSubmitTransaction" in x;
}
function isAptosCoreWallet(x) {
    return (SdkCommon.isObjectLike(x) &&
        "signAndSubmitTransaction" in x &&
        "signMessage" in x &&
        "setWallet" in x &&
        "standardWallets" in x);
}
