import type { Ethereum } from "@rarible/ethereum-provider";
import type { Fcl } from "@rarible/fcl-types";
import type { TezosProvider } from "@rarible/tezos-sdk";
import type { AuthWithPrivateKey } from "@rarible/flow-sdk";
import type { ImxWallet } from "@rarible/immutable-wallet";
import type { SolanaSigner } from "@rarible/solana-common";
import type { AptosWalletInterface } from "@rarible/aptos-wallet";
import type { AbstractWallet, UserSignature } from "./domain";
import { WalletType } from "./domain";
export declare class EthereumWallet<T extends Ethereum = Ethereum> implements AbstractWallet<WalletType.ETHEREUM> {
    readonly ethereum: T;
    readonly walletType = WalletType.ETHEREUM;
    constructor(ethereum: T);
    signPersonalMessage(message: string): Promise<UserSignature>;
}
export declare class FlowWallet implements AbstractWallet<WalletType.FLOW> {
    readonly fcl: Fcl;
    auth?: AuthWithPrivateKey;
    readonly walletType = WalletType.FLOW;
    constructor(fcl: Fcl, auth?: AuthWithPrivateKey);
    getAuth(): AuthWithPrivateKey;
    signPersonalMessage(message: string): Promise<UserSignature>;
    _getSignatureFromAuth(msgHex: string): Promise<{
        signature: any;
        publicKey: string;
    }>;
}
export interface TezosSignatureResult {
    signature: string;
    edpk: string;
    prefix: string;
}
export declare class TezosWallet implements AbstractWallet<WalletType.TEZOS> {
    readonly provider: TezosProvider;
    readonly walletType = WalletType.TEZOS;
    constructor(provider: TezosProvider);
    private sign;
    signPersonalMessage(message: string): Promise<UserSignature>;
}
export declare class SolanaWallet implements AbstractWallet<WalletType.SOLANA> {
    readonly provider: SolanaSigner;
    readonly walletType = WalletType.SOLANA;
    constructor(provider: SolanaSigner);
    signPersonalMessage(message: string): Promise<UserSignature>;
}
export declare class ImmutableXWallet implements AbstractWallet<WalletType.IMMUTABLEX> {
    wallet: ImxWallet;
    readonly walletType = WalletType.IMMUTABLEX;
    constructor(wallet: ImxWallet);
    signPersonalMessage(message: string): Promise<UserSignature>;
}
export declare class AptosWallet implements AbstractWallet<WalletType.APTOS> {
    wallet: AptosWalletInterface;
    readonly walletType = WalletType.APTOS;
    constructor(wallet: AptosWalletInterface);
    signPersonalMessage(message: string): Promise<UserSignature>;
}
export declare function isBlockchainWallet(x: unknown): x is BlockchainWallet;
export type BlockchainWallet<T extends WalletType = WalletType> = {
    [WalletType.FLOW]: FlowWallet;
    [WalletType.ETHEREUM]: EthereumWallet;
    [WalletType.TEZOS]: TezosWallet;
    [WalletType.SOLANA]: SolanaWallet;
    [WalletType.IMMUTABLEX]: ImmutableXWallet;
    [WalletType.APTOS]: AptosWallet;
}[T];
export type WalletByBlockchain = {
    [K in WalletType]: BlockchainWallet<K>;
};
