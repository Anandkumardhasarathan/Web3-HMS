import { Web3Ethereum } from "@rarible/web3-ethereum";
import { Web3v4Ethereum } from "@rarible/web3-v4-ethereum";
import { EthersEthereum } from "@rarible/ethers-ethereum";
import { AptosWalletCore } from "@rarible/aptos-wallet";
import * as SdkCommon from "@rarible/sdk-common";
import { AptosSdkWallet } from "@rarible/aptos-wallet";
import { AptosWallet, ImmutableXWallet, EthereumWallet, FlowWallet, SolanaWallet, TezosWallet, isBlockchainWallet, } from "./wallets";
export function getRaribleWallet(provider) {
    if (isBlockchainWallet(provider))
        return provider;
    if (isEthereumProvider(provider))
        return new EthereumWallet(provider);
    if (isSolanaSigner(provider))
        return new SolanaWallet(provider);
    if (isTezosProvider(provider))
        return new TezosWallet(provider);
    if (isFlowProvider(provider))
        return new FlowWallet(provider);
    if (isImxWallet(provider))
        return new ImmutableXWallet(provider);
    if (isEthersSigner(provider))
        return new EthereumWallet(new EthersEthereum(provider));
    if (isAptosCoreWallet(provider))
        return new AptosWallet(new AptosWalletCore(provider));
    if (isAptosExternalWallet(provider))
        return new AptosWallet(new AptosSdkWallet(provider));
    if (isWeb3(provider)) {
        if (isWeb3v1(provider)) {
            return new EthereumWallet(new Web3Ethereum({ web3: provider }));
        }
        if (isWeb3v4(provider)) {
            return new EthereumWallet(new Web3v4Ethereum({ web3: provider }));
        }
    }
    throw new Error("Unsupported provider");
}
function isEthereumProvider(x) {
    return "personalSign" in x && "getFrom" in x && "getChainId" in x;
}
function isSolanaSigner(x) {
    return "signTransaction" in x && "signAllTransactions" in x && "publicKey" in x;
}
function isTezosProvider(x) {
    return "sign" in x && "kind" in x && "public_key" in x;
}
function isFlowProvider(x) {
    return "authz" in x && "send" in x && "currentUser" in x;
}
function isWeb3(x) {
    return "eth" in x && "utils" in x && "signTransaction" in x.eth && "getChainId" in x.eth;
}
function isEthersSigner(x) {
    return "provider" in x && "signMessage" in x && "signTransaction" in x && x._isSigner && "_signTypedData" in x;
}
function isImxWallet(x) {
    return "link" in x && "network" in x && "getConnectionData" in x;
}
export function isWeb3v1(x) {
    return SdkCommon.isWeb3v1(x);
}
export function isWeb3v4(x) {
    return SdkCommon.isWeb3v4(x);
}
function isAptosExternalWallet(x) {
    return SdkCommon.isObjectLike(x) && "signMessage" in x && "signAndSubmitTransaction" in x;
}
function isAptosCoreWallet(x) {
    return (SdkCommon.isObjectLike(x) &&
        "signAndSubmitTransaction" in x &&
        "signMessage" in x &&
        "setWallet" in x &&
        "standardWallets" in x);
}
