"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkErrorCode = exports.getErrorHandlerMiddleware = exports.createApisSdk = void 0;
const tslib_1 = require("tslib");
const ApiClient = tslib_1.__importStar(require("@rarible/api-client"));
const build_1 = require("@rarible/logger/build");
const domain_1 = require("../domain");
const config_1 = require("../config");
/**
 * @ignore
 * @param env
 * @param params
 * @param logsLevel
 */
function createApisSdk(env, params = {}, logsLevel) {
    const config = (0, config_1.getSdkConfig)(env);
    const configuration = new ApiClient.Configuration(Object.assign({ basePath: config.basePath, headers: typeof params.apiKey === "string" ? { "X-API-KEY": params.apiKey } : {}, exceptionHandler: (error, url, init) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a;
            throw new build_1.NetworkError({
                status: -1,
                url: decodeURIComponent(url),
                formData: (_a = init === null || init === void 0 ? void 0 : init.body) === null || _a === void 0 ? void 0 : _a.toString(),
                method: init === null || init === void 0 ? void 0 : init.method,
                data: { message: error.message },
            });
        }), middleware: [
            ...(logsLevel !== domain_1.LogsLevel.DISABLED ? [getErrorHandlerMiddleware()] : []),
            ...((params === null || params === void 0 ? void 0 : params.middleware) || []),
        ] }, params));
    return {
        collection: new ApiClient.CollectionControllerApi(configuration),
        currency: new ApiClient.CurrencyControllerApi(configuration),
        item: new ApiClient.ItemControllerApi(configuration),
        ownership: new ApiClient.OwnershipControllerApi(configuration),
        order: new ApiClient.OrderControllerApi(configuration),
        activity: new ApiClient.ActivityControllerApi(configuration),
        balances: new ApiClient.BalanceControllerApi(configuration),
        search: new ApiClient.SearchControllerApi(configuration),
        data: new ApiClient.DataControllerApi(configuration),
    };
}
exports.createApisSdk = createApisSdk;
function getErrorHandlerMiddleware(errorCode) {
    return {
        post: (context) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, build_1.handleFetchErrorResponse)(context.response, { code: errorCode });
            return context.response;
        }),
    };
}
exports.getErrorHandlerMiddleware = getErrorHandlerMiddleware;
var NetworkErrorCode;
(function (NetworkErrorCode) {
    NetworkErrorCode["NETWORK_ERR"] = "NETWORK_ERR";
    NetworkErrorCode["ETHEREUM_NETWORK_ERR"] = "ETHEREUM_NETWORK_ERR";
    NetworkErrorCode["FLOW_NETWORK_ERR"] = "FLOW_NETWORK_ERR";
    NetworkErrorCode["IMX_NETWORK_ERR"] = "IMX_NETWORK_ERR";
    NetworkErrorCode["TEZOS_EXTERNAL_ERR"] = "TEZOS_EXTERNAL_ERR";
    NetworkErrorCode["SOLANA_EXTERNAL_ERR"] = "SOLANA_EXTERNAL_ERR";
    NetworkErrorCode["META_EXTERNAL_ERR"] = "META_EXTERNAL_ERR";
})(NetworkErrorCode || (exports.NetworkErrorCode = NetworkErrorCode = {}));
