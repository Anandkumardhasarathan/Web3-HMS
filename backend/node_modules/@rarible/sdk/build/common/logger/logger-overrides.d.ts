import { LogLevel } from "@rarible/logger/build/domain";
import type { BlockchainWallet } from "@rarible/sdk-wallet";
import { WalletType } from "@rarible/sdk-wallet";
import { WrappedError } from "@rarible/sdk-common";
import { NetworkErrorCode } from "../apis";
import type { ISdkContext } from "../../domain";
/**
 * Checks if given error may consider as warning level
 * @param err
 * @param blockchain
 */
export declare function isErrorWarning(err: any, blockchain: WalletType | undefined): boolean;
export type ErrorLevel = LogLevel | NetworkErrorCode | CustomErrorCode | string;
export declare enum CustomErrorCode {
    CONTRACT_ERROR = "CONTRACT_ERROR"
}
export declare function getErrorLevel(callableName: string, error: any, wallet: BlockchainWallet | undefined): ErrorLevel;
export declare function getExecRevertedMessage(msg: string): string;
export type LoggerDataContainerInput = {
    callable: (...args: any[]) => any;
    args: any[];
    responsePromise: Promise<any>;
    startTime: number;
    sdkContext: ISdkContext;
};
export declare class LoggerDataContainer {
    private input;
    extraFields: Record<string, string | undefined>;
    stringifiedArgs: string;
    constructor(input: LoggerDataContainerInput);
    static getParsedArgs(args: any[]): string;
    getTraceData(additionalFields?: Record<string, any>): Promise<{
        level: LogLevel;
        method: string;
        message: string;
        duration: number;
        args: string;
        resp: string | undefined;
    }>;
    getErrorData<T extends Error | WrappedError>(rawError: T, additionalFields?: Record<string, any>): {
        level: string;
        method: string;
        message: string;
        error: string | undefined;
        duration: number;
        args: string;
        requestAddress: string | undefined;
    } | {
        level: string;
        method: string;
        message: string;
        error: string | undefined;
    };
}
export declare function getCallableExtraFields(callable: any): Record<string, string | undefined>;
