"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCallableExtraFields = exports.LoggerDataContainer = exports.getExecRevertedMessage = exports.getErrorLevel = exports.CustomErrorCode = exports.isErrorWarning = void 0;
const tslib_1 = require("tslib");
const build_1 = require("@rarible/logger/build");
const domain_1 = require("@rarible/logger/build/domain");
const sdk_wallet_1 = require("@rarible/sdk-wallet");
const sdk_common_1 = require("@rarible/sdk-common");
const apis_1 = require("../apis");
const utils_1 = require("../utils");
const middleware_1 = require("../middleware/middleware");
const logger_middleware_1 = require("./logger-middleware");
const COMMON_NETWORK_ERROR_MESSAGES = ["Network request failed", "Failed to fetch"];
/**
 * Checks if given error may consider as warning level
 * @param err
 * @param blockchain
 */
function isErrorWarning(err, blockchain) {
    try {
        if (!err) {
            return false;
        }
        if (isEVMWalletType(blockchain)) {
            if ((0, sdk_common_1.isEVMWarning)(err)) {
                return true;
            }
        }
        if (blockchain === sdk_wallet_1.WalletType.TEZOS) {
            return (0, sdk_common_1.isTezosWarning)(err);
        }
        if (blockchain === sdk_wallet_1.WalletType.FLOW) {
            return (0, sdk_common_1.isFlowWarning)(err);
        }
        if (blockchain === sdk_wallet_1.WalletType.SOLANA) {
            if ((0, sdk_common_1.isSolanaWarning)(err)) {
                return true;
            }
        }
    }
    catch (e) { }
    return false;
}
exports.isErrorWarning = isErrorWarning;
function isNetworkError(callableName, error) {
    if (callableName === null || callableName === void 0 ? void 0 : callableName.startsWith("apis.")) {
        return true;
    }
    return COMMON_NETWORK_ERROR_MESSAGES.some(msg => { var _a; return (_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.includes(msg); });
}
var CustomErrorCode;
(function (CustomErrorCode) {
    CustomErrorCode["CONTRACT_ERROR"] = "CONTRACT_ERROR";
})(CustomErrorCode || (exports.CustomErrorCode = CustomErrorCode = {}));
function getErrorLevel(callableName, error, wallet) {
    if ((error === null || error === void 0 ? void 0 : error.status) === 400) {
        //if user's network request is not correct
        return domain_1.LogLevel.WARN;
    }
    if (error instanceof build_1.NetworkError || (error === null || error === void 0 ? void 0 : error.name) === "NetworkError") {
        return (error === null || error === void 0 ? void 0 : error.code) || apis_1.NetworkErrorCode.NETWORK_ERR;
    }
    if (isNetworkError(callableName, error)) {
        return apis_1.NetworkErrorCode.NETWORK_ERR;
    }
    if ((0, sdk_common_1.isInfoLevel)(error)) {
        return domain_1.LogLevel.INFO;
    }
    if (isErrorWarning(error, wallet === null || wallet === void 0 ? void 0 : wallet.walletType) || error instanceof build_1.Warning || (error === null || error === void 0 ? void 0 : error.name) === "Warning") {
        return domain_1.LogLevel.WARN;
    }
    if (isEVMWalletType(wallet === null || wallet === void 0 ? void 0 : wallet.walletType) && isContractError(error)) {
        return CustomErrorCode.CONTRACT_ERROR;
    }
    return domain_1.LogLevel.ERROR;
}
exports.getErrorLevel = getErrorLevel;
function isEVMWalletType(walletType) {
    return walletType === sdk_wallet_1.WalletType.ETHEREUM || walletType === sdk_wallet_1.WalletType.IMMUTABLEX;
}
const execRevertedRegexp = /execution reverted:(.*[^\\])/;
const ethersSig = "Error while gas estimation with message cannot estimate gas";
const ethersRevertedRegexp = /"execution reverted[:]?(.*?)"/;
function isContractError(error) {
    var _a;
    return (_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.includes("execution reverted");
}
function getExecRevertedMessage(msg) {
    if (!msg)
        return msg;
    try {
        const result = msg.includes(ethersSig) ? msg.match(ethersRevertedRegexp) : msg.match(execRevertedRegexp);
        if (result && result[1]) {
            return result[1].trim();
        }
    }
    catch (e) { }
    return msg;
}
exports.getExecRevertedMessage = getExecRevertedMessage;
class LoggerDataContainer {
    constructor(input) {
        this.input = input;
        this.extraFields = getCallableExtraFields(input.callable);
        this.stringifiedArgs = LoggerDataContainer.getParsedArgs(input.args);
    }
    static getParsedArgs(args) {
        let parsedArgs;
        try {
            parsedArgs = (0, sdk_common_1.getStringifiedData)(args) || "";
        }
        catch (e) {
            try {
                parsedArgs = JSON.stringify(args, Object.getOwnPropertyNames(args));
            }
            catch (err) {
                parsedArgs = "unknown";
            }
        }
        return parsedArgs;
    }
    getTraceData(additionalFields) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const res = yield this.input.responsePromise;
            return Object.assign(Object.assign({ level: domain_1.LogLevel.TRACE, method: this.input.callable.name, message: "trace of " + this.input.callable.name, duration: (Date.now() - this.input.startTime) / 1000, args: this.stringifiedArgs, resp: (0, sdk_common_1.getStringifiedData)(res) }, (this.extraFields || {})), (additionalFields || {}));
        });
    }
    getErrorData(rawError, additionalFields) {
        var _a, _b, _c, _d;
        let data;
        const error = sdk_common_1.WrappedError.isWrappedError(rawError) ? rawError.error : rawError;
        try {
            data = Object.assign(Object.assign({ level: getErrorLevel((_a = this.input.callable) === null || _a === void 0 ? void 0 : _a.name, error, (_b = this.input.sdkContext) === null || _b === void 0 ? void 0 : _b.wallet), method: (_c = this.input.callable) === null || _c === void 0 ? void 0 : _c.name, message: (0, logger_middleware_1.getErrorMessageString)(error), error: (0, sdk_common_1.getStringifiedData)(error), duration: (Date.now() - this.input.startTime) / 1000, args: this.stringifiedArgs, requestAddress: undefined }, (this.extraFields || {})), (additionalFields || {}));
            if (error instanceof build_1.NetworkError || (error === null || error === void 0 ? void 0 : error.name) === "NetworkError") {
                data.requestAddress = error === null || error === void 0 ? void 0 : error.url;
            }
        }
        catch (e) {
            data = {
                level: "LOGGING_ERROR",
                method: (_d = this.input.callable) === null || _d === void 0 ? void 0 : _d.name,
                message: (0, logger_middleware_1.getErrorMessageString)(e),
                error: (0, sdk_common_1.getStringifiedData)(e),
            };
        }
        return data;
    }
}
exports.LoggerDataContainer = LoggerDataContainer;
function isCallable(fn) {
    var _a;
    return fn instanceof middleware_1.WrappedAdvancedFn || ((_a = fn === null || fn === void 0 ? void 0 : fn.constructor) === null || _a === void 0 ? void 0 : _a.name) === "WrappedAdvancedFn";
}
function getCallableExtraFields(callable) {
    var _a, _b;
    try {
        if (typeof (callable === null || callable === void 0 ? void 0 : callable.name) !== "string")
            return {};
        if (isCallable(callable)) {
            const parent = callable.parent;
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("order.buy.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                const orderId = (0, utils_1.getOrderIdFromFillRequest)(request);
                const contextData = parent === null || parent === void 0 ? void 0 : parent.context;
                return {
                    orderId,
                    platform: (_a = contextData === null || contextData === void 0 ? void 0 : contextData.orderData) === null || _a === void 0 ? void 0 : _a.platform,
                    collectionId: (_b = contextData === null || contextData === void 0 ? void 0 : contextData.orderData) === null || _b === void 0 ? void 0 : _b.nftCollection,
                };
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("order.batchBuy.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                const orderIds = Array.isArray(request) ? request.map(req => (0, utils_1.getOrderIdFromFillRequest)(req)).join(",") : null;
                const contextData = parent === null || parent === void 0 ? void 0 : parent.context;
                const platforms = Array.isArray(contextData === null || contextData === void 0 ? void 0 : contextData.prepared)
                    ? contextData === null || contextData === void 0 ? void 0 : contextData.prepared.reduce((acc, req) => {
                        var _a, _b;
                        if (((_a = req === null || req === void 0 ? void 0 : req.orderData) === null || _a === void 0 ? void 0 : _a.platform) && !acc.includes((_b = req === null || req === void 0 ? void 0 : req.orderData) === null || _b === void 0 ? void 0 : _b.platform)) {
                            acc.push(req.orderData.platform);
                        }
                        return acc;
                    }, []).join(",")
                    : null;
                const collections = Array.isArray(contextData === null || contextData === void 0 ? void 0 : contextData.prepared)
                    ? contextData === null || contextData === void 0 ? void 0 : contextData.prepared.reduce((acc, req) => {
                        var _a, _b;
                        if (((_a = req === null || req === void 0 ? void 0 : req.orderData) === null || _a === void 0 ? void 0 : _a.nftCollection) && !acc.includes((_b = req === null || req === void 0 ? void 0 : req.orderData) === null || _b === void 0 ? void 0 : _b.nftCollection)) {
                            acc.push(req.orderData.nftCollection);
                        }
                        return acc;
                    }, []).join(",")
                    : null;
                return {
                    orderId: `[${orderIds}]`,
                    platform: `[${platforms}]`,
                    collectionId: `[${collections}]`,
                };
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("order.bid.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                const contextData = parent === null || parent === void 0 ? void 0 : parent.context;
                if (!request)
                    return {};
                return {
                    itemId: "itemId" in request ? request.itemId : undefined,
                    collectionId: contextData === null || contextData === void 0 ? void 0 : contextData.nftData.nftCollection,
                };
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("order.bidUpdate.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                return { orderId: request === null || request === void 0 ? void 0 : request.orderId };
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("order.cancel")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                return { orderId: request === null || request === void 0 ? void 0 : request.orderId };
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("order.sell.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                return {
                    itemId: request === null || request === void 0 ? void 0 : request.itemId,
                    collectionId: request ? (0, utils_1.getCollectionFromItemId)(request.itemId) : undefined,
                };
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("order.sellUpdate.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                const contextData = parent === null || parent === void 0 ? void 0 : parent.context;
                return {
                    orderId: request === null || request === void 0 ? void 0 : request.orderId,
                    collectionId: contextData === null || contextData === void 0 ? void 0 : contextData.orderData.nftCollection,
                };
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("order.acceptBid.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                let orderId = (0, utils_1.getOrderIdFromFillRequest)(request);
                const contextData = parent === null || parent === void 0 ? void 0 : parent.context;
                return {
                    orderId,
                    collectionId: contextData === null || contextData === void 0 ? void 0 : contextData.nftData.nftCollection,
                };
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("nft.transfer.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                const contextData = parent === null || parent === void 0 ? void 0 : parent.context;
                if (request === null || request === void 0 ? void 0 : request.itemId) {
                    return {
                        collectionId: (contextData === null || contextData === void 0 ? void 0 : contextData.nftData.nftCollection) || (0, utils_1.getCollectionFromItemId)(request.itemId),
                    };
                }
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("nft.mint.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                if (request) {
                    return {
                        collectionId: (0, utils_1.getContractFromMintRequest)(request),
                    };
                }
            }
            if (callable === null || callable === void 0 ? void 0 : callable.name.startsWith("nft.burn.prepare.submit")) {
                const request = parent === null || parent === void 0 ? void 0 : parent.args[0];
                const contextData = parent === null || parent === void 0 ? void 0 : parent.context;
                if (request) {
                    return {
                        collectionId: (contextData === null || contextData === void 0 ? void 0 : contextData.nftData.nftCollection) || (0, utils_1.getCollectionFromItemId)(request.itemId),
                    };
                }
            }
        }
    }
    catch (e) { }
    return {};
}
exports.getCallableExtraFields = getCallableExtraFields;
