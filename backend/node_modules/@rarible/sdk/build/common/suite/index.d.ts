import type { RaribleSdkProvider } from "@rarible/sdk-wallet";
import type { IRaribleSdk } from "../../domain";
import type { TestSuiteHookedProvider, SuiteSupportedBlockchain, TestSuiteSDKConfig } from "./domain";
import { ItemTestSuite } from "./item";
import { OrderTestSuite } from "./order";
import { OwnershipTestSuite } from "./ownership";
import { BalancesTestSuite } from "./balances";
export declare class SDKBaseTestSuite {
    readonly sdk: IRaribleSdk;
    constructor(config?: TestSuiteSDKConfig, provider?: RaribleSdkProvider | undefined);
}
export declare class SDKTestSuite<T extends SuiteSupportedBlockchain> extends SDKBaseTestSuite {
    readonly blockchain: T;
    readonly hooked: TestSuiteHookedProvider<T>;
    readonly addressString: string;
    readonly blockchainGroup: import("@rarible/api-client").Blockchain;
    readonly provider: import("./domain").TestSuiteProviderDictionary[T];
    readonly items: ItemTestSuite<T>;
    readonly ownerships: OwnershipTestSuite;
    readonly orders: OrderTestSuite<T>;
    readonly addressUnion: import("@rarible/types").UnionAddress<import("@rarible/types").BlockchainEnum>;
    readonly balances: BalancesTestSuite<T>;
    constructor(blockchain: T, hooked: TestSuiteHookedProvider<T>, addressString: string, config?: TestSuiteSDKConfig);
    destroy: () => void | Promise<void>;
}
