"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDKTestSuite = exports.SDKBaseTestSuite = void 0;
const types_1 = require("@rarible/types");
const __1 = require("../..");
const domain_1 = require("../../domain");
const extract_blockchain_1 = require("../extract-blockchain");
const create_sdk_1 = require("../test/create-sdk");
const item_1 = require("./item");
const order_1 = require("./order");
const ownership_1 = require("./ownership");
const balances_1 = require("./balances");
class SDKBaseTestSuite {
    constructor(config = {}, provider = undefined) {
        const env = "development";
        this.sdk = (0, __1.createRaribleSdk)(provider, env, Object.assign({ logs: domain_1.LogsLevel.DISABLED, apiKey: (0, create_sdk_1.getAPIKey)(env) }, config));
    }
}
exports.SDKBaseTestSuite = SDKBaseTestSuite;
class SDKTestSuite extends SDKBaseTestSuite {
    constructor(blockchain, hooked, addressString, config) {
        super(config, hooked.provider);
        this.blockchain = blockchain;
        this.hooked = hooked;
        this.addressString = addressString;
        this.blockchainGroup = (0, extract_blockchain_1.toBlockchainGroup)(this.blockchain);
        this.provider = this.hooked.provider;
        this.items = new item_1.ItemTestSuite(this.blockchain, this.sdk, this.provider);
        this.ownerships = new ownership_1.OwnershipTestSuite(this.sdk);
        this.orders = new order_1.OrderTestSuite(this.blockchain, this.sdk, this.ownerships);
        this.addressUnion = (0, types_1.toUnionAddress)(`${this.blockchainGroup}:${this.addressString}`);
        this.balances = new balances_1.BalancesTestSuite(this.blockchain, this.sdk, this.addressUnion);
        this.destroy = () => this.hooked.destroy();
    }
}
exports.SDKTestSuite = SDKTestSuite;
