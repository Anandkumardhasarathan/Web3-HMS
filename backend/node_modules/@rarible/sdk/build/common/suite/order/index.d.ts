import type { Order } from "@rarible/api-client";
import { OrderStatus } from "@rarible/api-client";
import type { ItemId, OrderId } from "@rarible/types";
import type { BigNumberValue } from "@rarible/utils";
import type { SuiteSupportedBlockchain } from "../domain";
import type { IRaribleSdk } from "../../../domain";
import type { OwnershipTestSuite } from "../ownership";
import type { CreateTestOrderByItemRequest, CreateTestOrderByCollectionRequest } from "./domain";
export declare class OrderTestSuite<T extends SuiteSupportedBlockchain> {
    readonly blockchain: T;
    private readonly sdk;
    private readonly ownerships;
    constructor(blockchain: T, sdk: IRaribleSdk, ownerships: OwnershipTestSuite);
    sellWithPrepare: (request: CreateTestOrderByItemRequest) => Promise<OrderId>;
    sell: (request: CreateTestOrderByItemRequest) => Promise<OrderId>;
    sellUpdate: (orderId: OrderId, nextPrice: BigNumberValue) => Promise<OrderId>;
    bidWithPrepare: (request: CreateTestOrderByItemRequest) => Promise<OrderId>;
    bid: (request: CreateTestOrderByItemRequest) => Promise<OrderId>;
    bidByCollection: (request: CreateTestOrderByCollectionRequest) => Promise<OrderId>;
    updateBidByPrepare: (orderId: OrderId, nextPrice: BigNumberValue) => Promise<OrderId>;
    updateBid: (orderId: OrderId, nextPrice: BigNumberValue) => Promise<OrderId>;
    acceptBid: (itemId: ItemId, orderId: OrderId, quantity: BigNumberValue) => Promise<void>;
    cancelOrder: (orderId: OrderId) => Promise<void>;
    waitOrder: (orderHash: OrderId, predicate?: (value: Order) => boolean) => Promise<Order>;
    waitOrderSubset: (orderHash: OrderId, subset: Partial<Order>) => Promise<Order>;
    waitStatus: (orderHash: OrderId, status: OrderStatus) => Promise<Order>;
}
export declare function generateExpirationDate(seconds?: number): Date;
