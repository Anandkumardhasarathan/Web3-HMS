import type { Maybe } from "@rarible/types";
import type { CollectionId } from "@rarible/api-client";
import type { RaribleSdkProvider } from "@rarible/sdk-wallet";
import { WalletType } from "@rarible/sdk-wallet";
import type { AbstractLogger } from "@rarible/logger/build/domain";
import type { IApisSdk, IRaribleInternalSdk, IRaribleSdk, IRaribleSdkConfig, ISdkContext } from "./domain";
import type { MintAndSellRequest } from "./types/nft/mint-and-sell/domain";
import type { HasCollection, HasCollectionId } from "./types/nft/mint/prepare-mint-request.type";
import type { RaribleSdkEnvironment } from "./config/domain";
/**
 * @module
 */
/**
 * Rarible sdk creation function
 *
 * @param provider undefined or BlockchainWallet
 * wallet can instantiate from @rarible/sdk-wallet package
 * @param env the environment that the sdk will interact with.
 * @param [config] config
 * @returns {IRaribleSdk} {@link IRaribleSdk}
 *
 * @example
 * ```typescript
 *    const web3 = new Web3(provider)
 *    const sdk = createRaribleSdk(web3, "prod")
 * ```
 */
export declare function createRaribleSdk(provider: Maybe<RaribleSdkProvider>, env: RaribleSdkEnvironment, config?: IRaribleSdkConfig): IRaribleSdk;
export type SetupMiddlewareData = {
    apis: IApisSdk;
    internalSdk: IRaribleInternalSdk;
    sdkContext: ISdkContext;
    externalLogger?: AbstractLogger;
};
/**
 * @internal
 */
export declare function getCollectionId(req: HasCollectionId | HasCollection): CollectionId;
export { WalletType };
export { getSimpleFlowFungibleBalance } from "./sdk-blockchains/flow/balance-simple";
export { IRaribleSdk, MintAndSellRequest };
export { RequestCurrency, RequestCurrencyAssetType } from "./common/domain";
export { UnionPart } from "./types/order/common/index";
export { UploadMetaResponse } from "./sdk-blockchains/union/meta/domain";
