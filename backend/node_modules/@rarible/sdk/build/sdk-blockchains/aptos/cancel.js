"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AptosCancel = void 0;
const tslib_1 = require("tslib");
const sdk_common_1 = require("@rarible/sdk-common");
const sdk_transaction_1 = require("@rarible/sdk-transaction");
const utils_1 = require("../../common/utils");
class AptosCancel {
    constructor(sdk, network, apis) {
        this.sdk = sdk;
        this.network = network;
        this.apis = apis;
        this.cancel = (request) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const order = yield this.apis.order.getValidatedOrderById({
                id: request.orderId,
            });
            const aptosOrderId = (0, sdk_common_1.extractId)(request.orderId);
            //Sell order
            if ((0, utils_1.isNativeToken)(order.take.type)) {
                const tx = yield this.sdk.order.cancel(aptosOrderId);
                return new sdk_transaction_1.BlockchainAptosTransaction(tx, this.network, this.sdk);
            }
            //Bid order
            if ((0, utils_1.isNativeToken)(order.make.type)) {
                if (order.take.type["@type"] === "NFT_OF_COLLECTION") {
                    const tx = yield this.sdk.order.cancelCollectionOffer(aptosOrderId);
                    return new sdk_transaction_1.BlockchainAptosTransaction(tx, this.network, this.sdk);
                }
                if (order.take.type["@type"] === "NFT") {
                    const tx = yield this.sdk.order.cancelTokenOffer(aptosOrderId);
                    return new sdk_transaction_1.BlockchainAptosTransaction(tx, this.network, this.sdk);
                }
            }
            throw new Error("Unrecognized type of order");
        });
        this.cancel = this.cancel.bind(this);
    }
}
exports.AptosCancel = AptosCancel;
