"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.awaitAllUserItems = exports.getSupportedCurrencies = exports.convertAptosToUnionContractAddress = exports.convertAptosToUnionItemId = exports.convertAptosToUnionCollectionId = exports.convertAptosToUnionOrderId = exports.convertUnionAddressToAptos = exports.convertAptosToUnionAddress = exports.APTOS_APT_CURRENCY = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@rarible/types");
const api_client_1 = require("@rarible/api-client");
const sdk_common_1 = require("@rarible/sdk-common");
const aptos_sdk_1 = require("@rarible/aptos-sdk");
exports.APTOS_APT_CURRENCY = (0, types_1.toCurrencyId)(`${api_client_1.Blockchain.APTOS}:${aptos_sdk_1.ENCODED_APT_TOKEN_TYPE}`);
function convertAptosToUnionAddress(address) {
    return (0, types_1.toUnionAddress)(`${api_client_1.Blockchain.APTOS}:${address}`);
}
exports.convertAptosToUnionAddress = convertAptosToUnionAddress;
function convertUnionAddressToAptos(address) {
    return (0, types_1.toUnionAddress)(`${api_client_1.Blockchain.APTOS}:${address}`);
}
exports.convertUnionAddressToAptos = convertUnionAddressToAptos;
function convertAptosToUnionOrderId(orderId) {
    return (0, types_1.toOrderId)(`${api_client_1.Blockchain.APTOS}:${orderId}`);
}
exports.convertAptosToUnionOrderId = convertAptosToUnionOrderId;
function convertAptosToUnionCollectionId(collection) {
    return (0, types_1.toCollectionId)(`${api_client_1.Blockchain.APTOS}:${collection}`);
}
exports.convertAptosToUnionCollectionId = convertAptosToUnionCollectionId;
function convertAptosToUnionItemId(item) {
    return (0, types_1.toItemId)(`${api_client_1.Blockchain.APTOS}:${item}`);
}
exports.convertAptosToUnionItemId = convertAptosToUnionItemId;
function convertAptosToUnionContractAddress(contract) {
    return (0, types_1.toUnionContractAddress)(`${api_client_1.Blockchain.APTOS}:${contract}`);
}
exports.convertAptosToUnionContractAddress = convertAptosToUnionContractAddress;
function getSupportedCurrencies() {
    return [{ blockchain: api_client_1.Blockchain.APTOS, type: "NATIVE" }];
}
exports.getSupportedCurrencies = getSupportedCurrencies;
function awaitAllUserItems(sdk, user) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return (0, sdk_common_1.retry)(10, 4000, () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const items = yield sdk.apis.item.getItemsByOwner({
                owner: user,
            });
            if (!items.items.length)
                throw new Error("No items");
            return items.items;
        }));
    });
}
exports.awaitAllUserItems = awaitAllUserItems;
