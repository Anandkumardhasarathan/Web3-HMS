"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCollectionAndMint = exports.mintAndWaitItem = exports.createAndWaitForCollection = void 0;
const tslib_1 = require("tslib");
const api_client_1 = require("@rarible/api-client");
const sdk_common_1 = require("@rarible/sdk-common");
const types_1 = require("@rarible/types");
function createAndWaitForCollection(sdk) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const randomId = Math.floor(Math.random() * 100000000);
        const response = yield sdk.nft.createCollection({
            blockchain: api_client_1.Blockchain.APTOS,
            //Collection name must be unique
            name: `Aptos collection #${randomId}-${randomId}`,
            description: "",
            uri: "ipfs://QmWYpMyoaUGNRSQbwhw97xM8tcRWm4Et598qtzmzsau7ch/",
        });
        yield response.tx.wait();
        yield (0, sdk_common_1.retry)(20, 4000, () => sdk.apis.collection.getCollectionById({ collection: response.address }));
        return response.address;
    });
}
exports.createAndWaitForCollection = createAndWaitForCollection;
function mintAndWaitItem(sdk, collection) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { itemId, transaction } = yield sdk.nft.mint({
            uri: "ipfs://ipfs/QmfVqzkQcKR1vCNqcZkeVVy94684hyLki7QcVzd9rmjuG5",
            collectionId: (0, types_1.toCollectionId)(collection),
        });
        yield transaction.wait();
        return itemId;
    });
}
exports.mintAndWaitItem = mintAndWaitItem;
function createCollectionAndMint(sdk) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const collection = yield createAndWaitForCollection(sdk);
        const itemId = yield mintAndWaitItem(sdk, collection);
        return { collection, itemId };
    });
}
exports.createCollectionAndMint = createCollectionAndMint;
