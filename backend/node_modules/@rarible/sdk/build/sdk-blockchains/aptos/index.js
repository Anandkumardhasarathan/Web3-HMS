"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAptosSdk = void 0;
const tslib_1 = require("tslib");
const aptos_sdk_1 = require("@rarible/aptos-sdk");
const sdk_common_1 = require("@rarible/sdk-common");
const common_1 = require("../../types/common");
const domain_1 = require("../../types/order/fill/domain");
const middleware_1 = require("../../common/middleware/middleware");
const nft_1 = require("./nft");
const balance_1 = require("./balance");
const listing_1 = require("./listing");
const cancel_1 = require("./cancel");
const bid_1 = require("./bid");
function createAptosSdk(wallet, apis, env, config) {
    const sdk = new aptos_sdk_1.AptosSdk(wallet === null || wallet === void 0 ? void 0 : wallet.wallet, env, config);
    const nftService = new nft_1.AptosNft(sdk, env, apis);
    const balanceService = new balance_1.AptosBalance(sdk, apis);
    const listingService = new listing_1.AptosListing(sdk, env, apis);
    const bidService = new bid_1.AptosBid(sdk, env, apis);
    const cancelService = new cancel_1.AptosCancel(sdk, env, apis);
    const preprocessMeta = middleware_1.Middlewarer.skipMiddleware(nftService.preprocessMeta);
    return {
        nft: {
            mint: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.notImplemented),
            burn: new common_1.MethodWithPrepare(nftService.burnBasic, nftService.burn),
            transfer: new common_1.MethodWithPrepare(nftService.transferBasic, nftService.transfer),
            generateTokenId: sdk_common_1.notImplemented,
            createCollection: sdk_common_1.notImplemented,
            preprocessMeta,
            uploadMeta: sdk_common_1.notImplemented,
        },
        order: {
            fill: { prepare: sdk_common_1.notImplemented },
            buy: new common_1.MethodWithPrepare(listingService.buyBasic, listingService.buy),
            batchBuy: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.notImplemented),
            acceptBid: new common_1.MethodWithPrepare(bidService.acceptBidBasic, bidService.acceptBid),
            sell: new common_1.MethodWithPrepare(listingService.sellBasic, listingService.sell),
            sellUpdate: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.notImplemented),
            bid: new common_1.MethodWithPrepare(bidService.bidBasic, bidService.bid),
            bidUpdate: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.notImplemented),
            cancel: cancelService.cancel,
        },
        balances: {
            getBalance: balanceService.getBalance,
            convert: sdk_common_1.notImplemented,
            transfer: sdk_common_1.notImplemented,
            getBiddingBalance: sdk_common_1.notImplemented,
            depositBiddingBalance: sdk_common_1.nonImplementedAction,
            withdrawBiddingBalance: sdk_common_1.nonImplementedAction,
        },
        restriction: {
            canTransfer: sdk_common_1.notImplemented,
            getFutureOrderFees() {
                return tslib_1.__awaiter(this, void 0, void 0, function* () {
                    return {
                        originFeeSupport: domain_1.OriginFeeSupport.NONE,
                        baseFee: 0,
                    };
                });
            },
        },
    };
}
exports.createAptosSdk = createAptosSdk;
