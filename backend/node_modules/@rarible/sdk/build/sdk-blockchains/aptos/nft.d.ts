import type { AptosSdk, SupportedNetwork as SupportedAptosNetwork } from "@rarible/aptos-sdk";
import type { IBlockchainTransaction } from "@rarible/sdk-transaction";
import type { PrepareMintRequest } from "../../types/nft/mint/prepare-mint-request.type";
import type { PrepareMintResponse, OffChainMintResponse, OnChainMintResponse } from "../../types/nft/mint/prepare";
import type { IApisSdk } from "../../domain";
import type { PrepareTransferRequest, PrepareTransferResponse } from "../../types/nft/transfer/domain";
import type { TransferSimplifiedRequest } from "../../types/nft/transfer/simplified";
import type { MintSimplifiedRequestOffChain, MintSimplifiedRequestOnChain } from "../../types/nft/mint/simplified";
import type { CreateCollectionResponse } from "../../types/nft/deploy/domain";
import type { BurnResponse, PrepareBurnRequest, PrepareBurnResponse } from "../../types/nft/burn/domain";
import type { BurnSimplifiedRequest } from "../../types/nft/burn/simplified";
import type { CreateCollectionRequestSimplified } from "../../types/nft/deploy/simplified";
import type { CommonTokenMetadataResponse, PreprocessMetaRequest } from "../../types/nft/mint/preprocess-meta";
export declare class AptosNft {
    private readonly sdk;
    private readonly network;
    private readonly apis;
    constructor(sdk: AptosSdk, network: SupportedAptosNetwork, apis: IApisSdk);
    preprocessMeta(meta: PreprocessMetaRequest): CommonTokenMetadataResponse;
    createCollectionBasic(request: CreateCollectionRequestSimplified): Promise<CreateCollectionResponse>;
    mintBasic(request: MintSimplifiedRequestOnChain): Promise<OnChainMintResponse>;
    mintBasic(request: MintSimplifiedRequestOffChain): Promise<OffChainMintResponse>;
    mint(prepareRequest: PrepareMintRequest): Promise<PrepareMintResponse>;
    transferBasic(request: TransferSimplifiedRequest): Promise<IBlockchainTransaction>;
    transfer(prepare: PrepareTransferRequest): Promise<PrepareTransferResponse>;
    burn(prepare: PrepareBurnRequest): Promise<PrepareBurnResponse>;
    burnBasic(request: BurnSimplifiedRequest): Promise<BurnResponse>;
}
