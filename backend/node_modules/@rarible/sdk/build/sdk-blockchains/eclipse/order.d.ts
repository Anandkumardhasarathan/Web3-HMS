/// <reference types="@project-serum/anchor/node_modules/@solana/web3.js" />
import type { Maybe } from "@rarible/types";
import type { SolanaWallet } from "@rarible/sdk-wallet";
import type { OrderId } from "@rarible/api-client";
import { PublicKey } from "@solana/web3.js";
import type { EclipseSdk } from "@rarible/eclipse-sdk";
import { type IBlockchainTransaction } from "@rarible/sdk-transaction";
import type * as OrderCommon from "../../types/order/common";
import { type PrepareFillRequest, type PrepareFillResponse } from "../../types/order/fill/domain";
import type { IApisSdk } from "../../domain";
import type { PrepareSellInternalResponse } from "../../types/order/sell/domain";
import type { SellSimplifiedRequest } from "../../types/order/sell/simplified";
import type { CancelOrderRequest } from "../../types/order/cancel/domain";
import type { AcceptBidSimplifiedRequest, BuySimplifiedRequest } from "../../types/order/fill/simplified";
import type { PrepareBidRequest, PrepareBidResponse } from "../../types/order/bid/domain";
import type { BidSimplifiedRequest } from "../../types/order/bid/simplified";
import type { IEclipseSdkConfig } from "./domain";
export declare class EclipseOrder {
    readonly sdk: EclipseSdk;
    readonly wallet: Maybe<SolanaWallet>;
    private readonly apis;
    private readonly config;
    constructor(sdk: EclipseSdk, wallet: Maybe<SolanaWallet>, apis: IApisSdk, config: IEclipseSdkConfig);
    sell(): Promise<PrepareSellInternalResponse>;
    sellCommon(request: OrderCommon.OrderInternalRequest, marketIdentifier: PublicKey): Promise<OrderId>;
    sellBasic(request: SellSimplifiedRequest): Promise<OrderId>;
    bid(prepare: PrepareBidRequest): Promise<PrepareBidResponse>;
    bidBasic(request: BidSimplifiedRequest): Promise<OrderId>;
    cancelBasic(request: CancelOrderRequest): Promise<IBlockchainTransaction>;
    buy(request: PrepareFillRequest): Promise<PrepareFillResponse>;
    acceptBid(request: PrepareFillRequest): Promise<PrepareFillResponse>;
    fill(request: PrepareFillRequest, shouldPayBaseFee: boolean): Promise<PrepareFillResponse>;
    buyBasic(request: BuySimplifiedRequest): Promise<IBlockchainTransaction>;
    acceptBidBasic(request: AcceptBidSimplifiedRequest): Promise<IBlockchainTransaction>;
}
