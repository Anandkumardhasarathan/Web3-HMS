import type { RaribleSdk } from "@rarible/protocol-ethereum-sdk";
import type { UnionAddress } from "@rarible/types";
import type { BigNumber } from "@rarible/utils";
import type { IBlockchainTransaction } from "@rarible/sdk-transaction";
import { Blockchain } from "@rarible/api-client";
import { Action } from "@rarible/action";
import type { Maybe } from "@rarible/types";
import type { EthereumWallet } from "@rarible/sdk-wallet";
import type { EthErc20AssetType, EthEthereumAssetType, NativeCurrencyAssetType, TokenCurrencyAssetType } from "@rarible/api-client/build/models/AssetType";
import type { ConvertRequest } from "../../types/balances";
import type { DepositBiddingBalanceRequest, GetBiddingBalanceRequest, WithdrawBiddingBalanceRequest } from "../../types/balances";
import type { RequestCurrency } from "../../common/domain";
import type { IApisSdk } from "../../domain";
import type { IBalanceTransferRequest } from "../../types/balances";
export declare class EthereumBalance {
    private sdk;
    private wallet;
    private readonly apis;
    constructor(sdk: RaribleSdk, wallet: Maybe<EthereumWallet>, apis: IApisSdk);
    getBalance(address: UnionAddress, currency: RequestCurrency): Promise<BigNumber>;
    convert(request: ConvertRequest): Promise<IBlockchainTransaction>;
    private send;
    getBiddingBalance(request: GetBiddingBalanceRequest): Promise<BigNumber>;
    private getBiddingCurrency;
    readonly depositBiddingBalance: Action<"send-tx", DepositBiddingBalanceRequest, IBlockchainTransaction<Blockchain, undefined>>;
    readonly withdrawBiddingBalance: Action<"send-tx", WithdrawBiddingBalanceRequest, IBlockchainTransaction<Blockchain, undefined>>;
    transfer(request: IBalanceTransferRequest): Promise<IBlockchainTransaction>;
}
export type TransferCurrency = NativeCurrencyAssetType | TokenCurrencyAssetType | EthEthereumAssetType | EthErc20AssetType;
