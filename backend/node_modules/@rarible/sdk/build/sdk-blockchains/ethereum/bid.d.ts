import type { RaribleSdk } from "@rarible/protocol-ethereum-sdk";
import type { OrderId } from "@rarible/api-client";
import type { Maybe } from "@rarible/types";
import type { EthereumWallet } from "@rarible/sdk-wallet";
import type { BigNumberValue } from "@rarible/utils";
import type { RequestCurrencyAssetType } from "../../common/domain";
import type * as OrderCommon from "../../types/order/common";
import type { GetConvertableValueResult, PrepareBidRequest, PrepareBidResponse, PrepareBidUpdateResponse } from "../../types/order/bid/domain";
import type { BidSimplifiedRequest, BidUpdateSimplifiedRequest } from "../../types/order/bid/simplified";
import type { IApisSdk } from "../../domain";
import type { EVMBlockchain } from "./common";
import type { EthereumBalance } from "./balance";
export declare class EthereumBid {
    private sdk;
    private wallet;
    private apis;
    private balanceService;
    constructor(sdk: RaribleSdk, wallet: Maybe<EthereumWallet>, apis: IApisSdk, balanceService: EthereumBalance);
    bidBasic(request: BidSimplifiedRequest): Promise<OrderId>;
    bidUpdateBasic(request: BidUpdateSimplifiedRequest): Promise<OrderId>;
    bid(prepare: PrepareBidRequest): Promise<PrepareBidResponse>;
    bidDataV2(prepare: PrepareBidRequest): Promise<PrepareBidResponse>;
    private getConvertableValue;
    private getAssetTypeForConvert;
    getConvertableValueCommon(assetType: RequestCurrencyAssetType, price: BigNumberValue, quantity: BigNumberValue, originFeeBp: number, blockchain: EVMBlockchain): Promise<GetConvertableValueResult>;
    convertCurrency(convertable: GetConvertableValueResult): Promise<void>;
    update(prepareRequest: OrderCommon.PrepareOrderUpdateRequest): Promise<PrepareBidUpdateResponse>;
}
export declare class InsufficientFundsError extends Error {
    constructor();
}
export declare class UpdateBidNotSupportedForThidKindOfOrderError extends Error {
    constructor(type: string);
}
