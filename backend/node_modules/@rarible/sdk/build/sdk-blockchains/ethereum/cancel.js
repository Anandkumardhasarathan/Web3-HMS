"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumCancel = void 0;
const tslib_1 = require("tslib");
const sdk_transaction_1 = require("@rarible/sdk-transaction");
const common_1 = require("./common");
class EthereumCancel {
    constructor(sdk, wallet, apis) {
        this.sdk = sdk;
        this.wallet = wallet;
        this.apis = apis;
        this.cancel = this.cancel.bind(this);
    }
    cancel(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!request.orderId) {
                throw new Error("OrderId has not been specified");
            }
            const [blockchain] = request.orderId.split(":");
            if (!(0, common_1.isEVMBlockchain)(blockchain)) {
                throw new Error("Not an ethereum order");
            }
            const order = yield this.apis.order.getValidatedOrderById({
                id: request.orderId,
            });
            const { ethereum } = (0, common_1.assertWallet)(this.wallet);
            const ethOrder = yield (0, common_1.getEthOrder)(ethereum, order);
            const cancelTx = yield this.sdk.order.cancel(ethOrder);
            return new sdk_transaction_1.BlockchainEthereumTransaction(cancelTx, yield (0, common_1.getWalletNetwork)(this.wallet));
        });
    }
}
exports.EthereumCancel = EthereumCancel;
