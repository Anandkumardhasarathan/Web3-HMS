import type { RaribleSdk } from "@rarible/protocol-ethereum-sdk";
import type { BigNumber, Maybe } from "@rarible/types";
import type { FillOrderRequest } from "@rarible/protocol-ethereum-sdk/build/order/fill-order/types";
import type { SimpleOrder } from "@rarible/protocol-ethereum-sdk/build/order/types";
import type { IBlockchainTransaction } from "@rarible/sdk-transaction";
import type { EthereumWallet } from "@rarible/sdk-wallet";
import type { Blockchain, Order } from "@rarible/api-client";
import { Platform } from "@rarible/api-client";
import type { AmmTradeInfo } from "@rarible/ethereum-api-client";
import type { TransactionData } from "@rarible/protocol-ethereum-sdk/build/order/fill-order/types";
import type { BatchFillRequest, FillRequest, IBatchBuyTransactionResult, PrepareBatchBuyResponse, PrepareFillRequest, PrepareFillResponse } from "../../types/order/fill/domain";
import { MaxFeesBasePointSupport, OriginFeeSupport, PayoutsSupport } from "../../types/order/fill/domain";
import type { BuyAmmInfoRequest } from "../../types/balances";
import type { AcceptBidSimplifiedRequest, BuySimplifiedRequest } from "../../types/order/fill/simplified";
import type { IApisSdk } from "../../domain";
import type { IGetBuyTxDataRequest } from "../../types/ethereum/domain";
export type SupportFlagsResponse = {
    originFeeSupport: OriginFeeSupport;
    payoutsSupport: PayoutsSupport;
    maxFeesBasePointSupport: MaxFeesBasePointSupport;
    supportsPartialFill: boolean;
};
export declare class EthereumFill {
    private sdk;
    private wallet;
    private apis;
    constructor(sdk: RaribleSdk, wallet: Maybe<EthereumWallet>, apis: IApisSdk);
    buyBasic(request: BuySimplifiedRequest): Promise<IBlockchainTransaction>;
    acceptBidBasic(request: AcceptBidSimplifiedRequest): Promise<IBlockchainTransaction>;
    getFillOrderRequest(order: SimpleOrder, fillRequest: FillRequest): FillOrderRequest;
    getSupportFlags(order: Order): SupportFlagsResponse;
    getPlatform(order: Order): Platform;
    getMaxAmount(order: Order): Promise<BigNumber | null>;
    isMultiple(order: Order): Promise<boolean>;
    hasCollectionAssetType(order: Order): boolean;
    private commonFill;
    /**
     * @deprecated
     * @param request
     */
    fill(request: PrepareFillRequest): Promise<PrepareFillResponse>;
    buy(request: PrepareFillRequest): Promise<PrepareFillResponse>;
    acceptBid(request: PrepareFillRequest): Promise<PrepareFillResponse>;
    batchBuy(prepareRequest: PrepareFillRequest[]): Promise<PrepareBatchBuyResponse>;
    getBuyAmmInfo(request: BuyAmmInfoRequest): Promise<AmmTradeInfo>;
    getBuyTxData(input: IGetBuyTxDataRequest): Promise<TransactionData>;
    batchBuyBasic(request: BatchFillRequest): Promise<IBlockchainTransaction<Blockchain, IBatchBuyTransactionResult>>;
}
