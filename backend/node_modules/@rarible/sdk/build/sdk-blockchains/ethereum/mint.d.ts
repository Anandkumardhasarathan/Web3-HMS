import type { RaribleSdk } from "@rarible/protocol-ethereum-sdk";
import type { NftTokenId } from "@rarible/ethereum-api-client";
import type { Collection, CollectionControllerApi } from "@rarible/api-client";
import type { CommonNftCollection } from "@rarible/protocol-ethereum-sdk/build/common/mint";
import type { Maybe } from "@rarible/types";
import type { EthereumWallet } from "@rarible/sdk-wallet";
import type { SupportedBlockchain } from "@rarible/sdk-common";
import type { PrepareMintResponse, OffChainMintResponse, OnChainMintResponse } from "../../types/nft/mint/prepare";
import type { MintRequest } from "../../types/nft/mint/mint-request.type";
import type { HasCollection, HasCollectionId, PrepareMintRequest } from "../../types/nft/mint/prepare-mint-request.type";
import type { IApisSdk } from "../../domain";
import type { CommonTokenMetadataResponse, PreprocessMetaRequest } from "../../types/nft/mint/preprocess-meta";
import type { MintSimplifiedRequestOffChain, MintSimplifiedRequestOnChain } from "../../types/nft/mint/simplified";
export declare class EthereumMint {
    private readonly sdk;
    private wallet;
    private readonly apis;
    constructor(sdk: RaribleSdk, wallet: Maybe<EthereumWallet>, apis: IApisSdk);
    handleSubmit(blockchain: SupportedBlockchain, request: MintRequest, nftCollection: CommonNftCollection, nftTokenId?: NftTokenId): Promise<import("@rarible/protocol-ethereum-sdk/build/nft/mint").MintOnChainResponse | import("@rarible/protocol-ethereum-sdk/build/nft/mint").MintOffChainResponse>;
    private toPart;
    isSupportsRoyalties(collection: CommonNftCollection): boolean;
    isSupportsLazyMint(blockchain: SupportedBlockchain, collection: CommonNftCollection): boolean;
    prepare(request: PrepareMintRequest): Promise<PrepareMintResponse>;
    mintBasic(request: MintSimplifiedRequestOnChain): Promise<OnChainMintResponse>;
    mintBasic(request: MintSimplifiedRequestOffChain): Promise<OffChainMintResponse>;
    preprocessMeta(meta: PreprocessMetaRequest): CommonTokenMetadataResponse;
}
export declare function getCollection(api: CollectionControllerApi, req: HasCollection | HasCollectionId): Promise<Collection>;
export declare class LazyMintIsNotSupportedError extends Error {
    constructor(collectionType: string);
}
export declare class UnsupportedCollectionError extends Error {
    constructor(collectionType: string);
}
export declare class UnsupportedBlockchainError extends Error {
    constructor(blockchain: string);
}
