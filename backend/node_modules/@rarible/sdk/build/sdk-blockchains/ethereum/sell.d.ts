import type { RaribleSdk } from "@rarible/protocol-ethereum-sdk";
import type { Maybe } from "@rarible/types";
import type { OrderId } from "@rarible/api-client";
import type { EthereumWallet } from "@rarible/sdk-wallet";
import type * as OrderCommon from "../../types/order/common";
import type { PrepareSellInternalRequest, PrepareSellInternalResponse } from "../../types/order/sell/domain";
import type { SellSimplifiedRequest, SellUpdateSimplifiedRequest } from "../../types/order/sell/simplified";
import type { GetFutureOrderFeeData } from "../../types/nft/restriction/domain";
import type { IApisSdk } from "../../domain";
export declare class EthereumSell {
    private sdk;
    private wallet;
    private apis;
    constructor(sdk: RaribleSdk, wallet: Maybe<EthereumWallet>, apis: IApisSdk);
    sell(req: PrepareSellInternalRequest): Promise<PrepareSellInternalResponse>;
    sellBasic(request: SellSimplifiedRequest): Promise<OrderId>;
    sellUpdateBasic(request: SellUpdateSimplifiedRequest): Promise<OrderId>;
    getFutureOrderFees(): Promise<GetFutureOrderFeeData>;
    private sellDataV2;
    update(prepareRequest: OrderCommon.PrepareOrderUpdateRequest): Promise<OrderCommon.PrepareOrderUpdateResponse>;
}
