import type { UnionAddress } from "@rarible/types";
import type { BigNumberValue } from "@rarible/utils";
import type { FlowSdk } from "@rarible/flow-sdk";
import type { Maybe } from "@rarible/types";
import type { FlowWallet } from "@rarible/sdk-wallet";
import type { FlowEnv, FlowNetwork } from "@rarible/flow-sdk";
import { BlockchainFlowTransaction } from "@rarible/sdk-transaction";
import type { RequestCurrency } from "../../common/domain";
import type { IBalanceTransferRequest } from "../../types/balances";
export declare class FlowBalance {
    private sdk;
    private env;
    private network;
    private wallet;
    constructor(sdk: FlowSdk, env: FlowEnv, network: FlowNetwork, wallet: Maybe<FlowWallet>);
    getBalance(address: UnionAddress, currency: RequestCurrency): Promise<BigNumberValue>;
    transfer(request: IBalanceTransferRequest): Promise<BlockchainFlowTransaction>;
}
