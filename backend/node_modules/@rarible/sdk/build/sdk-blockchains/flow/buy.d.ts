import type { FlowSdk } from "@rarible/flow-sdk";
import type { Order } from "@rarible/api-client";
import type { IBlockchainTransaction } from "@rarible/sdk-transaction";
import { BlockchainFlowTransaction } from "@rarible/sdk-transaction";
import type { FlowNetwork } from "@rarible/flow-sdk";
import type { IApisSdk } from "../../domain";
import type { FillRequest, PrepareFillRequest, PrepareFillResponse } from "../../types/order/fill/domain";
import type { BuySimplifiedRequest } from "../../types/order/fill/simplified";
import type { AcceptBidSimplifiedRequest } from "../../types/order/fill/simplified";
export declare class FlowBuy {
    private sdk;
    private readonly apis;
    private network;
    constructor(sdk: FlowSdk, apis: IApisSdk, network: FlowNetwork);
    private getPreparedOrder;
    private getFlowNftContract;
    private getFlowCurrency;
    fillCommon(request: PrepareFillRequest, isBid?: boolean): Promise<PrepareFillResponse>;
    buy(request: PrepareFillRequest): Promise<PrepareFillResponse>;
    acceptBid(request: PrepareFillRequest): Promise<PrepareFillResponse>;
    buyCommon(buyRequest: FillRequest & PrepareFillRequest & {
        order: Order;
    }): Promise<BlockchainFlowTransaction>;
    buyBasic(request: BuySimplifiedRequest): Promise<IBlockchainTransaction>;
    acceptBidBasic(request: AcceptBidSimplifiedRequest): Promise<IBlockchainTransaction>;
}
