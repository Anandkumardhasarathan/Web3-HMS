"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFlowSdk = void 0;
const flow_sdk_1 = require("@rarible/flow-sdk");
const flow_sdk_2 = require("@rarible/flow-sdk");
const api_client_1 = require("@rarible/api-client");
const sdk_common_1 = require("@rarible/sdk-common");
const domain_1 = require("../../domain");
const middleware_1 = require("../../common/middleware/middleware");
const upload_meta_1 = require("../union/meta/upload-meta");
const common_1 = require("../../types/common");
const apis_1 = require("../../common/apis");
const mint_1 = require("./mint");
const sell_1 = require("./sell");
const buy_1 = require("./buy");
const transfer_1 = require("./transfer");
const burn_1 = require("./burn");
const cancel_1 = require("./cancel");
const balance_1 = require("./balance");
const bid_1 = require("./bid");
const setup_account_1 = require("./setup-account");
function createFlowSdk(wallet, apis, network, params, config) {
    var _a, _b;
    const sdk = (0, flow_sdk_1.createFlowSdk)(wallet === null || wallet === void 0 ? void 0 : wallet.fcl, network, Object.assign(Object.assign({}, (params || {})), { apiKey: config === null || config === void 0 ? void 0 : config.apiKey, middleware: [
            ...((config === null || config === void 0 ? void 0 : config.logs) !== domain_1.LogsLevel.DISABLED ? [(0, apis_1.getErrorHandlerMiddleware)(apis_1.NetworkErrorCode.FLOW_NETWORK_ERR)] : []),
            ...((params === null || params === void 0 ? void 0 : params.middleware) || []),
        ] }), ((_b = (_a = config === null || config === void 0 ? void 0 : config.blockchain) === null || _a === void 0 ? void 0 : _a.FLOW) === null || _b === void 0 ? void 0 : _b.auth) || (wallet === null || wallet === void 0 ? void 0 : wallet.getAuth()));
    const blockchainNetwork = flow_sdk_2.FLOW_ENV_CONFIG[network].network;
    const sellService = new sell_1.FlowSell(sdk, apis);
    const mintService = new mint_1.FlowMint(sdk, apis, blockchainNetwork);
    const bidService = new bid_1.FlowBid(sdk);
    const burnService = new burn_1.FlowBurn(sdk, blockchainNetwork);
    const transferService = new transfer_1.FlowTransfer(sdk, blockchainNetwork);
    const fillService = new buy_1.FlowBuy(sdk, apis, blockchainNetwork);
    const cancelService = new cancel_1.FlowCancel(sdk, apis, blockchainNetwork);
    const balanceService = new balance_1.FlowBalance(sdk, network, blockchainNetwork, wallet);
    const preprocessMeta = middleware_1.Middlewarer.skipMiddleware(mintService.preprocessMeta);
    const metaUploader = new upload_meta_1.MetaUploader(api_client_1.Blockchain.FLOW, preprocessMeta);
    const setupAccount = new setup_account_1.FlowSetupAccount(sdk, blockchainNetwork);
    return {
        nft: {
            mint: new common_1.MethodWithPrepare(mintService.mintBasic, mintService.prepare),
            burn: new common_1.MethodWithPrepare(burnService.burnBasic, burnService.burn),
            transfer: new common_1.MethodWithPrepare(transferService.transferBasic, transferService.transfer),
            generateTokenId: () => Promise.resolve(undefined),
            createCollection: sdk_common_1.notImplemented,
            preprocessMeta,
            uploadMeta: metaUploader.uploadMeta,
        },
        order: {
            fill: { prepare: fillService.buy },
            sell: new common_1.MethodWithPrepare(sellService.sellBasic, sellService.sell),
            sellUpdate: new common_1.MethodWithPrepare(sellService.sellUpdateBasic, sellService.update),
            buy: new common_1.MethodWithPrepare(fillService.buyBasic, fillService.buy),
            batchBuy: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.nonImplementedAction),
            acceptBid: new common_1.MethodWithPrepare(fillService.acceptBidBasic, fillService.acceptBid),
            bid: new common_1.MethodWithPrepare(bidService.bidBasic, bidService.bid),
            bidUpdate: new common_1.MethodWithPrepare(bidService.bidUpdateBasic, bidService.update),
            cancel: cancelService.cancel,
        },
        balances: {
            getBalance: balanceService.getBalance,
            transfer: balanceService.transfer,
            convert: sdk_common_1.notImplemented,
            getBiddingBalance: sdk_common_1.notImplemented,
            depositBiddingBalance: sdk_common_1.nonImplementedAction,
            withdrawBiddingBalance: sdk_common_1.nonImplementedAction,
        },
        restriction: {
            canTransfer() {
                return Promise.resolve({ success: true });
            },
            getFutureOrderFees() {
                return sellService.getFutureOrderFees();
            },
        },
        flow: {
            setupAccount: setupAccount.setupAccount,
            checkInitMattelCollections: setupAccount.checkInitMattelCollections,
            setupMattelCollections: setupAccount.setupMattelCollections,
            setupGamisodesCollections: setupAccount.setupGamisodesCollections,
            checkInitGamisodesCollections: setupAccount.checkInitGamisodesCollections,
        },
    };
}
exports.createFlowSdk = createFlowSdk;
