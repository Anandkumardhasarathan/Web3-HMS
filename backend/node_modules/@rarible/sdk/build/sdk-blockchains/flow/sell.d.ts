import type { FlowSdk } from "@rarible/flow-sdk";
import type { Order, OrderId } from "@rarible/api-client";
import type * as OrderCommon from "../../types/order/common";
import type { CurrencyType } from "../../common/domain";
import type { IApisSdk } from "../../domain";
import type { PrepareSellInternalResponse } from "../../types/order/sell/domain";
import type { SellSimplifiedRequest } from "../../types/order/sell/simplified";
import type { SellUpdateSimplifiedRequest } from "../../types/order/sell/simplified";
import type { GetFutureOrderFeeData } from "../../types/nft/restriction/domain";
export declare class FlowSell {
    private readonly sdk;
    private readonly apis;
    static supportedCurrencies: CurrencyType[];
    constructor(sdk: FlowSdk, apis: IApisSdk);
    getPreparedOrder(request: OrderId): Promise<Order>;
    getFutureOrderFees(): Promise<GetFutureOrderFeeData>;
    sell(): Promise<PrepareSellInternalResponse>;
    sellCommon(sellRequest: OrderCommon.OrderInternalRequest): Promise<import("@rarible/flow-sdk/build/esm/order/sell").FlowSellResponse>;
    update(request: OrderCommon.PrepareOrderUpdateRequest): Promise<OrderCommon.PrepareOrderUpdateResponse>;
    sellBasic(request: SellSimplifiedRequest): Promise<OrderId>;
    sellUpdateBasic(request: SellUpdateSimplifiedRequest): Promise<OrderId>;
}
