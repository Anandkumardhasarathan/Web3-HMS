"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowSetupAccount = void 0;
const tslib_1 = require("tslib");
const sdk_transaction_1 = require("@rarible/sdk-transaction");
const converters_1 = require("./common/converters");
class FlowSetupAccount {
    constructor(sdk, network) {
        this.sdk = sdk;
        this.network = network;
        this.setupAccount = this.setupAccount.bind(this);
        this.checkInitMattelCollections = this.checkInitMattelCollections.bind(this);
        this.checkInitGamisodesCollections = this.checkInitGamisodesCollections.bind(this);
        this.setupMattelCollections = this.setupMattelCollections.bind(this);
        this.setupGamisodesCollections = this.setupGamisodesCollections.bind(this);
    }
    setupAccount(collection) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowCollection = (0, converters_1.getFlowCollection)(collection);
            const tx = yield this.sdk.collection.setupAccount(flowCollection);
            return new sdk_transaction_1.BlockchainFlowTransaction(tx, this.network);
        });
    }
    checkInitMattelCollections(address) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowAddress = address ? (0, converters_1.parseFlowAddressFromUnionAddress)(address) : undefined;
            const statuses = yield this.sdk.collection.checkInitCollections(flowAddress);
            const initCollections = Object.keys(statuses).every(key => statuses[key]);
            return {
                initCollections,
                collections: statuses,
            };
        });
    }
    checkInitGamisodesCollections(address) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const flowAddress = address ? (0, converters_1.parseFlowAddressFromUnionAddress)(address) : undefined;
            const statuses = yield this.sdk.collection.checkInitGamisodesCollections(flowAddress);
            const initCollections = Object.keys(statuses).every(key => statuses[key]);
            return {
                initCollections,
                collections: statuses,
            };
        });
    }
    setupMattelCollections() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tx = yield this.sdk.collection.setupMattelCollections();
            return new sdk_transaction_1.BlockchainFlowTransaction(tx, this.network);
        });
    }
    setupGamisodesCollections() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const tx = yield this.sdk.collection.setupGamisodesCollections();
            return new sdk_transaction_1.BlockchainFlowTransaction(tx, this.network);
        });
    }
}
exports.FlowSetupAccount = FlowSetupAccount;
