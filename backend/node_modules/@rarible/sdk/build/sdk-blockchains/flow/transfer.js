"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowTransfer = void 0;
const tslib_1 = require("tslib");
const action_1 = require("@rarible/action");
const sdk_transaction_1 = require("@rarible/sdk-transaction");
const types_1 = require("@rarible/types");
const converters_1 = require("./common/converters");
class FlowTransfer {
    constructor(sdk, network) {
        this.sdk = sdk;
        this.network = network;
        this.transfer = this.transfer.bind(this);
        this.transferBasic = this.transferBasic.bind(this);
    }
    transfer(prepare) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { itemId, contract } = (0, converters_1.parseFlowItemIdFromUnionItemId)(prepare.itemId);
            return {
                multiple: false,
                maxAmount: (0, types_1.toBigNumber)("1"),
                nftData: {
                    nftCollection: (0, converters_1.convertFlowContractAddress)(contract),
                },
                submit: action_1.Action.create({
                    id: "transfer",
                    run: (request) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        const toEVMAddress = (0, converters_1.parseFlowAddressFromUnionAddress)(request.to);
                        // @todo remove parseInt when strings are supports by flow-sdk
                        const tx = yield this.sdk.nft.transfer(contract, parseInt(itemId), toEVMAddress);
                        return new sdk_transaction_1.BlockchainFlowTransaction(tx, this.network);
                    }),
                }),
            };
        });
    }
    transferBasic(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.transfer(request);
            return response.submit(request);
        });
    }
}
exports.FlowTransfer = FlowTransfer;
