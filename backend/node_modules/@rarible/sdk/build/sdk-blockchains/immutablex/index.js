"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createImmutablexSdk = void 0;
const immutable_sdk_1 = require("@rarible/immutable-sdk");
const sdk_common_1 = require("@rarible/sdk-common");
const domain_1 = require("../../domain");
const common_1 = require("../../types/common");
const apis_1 = require("../../common/apis");
const nft_1 = require("./nft");
const order_1 = require("./order");
const balance_1 = require("./balance");
function createImmutablexSdk(wallet, apis, env, logsLevel) {
    const sdk = (0, immutable_sdk_1.createImxSdk)(wallet === null || wallet === void 0 ? void 0 : wallet.wallet.link, env, {
        apiClientParams: {
            middleware: [
                ...(logsLevel !== domain_1.LogsLevel.DISABLED ? [(0, apis_1.getErrorHandlerMiddleware)(apis_1.NetworkErrorCode.IMX_NETWORK_ERR)] : []),
            ],
        },
    });
    const nftService = new nft_1.ImxNftService(sdk, apis);
    const orderService = new order_1.ImxOrderService(sdk, apis);
    const balancesService = new balance_1.ImxBalanceService(sdk, apis);
    return {
        nft: {
            mint: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.notImplemented),
            burn: new common_1.MethodWithPrepare(nftService.burnBasic, nftService.burn),
            transfer: new common_1.MethodWithPrepare(nftService.transferBasic, nftService.transfer),
            generateTokenId: sdk_common_1.notImplemented,
            createCollection: sdk_common_1.nonImplementedAction,
            preprocessMeta: sdk_common_1.notImplemented,
            uploadMeta: sdk_common_1.notImplemented,
        },
        order: {
            fill: { prepare: orderService.buy },
            buy: new common_1.MethodWithPrepare(orderService.buyBasic, orderService.buy),
            batchBuy: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.nonImplementedAction),
            acceptBid: new common_1.MethodWithPrepare(orderService.acceptBidBasic, orderService.buy),
            sell: new common_1.MethodWithPrepare(orderService.sellBasic, orderService.sell),
            sellUpdate: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.notImplemented),
            bid: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.notImplemented),
            bidUpdate: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.notImplemented),
            cancel: orderService.cancelBasic,
        },
        balances: {
            getBalance: balancesService.getBalance,
            convert: sdk_common_1.notImplemented,
            transfer: sdk_common_1.notImplemented,
            getBiddingBalance: sdk_common_1.nonImplementedAction,
            depositBiddingBalance: sdk_common_1.nonImplementedAction,
            withdrawBiddingBalance: sdk_common_1.nonImplementedAction,
        },
        restriction: {
            canTransfer: sdk_common_1.notImplemented,
            getFutureOrderFees() {
                return orderService.getFutureOrderFees();
            },
        },
    };
}
exports.createImmutablexSdk = createImmutablexSdk;
