"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImxNftService = void 0;
const tslib_1 = require("tslib");
const sdk_transaction_1 = require("@rarible/sdk-transaction");
const types_1 = require("@rarible/types");
const action_1 = require("@rarible/action");
const common_1 = require("../aptos/common");
class ImxNftService {
    constructor(sdk, apis) {
        this.sdk = sdk;
        this.apis = apis;
        this.burn = this.burn.bind(this);
        this.burnBasic = this.burnBasic.bind(this);
        this.transfer = this.transfer.bind(this);
        this.transferBasic = this.transferBasic.bind(this);
    }
    burnBasic(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.burn(request);
            return response.submit(request);
        });
    }
    transferBasic(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.transfer(request);
            return response.submit(request);
        });
    }
    burn(prepare) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const item = yield this.apis.item.getItemById({ itemId: prepare.itemId });
            return {
                multiple: false,
                maxAmount: (0, types_1.toBigNumber)("1"),
                nftData: {
                    nftCollection: item.collection && (0, types_1.toUnionContractAddress)(item.collection),
                },
                submit: action_1.Action.create({
                    id: "burn",
                    run: () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        const [, contract, tokenId] = prepare.itemId.split(":");
                        const res = yield this.sdk.nft.burn({
                            assetClass: "ERC721",
                            tokenId: (0, types_1.toBigNumber)(tokenId),
                            contract: (0, types_1.toEVMAddress)(contract),
                        });
                        return new sdk_transaction_1.BlockchainImmutableXTransaction(res.txId);
                    }),
                }),
            };
        });
    }
    transfer(prepare) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const [, contract, tokenId] = prepare.itemId.split(":");
            return {
                multiple: false,
                maxAmount: (0, types_1.toBigNumber)("1"),
                nftData: {
                    nftCollection: (0, common_1.convertAptosToUnionContractAddress)(contract),
                },
                submit: action_1.Action.create({
                    id: "transfer",
                    run: (request) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        const [, address] = request.to.split(":");
                        const res = yield this.sdk.nft.transfer({
                            assetClass: "ERC721",
                            to: (0, types_1.toEVMAddress)(address),
                            tokenId: (0, types_1.toBigNumber)(tokenId),
                            contract: (0, types_1.toEVMAddress)(contract),
                        });
                        return new sdk_transaction_1.BlockchainImmutableXTransaction(res.txId);
                    }),
                }),
            };
        });
    }
}
exports.ImxNftService = ImxNftService;
