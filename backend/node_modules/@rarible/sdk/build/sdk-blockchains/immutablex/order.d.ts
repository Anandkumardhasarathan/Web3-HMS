import type { RaribleImxSdk } from "@rarible/immutable-sdk/src/domain";
import type { IBlockchainTransaction } from "@rarible/sdk-transaction";
import type { OrderId } from "@rarible/api-client";
import type { IApisSdk } from "../../domain";
import type { PrepareSellInternalResponse } from "../../types/order/sell/domain";
import type { PrepareFillRequest, PrepareFillResponse } from "../../types/order/fill/domain";
import type { CancelOrderRequest } from "../../types/order/cancel/domain";
import type { AcceptBidSimplifiedRequest, BuySimplifiedRequest } from "../../types/order/fill/simplified";
import type { SellSimplifiedRequest } from "../../types/order/sell/simplified";
import type { GetFutureOrderFeeData } from "../../types/nft/restriction/domain";
export declare class ImxOrderService {
    private sdk;
    private apis;
    constructor(sdk: RaribleImxSdk, apis: IApisSdk);
    buyBasic(request: BuySimplifiedRequest): Promise<IBlockchainTransaction>;
    acceptBidBasic(request: AcceptBidSimplifiedRequest): Promise<IBlockchainTransaction>;
    sellBasic(request: SellSimplifiedRequest): Promise<OrderId>;
    sell(): Promise<PrepareSellInternalResponse>;
    getFutureOrderFees(): Promise<GetFutureOrderFeeData>;
    buy(prepare: PrepareFillRequest): Promise<PrepareFillResponse>;
    cancelBasic(request: CancelOrderRequest): Promise<IBlockchainTransaction>;
}
