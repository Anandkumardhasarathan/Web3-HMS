"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSolanaSdk = void 0;
const solana_sdk_1 = require("@rarible/solana-sdk");
const sdk_common_1 = require("@rarible/sdk-common");
const common_1 = require("../../types/common");
const domain_1 = require("../../types/order/fill/domain");
function createSolanaSdk(wallet, apis, cluster, config) {
    const sdk = solana_sdk_1.SolanaSdk.create({
        connection: {
            cluster,
            endpoint: config === null || config === void 0 ? void 0 : config.endpoint,
            commitmentOrConfig: "confirmed",
        },
        debug: false,
    });
    // const nftService = new SolanaNft(sdk, wallet, apis, config)
    // const balanceService = new SolanaBalance(sdk, wallet, apis, config)
    // const orderService = new SolanaOrder(sdk, wallet, apis, config)
    // const fillService = new SolanaFill(sdk, wallet, apis, config)
    // const { createCollectionBasic } = new SolanaCollection(sdk, wallet, apis, config)
    //
    // const preprocessMeta = Middlewarer.skipMiddleware(nftService.preprocessMeta)
    // const metaUploader = new MetaUploader(Blockchain.SOLANA, preprocessMeta)
    return {
        nft: {
            mint: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            burn: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            transfer: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            generateTokenId: sdk_common_1.nonImplementedAction,
            createCollection: sdk_common_1.nonImplementedAction,
            preprocessMeta: sdk_common_1.notImplemented,
            uploadMeta: sdk_common_1.nonImplementedAction,
        },
        order: {
            fill: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            buy: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            batchBuy: new common_1.MethodWithPrepare(sdk_common_1.notImplemented, sdk_common_1.nonImplementedAction),
            acceptBid: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            sell: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            sellUpdate: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            bid: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            bidUpdate: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            cancel: sdk_common_1.nonImplementedAction,
        },
        balances: {
            getBalance: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            convert: sdk_common_1.nonImplementedAction,
            transfer: sdk_common_1.notImplemented,
            getBiddingBalance: new common_1.MethodWithPrepare(sdk_common_1.nonImplementedAction, sdk_common_1.nonImplementedAction),
            depositBiddingBalance: sdk_common_1.nonImplementedAction,
            withdrawBiddingBalance: sdk_common_1.nonImplementedAction,
        },
        restriction: {
            canTransfer: sdk_common_1.nonImplementedAction,
            getFutureOrderFees() {
                return Promise.resolve({ baseFee: 0, originFeeSupport: domain_1.OriginFeeSupport.NONE });
            },
        },
    };
}
exports.createSolanaSdk = createSolanaSdk;
