import type { TezosNetwork, TezosProvider, FTAssetType, XTZAssetType } from "@rarible/tezos-sdk";
import BigNumber from "bignumber.js";
import { AssetTypeV2 } from "@rarible/tezos-common";
import type { Collection } from "@rarible/api-client";
import type { Item } from "@rarible/api-client/build/models";
import type { OrderId } from "@rarible/api-client";
import type { OrderRequest } from "../../types/order/common";
import type { PrepareOrderUpdateRequest } from "../../types/order/common";
import type { PrepareBidResponse } from "../../types/order/bid/domain";
import type { PrepareBidRequest } from "../../types/order/bid/domain";
import type { PrepareBidUpdateResponse } from "../../types/order/bid/domain";
import type { RequestCurrencyAssetType } from "../../common/domain";
import type { IApisSdk } from "../../domain";
import type { BidSimplifiedRequest } from "../../types/order/bid/simplified";
import type { BidUpdateSimplifiedRequest } from "../../types/order/bid/simplified";
import type { MaybeProvider } from "./common";
export declare class TezosBid {
    private provider;
    private apis;
    private network;
    constructor(provider: MaybeProvider<TezosProvider>, apis: IApisSdk, network: TezosNetwork);
    parseTakeAssetType(type: RequestCurrencyAssetType): Promise<XTZAssetType | FTAssetType>;
    bid(prepare: PrepareBidRequest): Promise<PrepareBidResponse>;
    bidBasic(request: BidSimplifiedRequest): Promise<OrderId>;
    getCommonBidData(request: OrderRequest): Promise<{
        bid_type: AssetTypeV2;
        bid_asset_contract: string | undefined;
        bid_asset_token_id: BigNumber | undefined;
        bid: {
            bid_origin_fees: import("@rarible/tezos-sdk").Part[];
            bid_payouts: import("@rarible/tezos-sdk").Part[];
            bid_amount: BigNumber;
            bid_asset_qty: BigNumber;
            bid_expiry_date: number;
            bid_data_type: undefined;
            bid_data: undefined;
        };
    }>;
    updateBasic(request: BidUpdateSimplifiedRequest): Promise<OrderId>;
    update(request: PrepareOrderUpdateRequest): Promise<PrepareBidUpdateResponse>;
    private getBidRequestInfo;
}
export type BidRequestInfo = {
    collection: Collection;
    contract: string;
    item?: Item;
    tokenId?: string | undefined;
};
