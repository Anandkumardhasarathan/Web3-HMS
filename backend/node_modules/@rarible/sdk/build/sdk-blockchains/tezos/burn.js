"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TezosBurn = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@rarible/types");
const action_1 = require("@rarible/action");
const tezos_sdk_1 = require("@rarible/tezos-sdk");
const sdk_transaction_1 = require("@rarible/sdk-transaction");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const common_1 = require("./common");
const get_collection_type_1 = require("./common/get-collection-type");
class TezosBurn {
    constructor(provider, unionAPI, network) {
        this.provider = provider;
        this.unionAPI = unionAPI;
        this.network = network;
        this.burn = this.burn.bind(this);
        this.burnBasic = this.burnBasic.bind(this);
    }
    getRequiredProvider() {
        if (!(0, common_1.isExistedTezosProvider)(this.provider)) {
            throw new Error("Tezos provider is required");
        }
        return this.provider;
    }
    burn(prepare) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, common_1.checkChainId)(this.provider);
            const { contract, tokenId } = (0, common_1.getTezosItemData)(prepare.itemId);
            const item = yield this.unionAPI.item.getItemById({ itemId: prepare.itemId });
            const collectionType = yield (0, get_collection_type_1.getCollectionType)(this.provider, contract);
            return {
                multiple: collectionType === "TEZOS_MT",
                maxAmount: (0, types_1.toBigNumber)(item.supply),
                nftData: {
                    nftCollection: item.collection && (0, common_1.convertTezostoUnionContractAddress)(item.collection),
                },
                submit: action_1.Action.create({
                    id: "burn",
                    run: (request) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        const result = yield (0, tezos_sdk_1.burn)(this.getRequiredProvider(), {
                            asset_class: (0, common_1.getCollectionTypeAssetClass)(collectionType),
                            contract,
                            token_id: new bignumber_js_1.default(tokenId),
                        }, (0, common_1.getRequestAmount)(request === null || request === void 0 ? void 0 : request.amount, collectionType));
                        return new sdk_transaction_1.BlockchainTezosTransaction(result, this.network);
                    }),
                }),
            };
        });
    }
    burnBasic(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield this.burn(request);
            return response.submit(request);
        });
    }
}
exports.TezosBurn = TezosBurn;
