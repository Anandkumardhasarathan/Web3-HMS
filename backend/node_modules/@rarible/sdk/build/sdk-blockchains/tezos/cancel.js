"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TezosCancel = void 0;
const tslib_1 = require("tslib");
const action_1 = require("@rarible/action");
// eslint-disable-next-line camelcase
const main_1 = require("@rarible/tezos-sdk/dist/main");
const sdk_transaction_1 = require("@rarible/sdk-transaction");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const cancel_1 = require("@rarible/tezos-sdk/dist/sales/cancel");
// eslint-disable-next-line camelcase
const bids_1 = require("@rarible/tezos-sdk/dist/bids");
const common_1 = require("./common");
class TezosCancel {
    constructor(provider, unionAPI, network) {
        this.provider = provider;
        this.unionAPI = unionAPI;
        this.network = network;
        this.cancel = action_1.Action.create({
            id: "send-tx",
            run: (request) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield (0, common_1.checkChainId)(this.provider);
                const order = yield this.unionAPI.order.getOrderById({ id: request.orderId });
                if (!order) {
                    throw new Error("Order has not been found");
                }
                const provider = (0, common_1.getRequiredProvider)(this.provider);
                const makeIsNft = (0, common_1.isNftAssetType)(order.make.type) || (0, common_1.isMTAssetType)(order.make.type);
                if (order.data["@type"] === "TEZOS_RARIBLE_V3") {
                    if (makeIsNft) {
                        return this.cancelV2SellOrder(order);
                    }
                    if ((0, common_1.isNftAssetType)(order.take.type) || (0, common_1.isMTAssetType)(order.take.type)) {
                        const asset = yield (0, common_1.getTezosAssetTypeV2)(provider.config, order.make.type);
                        const bidData = {
                            asset_contract: (0, common_1.convertFromContractAddress)(order.take.type.contract),
                            asset_token_id: new bignumber_js_1.default(order.take.type.tokenId),
                            bid_type: asset.type,
                            bid_asset_contract: asset.asset_contract,
                            bid_asset_token_id: asset.asset_token_id,
                        };
                        const tx = yield (0, bids_1.cancel_bid)(provider, bidData);
                        return new sdk_transaction_1.BlockchainTezosTransaction(tx, this.network);
                    }
                }
                if (makeIsNft) {
                    if (order.data["@type"] === "TEZOS_HEN") {
                        const op = yield (0, main_1.hen_cancel_swap)(provider, request.orderId);
                        if (!op) {
                            throw new Error("Operation is undefined");
                        }
                        return new sdk_transaction_1.BlockchainTezosTransaction(op, this.network);
                    }
                    if (order.data["@type"] === "TEZOS_VERSUM_V1") {
                        const op = yield (0, main_1.versum_cancel_swap)(provider, request.orderId);
                        if (!op) {
                            throw new Error("Operation is undefined");
                        }
                        return new sdk_transaction_1.BlockchainTezosTransaction(op, this.network);
                    }
                    if (order.data["@type"] === "TEZOS_TEIA_V1") {
                        const op = yield (0, main_1.teia_cancel_swap)(provider, request.orderId);
                        if (!op) {
                            throw new Error("Operation is undefined");
                        }
                        return new sdk_transaction_1.BlockchainTezosTransaction(op, this.network);
                    }
                    if (order.data["@type"] === "TEZOS_OBJKT_V1") {
                        const op = yield (0, main_1.objkt_retract_ask_v1)(provider, request.orderId);
                        if (!op) {
                            throw new Error("Operation is undefined");
                        }
                        return new sdk_transaction_1.BlockchainTezosTransaction(op, this.network);
                    }
                    if (order.data["@type"] === "TEZOS_OBJKT_V2") {
                        const op = yield (0, main_1.objkt_retract_ask_v2)(provider, request.orderId);
                        if (!op) {
                            throw new Error("Operation is undefined");
                        }
                        return new sdk_transaction_1.BlockchainTezosTransaction(op, this.network);
                    }
                    if (order.data["@type"] === "TEZOS_FXHASH_V1") {
                        const op = yield (0, main_1.fxhash_v1_cancel_offer)(provider, request.orderId);
                        if (!op) {
                            throw new Error("Operation is undefined");
                        }
                        return new sdk_transaction_1.BlockchainTezosTransaction(op, this.network);
                    }
                    if (order.data["@type"] === "TEZOS_FXHASH_V2") {
                        const op = yield (0, main_1.fxhash_v2_cancel_listing)(provider, request.orderId);
                        if (!op) {
                            throw new Error("Operation is undefined");
                        }
                        return new sdk_transaction_1.BlockchainTezosTransaction(op, this.network);
                    }
                }
                const orderForm = (0, common_1.getTezosOrderLegacyForm)(order);
                const tx = yield (0, main_1.cancel)((0, common_1.getRequiredProvider)(this.provider), orderForm);
                return new sdk_transaction_1.BlockchainTezosTransaction(tx, this.network);
            }),
        });
        this.cancelBasic = this.cancelBasic.bind(this);
    }
    cancelV2SellOrder(order) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield (0, common_1.checkChainId)(this.provider);
            const provider = (0, common_1.getRequiredProvider)(this.provider);
            const currency = yield (0, common_1.getTezosAssetTypeV2)(this.provider.config, order.take.type);
            const cancelRequest = {
                asset_contract: (0, common_1.convertFromContractAddress)(order.make.type.contract),
                asset_token_id: new bignumber_js_1.default(order.make.type.tokenId),
                sale_asset_contract: currency.asset_contract,
                sale_asset_token_id: currency.asset_token_id,
                sale_type: currency.type,
            };
            const canceledOrder = yield (0, cancel_1.cancelV2)(provider, cancelRequest);
            if (!canceledOrder) {
                throw new Error("Cancel transaction has not been returned");
            }
            return new sdk_transaction_1.BlockchainTezosTransaction(canceledOrder, this.network);
        });
    }
    cancelBasic(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.cancel(request);
        });
    }
}
exports.TezosCancel = TezosCancel;
