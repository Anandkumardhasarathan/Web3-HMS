"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTezosOrderLegacyForm = exports.getRequestAmount = exports.isNftOrMTAssetType = exports.isFTAssetType = exports.isXtzAssetType = exports.isMTAssetType = exports.isNftAssetType = exports.getTokenIdString = exports.getTezosAssetTypeV2 = exports.convertTezosToUnionAddress = exports.convertTezosToCollectionAddress = exports.convertTezostoUnionContractAddress = exports.convertTezosItemId = exports.convertTezosOrderId = exports.convertUnionAddress = exports.convertFromContractAddress = exports.convertUnionParts = exports.getCollectionTypeAssetClass = exports.convertTezosToUnionAsset = exports.covertToLibAsset = exports.getTezosAssetType = exports.convertOrderToOrderForm = exports.convertOrderToFillOrder = exports.getSupportedCurrencies = exports.getRoyalties = exports.getPayouts = exports.getMakerPublicKey = exports.getTezosAddress = exports.getTezosItemData = exports.getTezosOrderId = exports.getRequiredProvider = exports.checkChainId = exports.getMaybeTezosProvider = exports.isExistedTezosProvider = exports.getTezosBasePath = exports.XTZ_DECIMALS = void 0;
const tslib_1 = require("tslib");
const api_client_1 = require("@rarible/api-client");
const tezos_sdk_1 = require("@rarible/tezos-sdk");
// eslint-disable-next-line camelcase
const tezos_common_1 = require("@rarible/tezos-common");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const types_1 = require("@rarible/types");
const types_2 = require("@rarible/types");
exports.XTZ_DECIMALS = 6;
function getTezosBasePath(network) {
    switch (network) {
        case "testnet": {
            return "https://test-tezos-api.rarible.org";
        }
        case "dev": {
            return "http://dev-tezos-api.rarible.int";
        }
        case "mainnet": {
            return "https://tezos-api.rarible.org";
        }
        default: {
            throw new Error("Unsupported tezos network");
        }
    }
}
exports.getTezosBasePath = getTezosBasePath;
function isExistedTezosProvider(provider) {
    return provider.tezos !== undefined;
}
exports.isExistedTezosProvider = isExistedTezosProvider;
function getMaybeTezosProvider(provider, network, config) {
    const unionApiBaseUrl = `${config.basePath}/v0.1`;
    switch (network) {
        case "testnet": {
            return {
                tezos: provider,
                config: {
                    exchange: "KT1S6H2FWxrpaD7aPRSW1cTTE1xPucXBSTL5",
                    transfer_proxy: "KT1WbVjXdmBpzzVoYSSUiNt6QFnSC3W768d1",
                    fees: new bignumber_js_1.default(0),
                    nft_public: "",
                    mt_public: "",
                    auction: "KT1CB5JBSC7kTxRV3ir2xsooMA1FLieiD4Mt",
                    auction_storage: "KT1KWAPPjuDq4ZeX67rzZWsf6eAeqwtuAfSP",
                    node_url: "https://rpc.tzkt.io/ithacanet",
                    chain_id: "NetXnHfVqm9iesp",
                    sales: "KT1NcKyhPnomH9PKGeDfvMiGH2PDgKCd5YuM",
                    sales_storage: "KT1GDUG3AQpaKmFjFHVn6PYT4Tprf7ccwPa3",
                    transfer_manager: "KT1LQPAi4w2h9GQ61S8NkENcNe3aH5vYEzjP",
                    bid: "KT1FiEi3Mrh31vJy39CD4hkiHq1AfRpTxNpF",
                    bid_storage: "KT1ENB6j6uMJn7MtDV4VBE1AAAwCXmMtzjUd",
                    sig_checker: "KT1Fbvkq4sMawS4rdNXswoN7ELgkNV1ooLB7",
                    tzkt: "https://api.ghostnet.tzkt.io",
                    dipdup: "https://testnet-tezos-indexer.rarible.org/v1/graphql",
                    union_api: unionApiBaseUrl,
                    objkt_sales_v1: "KT1Ax5fm2UNxjXGmrMDytREfqvYoCXoBB4Jo",
                    objkt_sales_v2: "KT1GiZuR6TdkgxZGQGZSdbC3Jox9JTSbqTB6",
                    royalties_provider: "KT1F68vtdE2HHhZa3jBNT1kCkMjaQAWCShXB",
                    hen_marketplace: "KT1XYgjgFQutFfgEiD7RuppSKZsawZbkpKxL",
                    hen_objkts: "KT1P2VyFd61A3ukizJoX37nFF9fqZnihv7Lw",
                    teia_marketplace: "KT1Anx515N2PK8A2ZX5uGNn7Gckh4WytLJmK",
                    versum_marketplace: "KT1B1Wz7jPH23EqKUpDwFDkw3A1yLxGZ4uJy",
                    versum_nfts: "KT1UH5RSbomuV1o6UuDB9yeACbqRMup3utGu",
                    fxhash_sales_v1: "KT1BEc3m6yxN856Y4zfArpDqQ1uZZ1HkDTRh",
                    fxhash_sales_v2: "KT1GCLoBSwUaNjaGXq5RtiP8CXTL3cEeMNDs",
                    fxhash_nfts_v1: "KT1VEXkw6rw6pJDP9APGsMneFafArijmM96j",
                    fxhash_nfts_v2: "KT1WSwXCWPPAxAy4ibPmFyCm4NhmSJT9UuxQ",
                    aggregator_tracker: "KT1DajvCNVScudRm3kCHPfUjsRCtmPnm375s",
                    aggregator_tracker_id: "09616c6c64617461",
                    api_key: config.apiKey,
                },
            };
        }
        case "dev": {
            return {
                tezos: provider,
                config: {
                    exchange: "KT1S6H2FWxrpaD7aPRSW1cTTE1xPucXBSTL5",
                    transfer_proxy: "KT1WbVjXdmBpzzVoYSSUiNt6QFnSC3W768d1",
                    fees: new bignumber_js_1.default(0),
                    nft_public: "",
                    mt_public: "",
                    chain_id: "NetXnHfVqm9iesp",
                    auction: "KT1CB5JBSC7kTxRV3ir2xsooMA1FLieiD4Mt",
                    auction_storage: "KT1KWAPPjuDq4ZeX67rzZWsf6eAeqwtuAfSP",
                    node_url: "https://rpc.tzkt.io/ghostnet",
                    sales: "KT1NcKyhPnomH9PKGeDfvMiGH2PDgKCd5YuM",
                    sales_storage: "KT1GDUG3AQpaKmFjFHVn6PYT4Tprf7ccwPa3",
                    transfer_manager: "KT1LQPAi4w2h9GQ61S8NkENcNe3aH5vYEzjP",
                    bid: "KT1FiEi3Mrh31vJy39CD4hkiHq1AfRpTxNpF",
                    bid_storage: "KT1ENB6j6uMJn7MtDV4VBE1AAAwCXmMtzjUd",
                    sig_checker: "KT1Fbvkq4sMawS4rdNXswoN7ELgkNV1ooLB7",
                    tzkt: "https://api.ghostnet.tzkt.io",
                    dipdup: "https://dev-tezos-indexer.rarible.org/v1/graphql",
                    union_api: "https://dev-api.rarible.org/v0.1",
                    objkt_sales_v1: "KT1Ax5fm2UNxjXGmrMDytREfqvYoCXoBB4Jo",
                    objkt_sales_v2: "KT1GiZuR6TdkgxZGQGZSdbC3Jox9JTSbqTB6",
                    royalties_provider: "KT1F68vtdE2HHhZa3jBNT1kCkMjaQAWCShXB",
                    hen_marketplace: "KT1XYgjgFQutFfgEiD7RuppSKZsawZbkpKxL",
                    hen_objkts: "KT1P2VyFd61A3ukizJoX37nFF9fqZnihv7Lw",
                    teia_marketplace: "KT1Anx515N2PK8A2ZX5uGNn7Gckh4WytLJmK",
                    versum_marketplace: "KT1B1Wz7jPH23EqKUpDwFDkw3A1yLxGZ4uJy",
                    versum_nfts: "KT1UH5RSbomuV1o6UuDB9yeACbqRMup3utGu",
                    fxhash_sales_v1: "KT1BEc3m6yxN856Y4zfArpDqQ1uZZ1HkDTRh",
                    fxhash_sales_v2: "KT1GCLoBSwUaNjaGXq5RtiP8CXTL3cEeMNDs",
                    fxhash_nfts_v1: "KT1VEXkw6rw6pJDP9APGsMneFafArijmM96j",
                    fxhash_nfts_v2: "KT1WSwXCWPPAxAy4ibPmFyCm4NhmSJT9UuxQ",
                    aggregator_tracker: "KT1DajvCNVScudRm3kCHPfUjsRCtmPnm375s",
                    aggregator_tracker_id: "09616c6c64617461",
                    api_key: config.apiKey,
                },
            };
        }
        case "mainnet": {
            return {
                tezos: provider,
                config: {
                    exchange: "KT198mqFKkiWerXLmMCw69YB1i6yzYtmGVrC",
                    transfer_proxy: "KT1N2oby9tYmv5tjkGD1KyVzkDRCmgDkXgSD",
                    fees: new bignumber_js_1.default(0),
                    nft_public: "",
                    mt_public: "",
                    auction: "",
                    auction_storage: "",
                    node_url: "https://rpc.tzkt.io/mainnet",
                    chain_id: "NetXdQprcVkpaWU",
                    sales: "KT1N4Rrm6BU6229drs6scrH3vard1pPngMyA",
                    sales_storage: "KT1BEZNm3E25rZtXfPPKr5Jxygbi2kL2cCEW",
                    transfer_manager: "KT1ViAbsAM5rp89yVydEkbQozp1S12zqirwS",
                    bid: "",
                    bid_storage: "",
                    sig_checker: "KT1VAmfDTkcYKMZZQhwuxtCGoD1hx7v5bjZ9",
                    tzkt: "https://api.mainnet.tzkt.io",
                    dipdup: "https://tezos-indexer.rarible.org/v1/graphql",
                    union_api: unionApiBaseUrl,
                    objkt_sales_v2: "KT1WvzYHCNBvDSdwafTHv7nJ1dWmZ8GCYuuC",
                    objkt_sales_v1: "KT1FvqJwEDWb1Gwc55Jd1jjTHRVWbYKUUpyq",
                    royalties_provider: "KT1HNNrmCk1fpqveRDz8Fvww2GM4gPzmA7fo",
                    hen_marketplace: "KT1HbQepzV1nVGg8QVznG7z4RcHseD5kwqBn",
                    hen_objkts: "KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton",
                    teia_marketplace: "KT1PHubm9HtyQEJ4BBpMTVomq6mhbfNZ9z5w",
                    versum_marketplace: "KT1GyRAJNdizF1nojQz62uGYkx8WFRUJm9X5",
                    versum_nfts: "KT1LjmAdYQCLBjwv4S2oFkEzyHVkomAf5MrW",
                    fxhash_sales_v1: "KT1Xo5B7PNBAeynZPmca4bRh6LQow4og1Zb9",
                    fxhash_sales_v2: "KT1GbyoDi7H1sfXmimXpptZJuCdHMh66WS9u",
                    fxhash_nfts_v1: "KT1KEa8z6vWXDJrVqtMrAeDVzsvxat3kHaCE",
                    fxhash_nfts_v2: "KT1U6EHmNxJTkvaWJ4ThczG4FSDaHC21ssvi",
                    aggregator_tracker: "KT1Gv1tPJ3nU5T6VmFc12M6NKc5i51MYVPjG",
                    aggregator_tracker_id: "09616c6c64617461",
                    api_key: config.apiKey,
                },
            };
        }
        default: {
            throw new Error("Unsupported tezos network for config");
        }
    }
}
exports.getMaybeTezosProvider = getMaybeTezosProvider;
const checkChainIdCache = new Map();
function checkChainId(provider) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        let walletChainId = checkChainIdCache.get(provider.tezos);
        if (!walletChainId) {
            walletChainId = yield ((_a = provider.tezos) === null || _a === void 0 ? void 0 : _a.chain_id());
            checkChainIdCache.set(provider.tezos, walletChainId);
        }
        if (walletChainId !== provider.config.chain_id) {
            throw new Error(`Config chainId=${provider.config.chain_id}, but wallet chainId=${walletChainId}`);
        }
    });
}
exports.checkChainId = checkChainId;
function getRequiredProvider(provider) {
    if (!isExistedTezosProvider(provider)) {
        throw new Error("Tezos provider is required");
    }
    return provider;
}
exports.getRequiredProvider = getRequiredProvider;
function getTezosOrderId(orderId) {
    if (!orderId) {
        throw new Error("OrderId has not been specified");
    }
    const [blockchain, id] = orderId.split(":");
    if (blockchain !== api_client_1.Blockchain.TEZOS) {
        throw new Error("Not an TEZOS order");
    }
    return id;
}
exports.getTezosOrderId = getTezosOrderId;
function getTezosItemData(itemId) {
    const [domain, contract, tokenId] = itemId.split(":");
    if (domain !== api_client_1.Blockchain.TEZOS) {
        throw new Error(`Not an tezos item: ${itemId}`);
    }
    return {
        itemId: `${contract}:${tokenId}`,
        contract,
        tokenId,
        domain,
    };
}
exports.getTezosItemData = getTezosItemData;
function getTezosAddress(address) {
    const [blockchain, tezosAddress] = address.split(":");
    if (blockchain !== api_client_1.Blockchain.TEZOS) {
        throw new Error(`Not an tezos address: ${address}`);
    }
    return tezosAddress;
}
exports.getTezosAddress = getTezosAddress;
function getMakerPublicKey(provider) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const maker = yield (0, tezos_sdk_1.get_public_key)(provider);
        if (!maker) {
            throw new Error("Maker does not exist");
        }
        return maker;
    });
}
exports.getMakerPublicKey = getMakerPublicKey;
function getPayouts(provider, requestPayouts) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return convertUnionParts(requestPayouts) || [];
    });
}
exports.getPayouts = getPayouts;
function getRoyalties(royalties) {
    return ((royalties === null || royalties === void 0 ? void 0 : royalties.reduce((acc, royalty) => {
        const account = getTezosAddress(royalty.account);
        acc[account] = new bignumber_js_1.default(royalty.value);
        return acc;
    }, {})) || {});
}
exports.getRoyalties = getRoyalties;
function getSupportedCurrencies() {
    return [
        { blockchain: api_client_1.Blockchain.TEZOS, type: "NATIVE" },
        { blockchain: api_client_1.Blockchain.TEZOS, type: "TEZOS_FT" },
    ];
}
exports.getSupportedCurrencies = getSupportedCurrencies;
function convertOrderToFillOrder(order) {
    return Object.assign(Object.assign({}, convertOrderToOrderForm(order)), { makeStock: (0, types_2.toBigNumber)(order.makeStock) });
}
exports.convertOrderToFillOrder = convertOrderToFillOrder;
function convertOrderToOrderForm(order) {
    if (order.data["@type"] !== "TEZOS_RARIBLE_V2") {
        throw new Error("Unsupported order data type");
    }
    return {
        type: "RARIBLE_V2",
        maker: convertUnionAddress(order.maker),
        maker_edpk: order.data.makerEdpk,
        taker: order.taker !== undefined ? convertUnionAddress(order.taker) : undefined,
        taker_edpk: order.data.takerEdpk,
        make: {
            asset_type: getTezosAssetType(order.make.type),
            value: new bignumber_js_1.default(order.make.value),
        },
        take: {
            asset_type: getTezosAssetType(order.take.type),
            value: new bignumber_js_1.default(order.take.value),
        },
        salt: order.salt,
        start: order.startedAt ? parseInt(order.startedAt) : undefined,
        end: order.endedAt ? parseInt(order.endedAt) : undefined,
        signature: order.signature,
        data: {
            data_type: "V1",
            payouts: convertUnionParts(order.data.payouts),
            origin_fees: convertUnionParts(order.data.originFees),
        },
    };
}
exports.convertOrderToOrderForm = convertOrderToOrderForm;
function getTezosAssetType(type) {
    switch (type["@type"]) {
        case "XTZ": {
            return {
                asset_class: "XTZ",
            };
        }
        case "TEZOS_FT": {
            return {
                asset_class: "FT",
                contract: convertFromContractAddress(type.contract),
                token_id: type.tokenId ? new bignumber_js_1.default(type.tokenId) : undefined,
            };
        }
        case "TEZOS_NFT": {
            return {
                asset_class: "NFT",
                contract: convertFromContractAddress(type.contract),
                token_id: new bignumber_js_1.default(type.tokenId),
            };
        }
        case "TEZOS_MT": {
            return {
                asset_class: "MT",
                contract: convertFromContractAddress(type.contract),
                token_id: new bignumber_js_1.default(type.tokenId),
            };
        }
        default: {
            throw new Error("Invalid take asset type");
        }
    }
}
exports.getTezosAssetType = getTezosAssetType;
function covertToLibAsset(a) {
    switch (a.assetType.assetClass) {
        case "XTZ": {
            return {
                asset_type: { asset_class: a.assetType.assetClass },
                value: new bignumber_js_1.default(a.value),
            };
        }
        case "FT": {
            return {
                asset_type: {
                    asset_class: a.assetType.assetClass,
                    contract: a.assetType.contract,
                    token_id: a.assetType.tokenId === undefined ? undefined : new bignumber_js_1.default(a.assetType.tokenId),
                },
                value: new bignumber_js_1.default(a.value),
            };
        }
        case "NFT":
        case "MT":
            return {
                asset_type: {
                    asset_class: a.assetType.assetClass,
                    contract: a.assetType.contract,
                    token_id: new bignumber_js_1.default(a.assetType.tokenId),
                },
                value: new bignumber_js_1.default(a.value),
            };
        default:
            throw new Error("Unknown Asset Class");
    }
}
exports.covertToLibAsset = covertToLibAsset;
function convertTezosToUnionAsset(assetType) {
    switch (assetType.assetClass) {
        case "XTZ": {
            return { "@type": "XTZ" };
        }
        case "FT": {
            return {
                "@type": "TEZOS_FT",
                contract: convertTezostoUnionContractAddress(assetType.contract),
                tokenId: assetType.tokenId ? (0, types_2.toBigNumber)(assetType.tokenId) : undefined,
            };
        }
        case "NFT": {
            return {
                "@type": "TEZOS_NFT",
                contract: convertTezostoUnionContractAddress(assetType.contract),
                tokenId: (0, types_2.toBigNumber)(assetType.tokenId),
            };
        }
        case "MT": {
            return {
                "@type": "TEZOS_MT",
                contract: convertTezostoUnionContractAddress(assetType.contract),
                tokenId: (0, types_2.toBigNumber)(assetType.tokenId),
            };
        }
        default: {
            throw new Error("Invalid asset type");
        }
    }
}
exports.convertTezosToUnionAsset = convertTezosToUnionAsset;
function getCollectionTypeAssetClass(type) {
    switch (type) {
        case api_client_1.CollectionType.TEZOS_MT:
            return "MT";
        case api_client_1.CollectionType.TEZOS_NFT:
            return "NFT";
        default:
            throw new Error("Unrecognized NFT collection type");
    }
}
exports.getCollectionTypeAssetClass = getCollectionTypeAssetClass;
function convertUnionParts(parts) {
    return ((parts === null || parts === void 0 ? void 0 : parts.map(p => ({
        account: getTezosAddress(p.account),
        value: new bignumber_js_1.default(p.value),
    }))) || []);
}
exports.convertUnionParts = convertUnionParts;
function convertFromContractAddress(contract) {
    if (!contract)
        throw new Error("Contract is undefined");
    const [blockchain, tezosAddress] = contract.split(":");
    if (blockchain !== api_client_1.Blockchain.TEZOS) {
        throw new Error(`Not a tezos contract address: ${contract}`);
    }
    return tezosAddress;
}
exports.convertFromContractAddress = convertFromContractAddress;
function convertUnionAddress(address) {
    const [blockchain, tezosAddress] = address.split(":");
    if (blockchain !== api_client_1.Blockchain.TEZOS) {
        throw new Error(`Not a tezos address: ${address}`);
    }
    return tezosAddress;
}
exports.convertUnionAddress = convertUnionAddress;
function convertTezosOrderId(hash) {
    return (0, types_1.toOrderId)(`${api_client_1.Blockchain.TEZOS}:${hash}`);
}
exports.convertTezosOrderId = convertTezosOrderId;
function convertTezosItemId(itemId) {
    return (0, types_1.toItemId)(`${api_client_1.Blockchain.TEZOS}:${itemId}`);
}
exports.convertTezosItemId = convertTezosItemId;
function convertTezostoUnionContractAddress(address) {
    return (0, types_1.toUnionContractAddress)(`${api_client_1.Blockchain.TEZOS}:${address}`);
}
exports.convertTezostoUnionContractAddress = convertTezostoUnionContractAddress;
function convertTezosToCollectionAddress(address) {
    return (0, types_1.toCollectionId)(`${api_client_1.Blockchain.TEZOS}:${address}`);
}
exports.convertTezosToCollectionAddress = convertTezosToCollectionAddress;
function convertTezosToUnionAddress(address) {
    return (0, types_1.toUnionAddress)(`${api_client_1.Blockchain.TEZOS}:${address}`);
}
exports.convertTezosToUnionAddress = convertTezosToUnionAddress;
function getTezosAssetTypeV2(config, type) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        switch (type["@type"]) {
            case "XTZ": {
                return {
                    type: tezos_sdk_1.AssetTypeV2.XTZ,
                    asset_contract: undefined,
                    asset_token_id: undefined,
                };
            }
            case "TEZOS_FT": {
                const contract = convertFromContractAddress(type.contract);
                let ftType = tezos_sdk_1.AssetTypeV2.FA2;
                try {
                    ftType = yield (0, tezos_common_1.get_ft_type)(config, contract);
                }
                catch (e) {
                    console.log("error get_ft_type", e, contract);
                }
                if (ftType === tezos_sdk_1.AssetTypeV2.FA2) {
                    return {
                        type: tezos_sdk_1.AssetTypeV2.FA2,
                        asset_contract: contract,
                        asset_token_id: new bignumber_js_1.default(type.tokenId || 0),
                    };
                }
                else if (ftType === tezos_sdk_1.AssetTypeV2.FA12) {
                    return {
                        type: tezos_sdk_1.AssetTypeV2.FA12,
                        asset_contract: contract,
                        asset_token_id: undefined,
                    };
                }
                else {
                    throw new Error("Unrecognized FT contract type, check contract and network");
                }
            }
            default: {
                throw new Error("Invalid asset type");
            }
        }
    });
}
exports.getTezosAssetTypeV2 = getTezosAssetTypeV2;
function getTokenIdString(tokenId) {
    return tokenId !== undefined ? tokenId.toString() : undefined;
}
exports.getTokenIdString = getTokenIdString;
function isNftAssetType(assetType) {
    return assetType["@type"] === "TEZOS_NFT";
}
exports.isNftAssetType = isNftAssetType;
function isMTAssetType(assetType) {
    return assetType["@type"] === "TEZOS_MT";
}
exports.isMTAssetType = isMTAssetType;
function isXtzAssetType(assetType) {
    return assetType["@type"] === "XTZ";
}
exports.isXtzAssetType = isXtzAssetType;
function isFTAssetType(assetType) {
    return assetType["@type"] === "TEZOS_FT";
}
exports.isFTAssetType = isFTAssetType;
function isNftOrMTAssetType(assetType) {
    return isNftAssetType(assetType) || isMTAssetType(assetType);
}
exports.isNftOrMTAssetType = isNftOrMTAssetType;
function getRequestAmount(orderAmount, collectionType) {
    if (collectionType === api_client_1.CollectionType.TEZOS_MT) {
        if (orderAmount === undefined) {
            throw new Error("You should set amount of asset");
        }
        return new bignumber_js_1.default(orderAmount.toFixed());
    }
    return undefined;
}
exports.getRequestAmount = getRequestAmount;
function getTezosOrderLegacyForm(order) {
    if (order.data["@type"] !== "TEZOS_RARIBLE_V2") {
        throw new Error(`Tezos order is not legacy (orderId=${order.id})`);
    }
    const orderData = order.data;
    if (!orderData.legacyData) {
        throw new Error(`Tezos legacy order have to include legacyData (orderId=${order.id})`);
    }
    let parsedLegacyData;
    try {
        parsedLegacyData = JSON.parse(orderData.legacyData);
    }
    catch (e) {
        throw new Error("Tezos legacy order parse data error");
    }
    return (0, tezos_sdk_1.order_of_json)(parsedLegacyData);
}
exports.getTezosOrderLegacyForm = getTezosOrderLegacyForm;
