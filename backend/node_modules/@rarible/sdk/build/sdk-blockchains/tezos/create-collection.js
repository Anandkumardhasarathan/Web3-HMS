"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TezosCreateCollection = void 0;
const tslib_1 = require("tslib");
const action_1 = require("@rarible/action");
// eslint-disable-next-line camelcase
const tezos_sdk_1 = require("@rarible/tezos-sdk");
const sdk_transaction_1 = require("@rarible/sdk-transaction");
const api_client_1 = require("@rarible/api-client");
const common_1 = require("./common");
class TezosCreateCollection {
    constructor(provider, network) {
        this.provider = provider;
        this.network = network;
        this.createCollection = action_1.Action.create({
            id: "send-tx",
            run: (request) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (request.blockchain !== api_client_1.Blockchain.TEZOS) {
                    throw new Error("Wrong blockchain");
                }
                yield (0, common_1.checkChainId)(this.provider);
                const operationResult = yield this.getDeployOperation(request.asset);
                return {
                    tx: new sdk_transaction_1.BlockchainTezosTransaction(operationResult, this.network),
                    address: (0, common_1.convertTezostoUnionContractAddress)(operationResult.contract),
                };
            }),
        });
        this.createCollectionSimplified = this.createCollectionSimplified.bind(this);
    }
    getMetadataJSON(asset) {
        var _a;
        const json = {
            name: asset.arguments.name,
            homepage: asset.arguments.homepage,
        };
        if (asset.arguments.description) {
            json["description"] = asset.arguments.description;
        }
        if (asset.arguments.license) {
            json["license"] = asset.arguments.license;
        }
        if (asset.arguments.version) {
            json["version"] = asset.arguments.version;
        }
        if ((_a = asset.arguments.authors) === null || _a === void 0 ? void 0 : _a.length) {
            json["authors"] = asset.arguments.authors;
        }
        return JSON.stringify(json);
    }
    getDeployOperation(asset) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const provider = (0, common_1.getRequiredProvider)(this.provider);
            const owner = yield provider.tezos.address();
            const meta = {
                "": "tezos-storage:metadata",
                metadata: this.getMetadataJSON(asset),
            };
            if (asset.assetType === "NFT") {
                if (!asset.arguments.isUserToken) {
                    return (0, tezos_sdk_1.deploy_nft_public)(provider, owner, meta);
                }
                else {
                    return (0, tezos_sdk_1.deploy_nft_private)(provider, owner, meta);
                }
            }
            else if (asset.assetType === "MT") {
                if (!asset.arguments.isUserToken) {
                    return (0, tezos_sdk_1.deploy_mt_public)(provider, owner, meta);
                }
                else {
                    return (0, tezos_sdk_1.deploy_mt_private)(provider, owner, meta);
                }
            }
            else {
                throw new Error(`Unsupported asset type=${asset.assetType}`);
            }
        });
    }
    createCollectionSimplified(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (request.blockchain !== api_client_1.Blockchain.TEZOS) {
                throw new Error("Wrong blockchain");
            }
            const { isPublic, type } = request, commonRequest = tslib_1.__rest(request, ["isPublic", "type"]);
            const operationResult = yield this.getDeployOperation({
                assetType: type,
                arguments: Object.assign(Object.assign({}, commonRequest), { isUserToken: !isPublic }),
            });
            return {
                tx: new sdk_transaction_1.BlockchainTezosTransaction(operationResult, this.network),
                address: (0, common_1.convertTezostoUnionContractAddress)(operationResult.contract),
            };
        });
    }
}
exports.TezosCreateCollection = TezosCreateCollection;
