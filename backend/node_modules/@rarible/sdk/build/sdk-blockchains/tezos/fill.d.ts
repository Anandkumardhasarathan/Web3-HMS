import type { TezosNetwork, TezosProvider } from "@rarible/tezos-sdk";
import type { BigNumber as RaribleBigNumber } from "@rarible/types";
import type { IBlockchainTransaction } from "@rarible/sdk-transaction";
import { BlockchainTezosTransaction } from "@rarible/sdk-transaction";
import type { Order } from "@rarible/api-client";
import { Blockchain } from "@rarible/api-client";
import type { FillRequest, PrepareFillRequest, PrepareFillResponse, IBatchBuyTransactionResult } from "../../types/order/fill/domain";
import type { BatchFillRequest, PrepareBatchBuyResponse } from "../../types/order/fill/domain";
import type { IApisSdk } from "../../domain";
import type { AcceptBidSimplifiedRequest, BuySimplifiedRequest } from "../../types/order/fill/simplified";
import type { MaybeProvider } from "./common";
export declare class TezosFill {
    private provider;
    private unionAPI;
    private network;
    constructor(provider: MaybeProvider<TezosProvider>, unionAPI: IApisSdk, network: TezosNetwork);
    getPreparedOrder(request: PrepareFillRequest): Promise<Order>;
    getMaxAmount(order: Order): Promise<RaribleBigNumber>;
    isMultiple(order: Order): boolean;
    private buyV2;
    buy(request: PrepareFillRequest): Promise<PrepareFillResponse>;
    private fillV1Order;
    buyBasic(request: BuySimplifiedRequest): Promise<IBlockchainTransaction>;
    acceptBidBasic(request: AcceptBidSimplifiedRequest): Promise<IBlockchainTransaction>;
    acceptBid(request: PrepareFillRequest): Promise<PrepareFillResponse>;
    fillCommon(fillRequest: FillRequest, preparedOrder: Order): Promise<BlockchainTezosTransaction>;
    batchBuyCommon(fillRequest: BatchFillRequest): Promise<IBlockchainTransaction<Blockchain, IBatchBuyTransactionResult>>;
    batchBuyBasic(request: BatchFillRequest): Promise<IBlockchainTransaction<Blockchain, IBatchBuyTransactionResult>>;
    batchBuy(prepareRequest: PrepareFillRequest[]): Promise<PrepareBatchBuyResponse>;
}
