"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTezosSdk = void 0;
const api_client_1 = require("@rarible/api-client");
const sdk_common_1 = require("@rarible/sdk-common");
const middleware_1 = require("../../common/middleware/middleware");
const upload_meta_1 = require("../union/meta/upload-meta");
const common_1 = require("../../types/common");
const sell_1 = require("./sell");
const fill_1 = require("./fill");
const common_2 = require("./common");
const mint_1 = require("./mint");
const transfer_1 = require("./transfer");
const burn_1 = require("./burn");
const token_id_1 = require("./token-id");
const cancel_1 = require("./cancel");
const balance_1 = require("./balance");
const create_collection_1 = require("./create-collection");
const restriction_1 = require("./restriction");
const bid_1 = require("./bid");
function createTezosSdk(wallet, _apis, blockchainConfig, config) {
    const network = blockchainConfig.tezosNetwork;
    const maybeProvider = (0, common_2.getMaybeTezosProvider)(wallet === null || wallet === void 0 ? void 0 : wallet.provider, network, Object.assign(Object.assign({}, blockchainConfig), { apiKey: config === null || config === void 0 ? void 0 : config.apiKey }));
    const sellService = new sell_1.TezosSell(maybeProvider, _apis);
    const mintService = new mint_1.TezosMint(maybeProvider, _apis, network);
    const balanceService = new balance_1.TezosBalance(maybeProvider, network);
    const fillService = new fill_1.TezosFill(maybeProvider, _apis, network);
    const { createCollectionSimplified } = new create_collection_1.TezosCreateCollection(maybeProvider, network);
    const transferService = new transfer_1.TezosTransfer(maybeProvider, _apis, network);
    const burnService = new burn_1.TezosBurn(maybeProvider, _apis, network);
    const cancelService = new cancel_1.TezosCancel(maybeProvider, _apis, network);
    const bidService = new bid_1.TezosBid(maybeProvider, _apis, network);
    const preprocessMeta = middleware_1.Middlewarer.skipMiddleware(mintService.preprocessMeta);
    const metaUploader = new upload_meta_1.MetaUploader(api_client_1.Blockchain.TEZOS, preprocessMeta);
    return {
        nft: {
            mint: new common_1.MethodWithPrepare(mintService.mintBasic, mintService.mint),
            burn: new common_1.MethodWithPrepare(burnService.burnBasic, burnService.burn),
            transfer: new common_1.MethodWithPrepare(transferService.transferBasic, transferService.transfer),
            generateTokenId: new token_id_1.TezosTokenId(maybeProvider).generateTokenId,
            createCollection: createCollectionSimplified,
            preprocessMeta,
            uploadMeta: metaUploader.uploadMeta,
        },
        order: {
            fill: { prepare: fillService.buy },
            buy: new common_1.MethodWithPrepare(fillService.buyBasic, fillService.buy),
            batchBuy: new common_1.MethodWithPrepare(fillService.batchBuyBasic, fillService.batchBuy),
            acceptBid: new common_1.MethodWithPrepare(fillService.acceptBidBasic, fillService.acceptBid),
            sell: new common_1.MethodWithPrepare(sellService.sellBasic, sellService.sell),
            sellUpdate: new common_1.MethodWithPrepare(sellService.sellUpdateBasic, sellService.update),
            bid: new common_1.MethodWithPrepare(bidService.bidBasic, bidService.bid),
            bidUpdate: new common_1.MethodWithPrepare(bidService.updateBasic, bidService.update),
            cancel: cancelService.cancelBasic,
        },
        balances: {
            getBalance: balanceService.getBalance,
            convert: sdk_common_1.notImplemented,
            transfer: sdk_common_1.notImplemented,
            getBiddingBalance: sdk_common_1.nonImplementedAction,
            depositBiddingBalance: sdk_common_1.nonImplementedAction,
            withdrawBiddingBalance: sdk_common_1.nonImplementedAction,
        },
        restriction: {
            canTransfer: new restriction_1.TezosCanTransfer(maybeProvider).canTransfer,
            getFutureOrderFees() {
                return sellService.getFutureOrderFees();
            },
        },
    };
}
exports.createTezosSdk = createTezosSdk;
