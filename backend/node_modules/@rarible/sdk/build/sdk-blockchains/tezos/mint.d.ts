import type { TezosNetwork, TezosProvider } from "@rarible/tezos-sdk";
import { CollectionType } from "@rarible/api-client";
import type { HasCollection, HasCollectionId, PrepareMintRequest } from "../../types/nft/mint/prepare-mint-request.type";
import type { PrepareMintResponse, OffChainMintResponse, OnChainMintResponse } from "../../types/nft/mint/prepare";
import type { PreprocessMetaRequest } from "../../types/nft/mint/preprocess-meta";
import type { MintSimplifiedRequestOffChain, MintSimplifiedRequestOnChain } from "../../types/nft/mint/simplified";
import type { IApisSdk } from "../../domain";
import type { MaybeProvider, TezosMetadataResponse } from "./common";
export declare class TezosMint {
    private provider;
    private unionAPI;
    private network;
    constructor(provider: MaybeProvider<TezosProvider>, unionAPI: IApisSdk, network: TezosNetwork);
    private getFormatsMeta;
    preprocessMeta(meta: PreprocessMetaRequest): TezosMetadataResponse;
    private getOwner;
    mint(prepareRequest: PrepareMintRequest): Promise<PrepareMintResponse>;
    mintBasic(request: MintSimplifiedRequestOnChain): Promise<OnChainMintResponse>;
    mintBasic(request: MintSimplifiedRequestOffChain): Promise<OffChainMintResponse>;
}
export declare function getCollectionData(unionAPI: IApisSdk, prepareRequest: HasCollection | HasCollectionId): Promise<{
    contract: string;
    owner: import("@rarible/api-client").UnionAddress | undefined;
    type: CollectionType;
}>;
