"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TezosCanTransfer = void 0;
const tslib_1 = require("tslib");
const build_1 = require("@rarible/logger/build");
const common_1 = require("../common");
const apis_1 = require("../../../common/apis");
class TezosCanTransfer {
    constructor(provider) {
        this.provider = provider;
        this.canTransfer = this.canTransfer.bind(this);
    }
    canTransfer(itemId, from, to) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const provider = (0, common_1.getRequiredProvider)(this.provider);
            const { tokenId, contract } = (0, common_1.getTezosItemData)(itemId);
            const body = {
                chain_id: this.provider.config.chain_id,
                contract: contract,
                entrypoint: "can_transfer",
                gas: "100000",
                input: {
                    prim: "Pair",
                    args: [
                        { int: tokenId },
                        {
                            prim: "Pair",
                            args: [{ string: (0, common_1.convertUnionAddress)(from) }, { string: (0, common_1.convertUnionAddress)(to) }],
                        },
                    ],
                },
                payer: (0, common_1.convertUnionAddress)(from),
                source: this.provider.config.transfer_proxy,
                unparsing_mode: "Readable",
            };
            const initParams = {
                method: "POST",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(body),
            };
            const fetchUrl = `${provider.tezos.tk.rpc.getRpcUrl()}/chains/main/blocks/head/helpers/scripts/run_view`;
            let response;
            try {
                response = yield window.fetch(fetchUrl, initParams);
            }
            catch (e) {
                throw new build_1.NetworkError({
                    url: fetchUrl,
                    data: e.message,
                    code: apis_1.NetworkErrorCode.TEZOS_EXTERNAL_ERR,
                });
            }
            yield (0, build_1.handleFetchErrorResponse)(response, {
                requestInit: initParams,
                code: apis_1.NetworkErrorCode.TEZOS_EXTERNAL_ERR,
            });
            const result = yield response.json();
            if (result.data.string === "") {
                return { success: true };
            }
            return { success: false, reason: getReasonMessage(result.data.string) };
        });
    }
}
exports.TezosCanTransfer = TezosCanTransfer;
const REASONS_MESSAGES = {
    ARCHETYPE_QUOTA_REACHED: "You have reached the maximum amount of Digits you can own of this Edition, " +
        "please visit [quartz.ubisoft.com](https://quartz.ubisoft.com) for more information.",
    TO_RESTRICTED: "You can't trade this Digit at the moment, please visit " +
        "[quartz.ubisoft.com](https://quartz.ubisoft.com) for more information.",
};
function getReasonMessage(code) {
    if (!(code in REASONS_MESSAGES)) {
        return REASONS_MESSAGES["TO_RESTRICTED"];
    }
    return REASONS_MESSAGES[code];
}
