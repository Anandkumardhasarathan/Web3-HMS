"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkConfigByChainId = exports.getEthereumConfig = exports.ethereumNetworks = exports.configDictionary = void 0;
const lisk_1 = require("./lisk");
const lisk_sepolia_1 = require("./lisk-sepolia");
const mainnet_1 = require("./mainnet");
const palm_1 = require("./palm");
const palm_testnet_1 = require("./palm-testnet");
const mumbai_1 = require("./mumbai");
const polygon_1 = require("./polygon");
const dev_1 = require("./dev");
const polygon_dev_1 = require("./polygon-dev");
const testnet_1 = require("./testnet");
const testnet_mantle_1 = require("./testnet-mantle");
const mantle_1 = require("./mantle");
const testnet_arbitrum_1 = require("./testnet-arbitrum");
const arbitrum_1 = require("./arbitrum");
const testnet_zksync_1 = require("./testnet-zksync");
const zksync_1 = require("./zksync");
const chilliz_1 = require("./chilliz");
const testnet_chiliz_1 = require("./testnet-chiliz");
const lightlink_1 = require("./lightlink");
const testnet_lightlink_1 = require("./testnet-lightlink");
const testnet_rari_1 = require("./testnet-rari");
const rari_1 = require("./rari");
const base_1 = require("./base");
const base_sepolia_1 = require("./base-sepolia");
const xai_1 = require("./xai");
const testnet_fief_1 = require("./testnet-fief");
const testnet_xai_1 = require("./testnet-xai");
const testnet_kroma_1 = require("./testnet-kroma");
const kroma_1 = require("./kroma");
const testnet_celo_1 = require("./testnet-celo");
const celo_1 = require("./celo");
const polygon_amoy_1 = require("./polygon-amoy");
const sei_arctic_1_1 = require("./sei-arctic-1");
const sei_pacific_1_1 = require("./sei-pacific-1");
const moonbeam_testnet_1 = require("./moonbeam-testnet");
const moonbeam_1 = require("./moonbeam");
const etherlink_testnet_1 = require("./etherlink-testnet");
const etherlink_1 = require("./etherlink");
const testnet_saakuru_1 = require("./testnet-saakuru");
const saakuru_1 = require("./saakuru");
const testnet_oasys_1 = require("./testnet-oasys");
const oasys_1 = require("./oasys");
const alephzero_1 = require("./alephzero");
const alephzero_testnet_1 = require("./alephzero-testnet");
const match_1 = require("./match");
const match_testnet_1 = require("./match-testnet");
const fivire_1 = require("./fivire");
const fivire_testnet_1 = require("./fivire-testnet");
const shape_1 = require("./shape");
const shape_testnet_1 = require("./shape-testnet");
const berachain_testnet_1 = require("./berachain-testnet");
const telos_testnet_1 = require("./telos-testnet");
const telos_1 = require("./telos");
const testnet_abstract_1 = require("./testnet-abstract");
const berachain_1 = require("./berachain");
const abstract_1 = require("./abstract");
const viction_1 = require("./viction");
const viction_testnet_1 = require("./viction-testnet");
const hedera_1 = require("./hedera");
const hedera_testnet_1 = require("./hedera-testnet");
const goat_1 = require("./goat");
const goat_testnet_1 = require("./goat-testnet");
exports.configDictionary = {
    mainnet: mainnet_1.mainnetConfig,
    mumbai: mumbai_1.mumbaiConfig,
    polygon: polygon_1.polygonConfig,
    "amoy-polygon": polygon_amoy_1.polygonAmoyConfig,
    "dev-ethereum": dev_1.devEthereumConfig,
    "dev-polygon": polygon_dev_1.devPolygonConfig,
    mantle: mantle_1.mantleConfig,
    "testnet-mantle": testnet_mantle_1.mantleTestnetConfig,
    testnet: testnet_1.testnetEthereumConfig,
    "testnet-arbitrum": testnet_arbitrum_1.arbitrumTestnetConfig,
    arbitrum: arbitrum_1.arbitrumConfig,
    "testnet-zksync": testnet_zksync_1.zkSyncTestnetConfig,
    zksync: zksync_1.zkSyncConfig,
    chiliz: chilliz_1.chilizConfig,
    "testnet-chiliz": testnet_chiliz_1.chilizTestnetConfig,
    lightlink: lightlink_1.lightlinkConfig,
    "testnet-lightlink": testnet_lightlink_1.testnetLightlinkConfig,
    "testnet-rari": testnet_rari_1.rariTestnetConfig,
    rari: rari_1.rariMainnetConfig,
    base: base_1.baseConfig,
    "base-sepolia": base_sepolia_1.baseSepoliaConfig,
    "testnet-celo": testnet_celo_1.celoTestnetConfig,
    celo: celo_1.celoConfig,
    "testnet-xai": testnet_xai_1.xaiTestnetConfig,
    xai: xai_1.xaiConfig,
    "testnet-fief": testnet_fief_1.fiefTestnetConfig,
    "testnet-kroma": testnet_kroma_1.kromaTestnetConfig,
    kroma: kroma_1.kromaConfig,
    "testnet-saakuru": testnet_saakuru_1.testnetSaakuruConfig,
    saakuru: saakuru_1.saakuruConfig,
    "testnet-oasys": testnet_oasys_1.testnetOasysConfig,
    oasys: oasys_1.oasysConfig,
    "sei-arctic-1": sei_arctic_1_1.seiArctic1Config,
    "sei-pacific-1": sei_pacific_1_1.seiPacific1Config,
    "moonbeam-testnet": moonbeam_testnet_1.moonbeamTestnetConfig,
    moonbeam: moonbeam_1.moonbeamMainnetConfig,
    "palm-testnet": palm_testnet_1.palmTestnetConfig,
    palm: palm_1.palmMainnetConfig,
    "etherlink-testnet": etherlink_testnet_1.etherlinkTestnetConfig,
    etherlink: etherlink_1.etherlinkConfig,
    "lisk-sepolia": lisk_sepolia_1.liskSepoliaConfig,
    lisk: lisk_1.liskMainnetConfig,
    alephzero: alephzero_1.alephzeroMainnetConfig,
    "alephzero-testnet": alephzero_testnet_1.alephzeroTestnetConfig,
    match: match_1.matchConfig,
    "match-testnet": match_testnet_1.matchTestnetConfig,
    fivire: fivire_1.fivireConfig,
    "fivire-testnet": fivire_testnet_1.fivireTestnetConfig,
    shape: shape_1.shapeMainnetConfig,
    "shape-testnet": shape_testnet_1.shapeTestnetConfig,
    berachain: berachain_1.berachainConfig,
    "berachain-testnet": berachain_testnet_1.berachainTestnetConfig,
    "telos-testnet": telos_testnet_1.telosTestnetConfig,
    telos: telos_1.telosConfig,
    abstract: abstract_1.abstractConfig,
    "abstract-testnet": testnet_abstract_1.abstractTestnetConfig,
    viction: viction_1.victionMainnetConfig,
    "viction-testnet": viction_testnet_1.victionTestnetConfig,
    hedera: hedera_1.hederaMainnetConfig,
    "hedera-testnet": hedera_testnet_1.hederaTestnetConfig,
    goat: goat_1.goatMainnetConfig,
    "goat-testnet": goat_testnet_1.goatTestnetConfig,
};
exports.ethereumNetworks = Object.keys(exports.configDictionary);
function getEthereumConfig(env) {
    return exports.configDictionary[env];
}
exports.getEthereumConfig = getEthereumConfig;
const dictionaryFlat = Object.values(exports.configDictionary);
function getNetworkConfigByChainId(chainId) {
    const config = dictionaryFlat.find((x) => x.chainId === chainId);
    if (!config)
        throw new Error(`ChainID ${chainId} is not found in list of supported chains`);
    return config;
}
exports.getNetworkConfigByChainId = getNetworkConfigByChainId;
