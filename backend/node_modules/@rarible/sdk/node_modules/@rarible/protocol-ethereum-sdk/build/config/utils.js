"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extendConfig = void 0;
const types_1 = require("@rarible/types");
const api_client_1 = require("@rarible/api-client");
const deep_merge_1 = require("../utils/deep-merge");
const id_1 = require("../common/id");
const common_1 = require("./common");
const defaultConfig = {
    basePath: "",
    chainId: 0,
    blockchain: api_client_1.Blockchain.ETHEREUM,
    environment: "production",
    exchange: {
        v1: types_1.EVM_ZERO_ADDRESS,
        v2: types_1.EVM_ZERO_ADDRESS,
        openseaV1: types_1.EVM_ZERO_ADDRESS,
        wrapper: types_1.EVM_ZERO_ADDRESS,
        looksrare: types_1.EVM_ZERO_ADDRESS,
        looksrareV2: types_1.EVM_ZERO_ADDRESS,
        x2y2: types_1.EVM_ZERO_ADDRESS,
    },
    transferProxies: {
        nft: types_1.EVM_ZERO_ADDRESS,
        erc20: types_1.EVM_ZERO_ADDRESS,
        erc721Lazy: types_1.EVM_ZERO_ADDRESS,
        erc1155Lazy: types_1.EVM_ZERO_ADDRESS,
        openseaV1: types_1.EVM_ZERO_ADDRESS,
        cryptoPunks: types_1.EVM_ZERO_ADDRESS,
    },
    feeConfigUrl: common_1.FEE_CONFIG_URL,
    openSea: {
        metadata: (0, id_1.id32)("RARIBLE"),
        proxyRegistry: types_1.EVM_ZERO_ADDRESS,
        merkleValidator: types_1.EVM_ZERO_ADDRESS,
    },
    factories: {
        erc721: types_1.EVM_ZERO_ADDRESS,
        erc1155: types_1.EVM_ZERO_ADDRESS,
    },
    cryptoPunks: {
        marketContract: types_1.EVM_ZERO_ADDRESS,
        wrapperContract: types_1.EVM_ZERO_ADDRESS,
    },
    sudoswap: {
        pairFactory: types_1.EVM_ZERO_ADDRESS,
        pairRouter: types_1.EVM_ZERO_ADDRESS,
    },
    weth: types_1.EVM_ZERO_ADDRESS,
    auction: types_1.EVM_ZERO_ADDRESS,
    looksrareOrderValidatorV2: types_1.EVM_ZERO_ADDRESS,
};
function extendConfig(additions, baseConfig = defaultConfig) {
    return (0, deep_merge_1.deepMerge)({}, baseConfig, additions);
}
exports.extendConfig = extendConfig;
