"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isErc721v1Collection = exports.isErc1155v1Collection = exports.isErc721v3Collection = exports.isErc721v2Collection = exports.isErc1155v2Collection = exports.createRaribleSdk = void 0;
const tslib_1 = require("tslib");
const sdk_common_1 = require("@rarible/sdk-common");
const config_1 = require("./config");
const upsert_order_1 = require("./order/upsert-order");
const approve_1 = require("./order/approve");
const sell_1 = require("./order/sell");
const sign_order_1 = require("./order/sign-order");
const bid_1 = require("./order/bid");
const order = tslib_1.__importStar(require("./order"));
const check_asset_type_1 = require("./order/check-asset-type");
const mint_1 = require("./nft/mint");
const transfer_1 = require("./nft/transfer");
const sign_nft_1 = require("./nft/sign-nft");
const burn_1 = require("./nft/burn");
const apis_1 = require("./common/apis");
const send_transaction_1 = require("./common/send-transaction");
const cancel_1 = require("./order/cancel");
const fill_order_1 = require("./order/fill-order");
const get_base_fee_1 = require("./common/get-base-fee");
const deploy_erc721_1 = require("./nft/deploy-erc721");
const deploy_erc1155_1 = require("./nft/deploy-erc1155");
const balances_1 = require("./common/balances");
const types_1 = require("./types");
const convert_weth_1 = require("./order/convert-weth");
const logger_1 = require("./common/logger/logger");
const cryptopunk_wrapper_1 = require("./nft/cryptopunk-wrapper");
const batch_purchase_1 = require("./order/fill-order/batch-purchase/batch-purchase");
const get_required_wallet_1 = require("./common/get-required-wallet");
const order_1 = require("./common/order");
function createRaribleSdk(ethereum, env, sdkConfig) {
    var _a, _b, _c;
    const getConfig = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const chainId = yield (0, get_required_wallet_1.getRequiredWallet)(ethereum).getChainId();
        return (0, config_1.getNetworkConfigByChainId)(chainId);
    });
    const apis = (0, apis_1.createEthereumApis)(env, Object.assign(Object.assign({}, ((sdkConfig === null || sdkConfig === void 0 ? void 0 : sdkConfig.apiClientParams) || {})), { apiKey: sdkConfig === null || sdkConfig === void 0 ? void 0 : sdkConfig.apiKey }));
    const getApis = apis_1.getApis.bind(null, ethereum, env, sdkConfig);
    const send = partialCall((0, send_transaction_1.getSendWithInjects)({
        logger: {
            instance: (0, logger_1.createRemoteLogger)({
                ethereum,
                env: (0, logger_1.getEnvironment)(env),
                sessionId: (_a = sdkConfig === null || sdkConfig === void 0 ? void 0 : sdkConfig.logs) === null || _a === void 0 ? void 0 : _a.session,
                apiKey: sdkConfig === null || sdkConfig === void 0 ? void 0 : sdkConfig.apiKey,
            }),
            level: (_c = (_b = sdkConfig === null || sdkConfig === void 0 ? void 0 : sdkConfig.logs) === null || _b === void 0 ? void 0 : _b.level) !== null && _c !== void 0 ? _c : types_1.LogsLevel.DISABLED,
        },
    }));
    const checkLazyAssetType = partialCall(order.checkLazyAssetType, getApis);
    const checkLazyAsset = partialCall(order.checkLazyAsset, checkLazyAssetType);
    const checkLazyOrder = order.checkLazyOrder.bind(null, checkLazyAsset);
    const checkAssetType = partialCall(check_asset_type_1.checkAssetType, getApis);
    const balanceService = new balances_1.Balances(ethereum, send, getApis);
    const getBaseOrderFeeOld = get_base_fee_1.getBaseFee.bind(null, env, getApis);
    const getBaseOrderFee = (type) => {
        return (0, get_base_fee_1.getBaseFee)(env, getApis, type || order_1.CURRENT_ORDER_TYPE_VERSION);
    };
    const filler = new fill_order_1.OrderFiller(ethereum, send, getConfig, getApis, getBaseOrderFeeOld, env, sdkConfig);
    const buyBatchService = new batch_purchase_1.BatchOrderFiller(ethereum, send, getConfig, getApis, getBaseOrderFeeOld, env, sdkConfig);
    const approveFn = partialCall(approve_1.approve, ethereum, send, getConfig);
    const upsertService = new upsert_order_1.UpsertOrder(filler, send, getConfig, checkLazyOrder, approveFn, partialCall(sign_order_1.signOrder, ethereum, getConfig), getApis, ethereum);
    const sellService = new sell_1.OrderSell(upsertService, checkAssetType);
    const bidService = new bid_1.OrderBid(upsertService, checkAssetType);
    const wethConverter = new convert_weth_1.ConvertWeth(ethereum, send, getConfig);
    return {
        apis,
        order: {
            sell: sellService.sell,
            sellUpdate: sellService.update,
            fill: filler.fill,
            buy: filler.buy,
            buyBatch: buyBatchService.buy,
            acceptBid: filler.acceptBid,
            getFillTxData: filler.getTransactionData,
            getBuyTxData: filler.getBuyTx,
            bid: bidService.bid,
            bidUpdate: bidService.update,
            upsert: upsertService.upsert,
            cancel: partialCall(cancel_1.cancel, checkLazyOrder, ethereum, send, getConfig, getApis),
            getBaseOrderFee: getBaseOrderFee,
            getFillOrderBaseFee: filler.getFillOrderBaseFee,
            getBuyAmmInfo: filler.getBuyAmmInfo,
        },
        auction: {
            start: sdk_common_1.deprecatedMethodAction,
            cancel: sdk_common_1.deprecatedMethod,
            finish: sdk_common_1.deprecatedMethod,
            putBid: sdk_common_1.deprecatedMethodAction,
            buyOut: sdk_common_1.deprecatedMethodAction,
            getHash: sdk_common_1.deprecatedMethod,
        },
        nft: {
            mint: partialCall(mint_1.mint, ethereum, send, partialCall(sign_nft_1.signNft, ethereum, getConfig), getApis),
            transfer: partialCall(transfer_1.transfer, ethereum, send, checkAssetType, getApis),
            burn: partialCall(burn_1.burn, ethereum, send, checkAssetType, getApis),
            deploy: {
                erc721: new deploy_erc721_1.DeployErc721(ethereum, send, getConfig),
                erc1155: new deploy_erc1155_1.DeployErc1155(ethereum, send, getConfig),
            },
            cryptoPunks: {
                approveForWrapper: partialCall(cryptopunk_wrapper_1.approveForWrapper, ethereum, send, getConfig),
                wrap: partialCall(cryptopunk_wrapper_1.wrapPunk, ethereum, send, getConfig),
                unwrap: partialCall(cryptopunk_wrapper_1.unwrapPunk, ethereum, send, getConfig),
            },
        },
        balances: {
            getBalance: balanceService.getBalance,
            transfer: balanceService.transfer,
            convert: wethConverter.convert,
            deposit: wethConverter.deposit,
            depositWei: wethConverter.depositWei,
            withdraw: wethConverter.withdraw,
            withdrawWei: wethConverter.withdrawWei,
            getWethContractAddress: wethConverter.getWethContractAddress,
        },
    };
}
exports.createRaribleSdk = createRaribleSdk;
function partialCall(f, ...headArgs) {
    return (...tailArgs) => f(...headArgs, ...tailArgs);
}
var mint_2 = require("./nft/mint");
Object.defineProperty(exports, "isErc1155v2Collection", { enumerable: true, get: function () { return mint_2.isErc1155v2Collection; } });
Object.defineProperty(exports, "isErc721v2Collection", { enumerable: true, get: function () { return mint_2.isErc721v2Collection; } });
Object.defineProperty(exports, "isErc721v3Collection", { enumerable: true, get: function () { return mint_2.isErc721v3Collection; } });
Object.defineProperty(exports, "isErc1155v1Collection", { enumerable: true, get: function () { return mint_2.isErc1155v1Collection; } });
Object.defineProperty(exports, "isErc721v1Collection", { enumerable: true, get: function () { return mint_2.isErc721v1Collection; } });
tslib_1.__exportStar(require("./order/is-nft"), exports);
tslib_1.__exportStar(require("./common/get-ownership-id"), exports);
tslib_1.__exportStar(require("./common/parse-item-id"), exports);
tslib_1.__exportStar(require("./common/parse-ownership-id"), exports);
