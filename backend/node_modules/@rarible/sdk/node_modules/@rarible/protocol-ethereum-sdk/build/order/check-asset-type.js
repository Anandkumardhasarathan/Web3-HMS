"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAssetType = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@rarible/types");
function checkAssetType(getApis, asset) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const apis = yield getApis();
        if ("assetClass" in asset) {
            return asset;
        }
        else {
            const collectionResponse = yield apis.nftCollection.getNftCollectionByIdRaw({ collection: asset.contract });
            if (collectionResponse.status === 200) {
                switch (collectionResponse.value.type) {
                    case "ERC721":
                    case "ERC1155": {
                        return Object.assign(Object.assign({}, asset), { tokenId: (0, types_1.toBigNumber)(`${asset.tokenId}`), assetClass: collectionResponse.value.type });
                    }
                    case "CRYPTO_PUNKS": {
                        return {
                            assetClass: "CRYPTO_PUNKS",
                            contract: asset.contract,
                            tokenId: parseInt(`${asset.tokenId}`),
                        };
                    }
                    default: {
                        throw new Error(`Unrecognized collection asset class ${collectionResponse.value.type}`);
                    }
                }
            }
            else {
                throw new Error(`Can't get info of NFT collection with id ${asset.contract}`);
            }
        }
    });
}
exports.checkAssetType = checkAssetType;
