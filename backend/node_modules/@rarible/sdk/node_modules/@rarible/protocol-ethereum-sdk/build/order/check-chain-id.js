"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrongNetworkWarning = exports.checkChainId = void 0;
const tslib_1 = require("tslib");
const build_1 = require("@rarible/logger/build");
const get_required_wallet_1 = require("../common/get-required-wallet");
/**
 * Check the wallet chainId is the same as in the config
 * @param ethereum Wallet
 * @param config EthereumConfig
 */
function checkChainId(ethereum, config) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const provider = (0, get_required_wallet_1.getRequiredWallet)(ethereum);
        const activeChainId = yield provider.getChainId();
        if (config.chainId !== activeChainId)
            throw new WrongNetworkWarning(activeChainId, config.chainId);
        return true;
    });
}
exports.checkChainId = checkChainId;
class WrongNetworkWarning extends build_1.Warning {
    constructor(active, required) {
        super(`Change network of your wallet. Required chainId ${required}, but active is ${active}`);
        this.name = "WrongNetworkWarning";
        Object.setPrototypeOf(this, WrongNetworkWarning.prototype);
    }
}
exports.WrongNetworkWarning = WrongNetworkWarning;
