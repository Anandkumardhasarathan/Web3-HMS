import type { Ethereum } from "@rarible/ethereum-provider";
import type { Maybe } from "@rarible/types";
import type { GetAmmBuyInfoRequest } from "@rarible/ethereum-api-client/build/apis/OrderControllerApi";
import type { AmmTradeInfo } from "@rarible/ethereum-api-client/build/models";
import type { SimpleOrder } from "../types";
import type { SendFunction } from "../../common/send-transaction";
import type { RaribleEthereumApis } from "../../common/apis";
import type { IRaribleEthereumSdkConfig } from "../../types";
import type { EthereumNetwork } from "../../types";
import type { GetConfigByChainId } from "../../config";
import type { FillOrderAction, FillOrderRequest, GetOrderBuyTxRequest, OrderFillTransactionData, TransactionData, SellOrderAction, BuyOrderAction } from "./types";
import { RaribleV1OrderHandler } from "./rarible-v1";
import { RaribleV2OrderHandler } from "./rarible-v2";
import { OpenSeaOrderHandler } from "./open-sea";
import { CryptoPunksOrderHandler } from "./crypto-punks";
import { SeaportOrderHandler } from "./seaport";
import { X2Y2OrderHandler } from "./x2y2";
import { LooksrareOrderHandler } from "./looksrare";
import { AmmOrderHandler } from "./amm";
import { LooksrareV2OrderHandler } from "./looksrare-v2";
export declare class OrderFiller {
    private readonly ethereum;
    private readonly send;
    private readonly getApis;
    private readonly sdkConfig?;
    v1Handler: RaribleV1OrderHandler;
    v2Handler: RaribleV2OrderHandler;
    openSeaHandler: OpenSeaOrderHandler;
    punkHandler: CryptoPunksOrderHandler;
    seaportHandler: SeaportOrderHandler;
    looksrareHandler: LooksrareOrderHandler;
    looksrareV2Handler: LooksrareV2OrderHandler;
    x2y2Handler: X2Y2OrderHandler;
    ammHandler: AmmOrderHandler;
    private readonly checkAssetType;
    private checkLazyAssetType;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, getConfig: GetConfigByChainId, getApis: () => Promise<RaribleEthereumApis>, getBaseOrderFee: (type: SimpleOrder["type"]) => Promise<number>, env: EthereumNetwork, sdkConfig?: IRaribleEthereumSdkConfig | undefined);
    private getFillAction;
    /**
     * @deprecated Use {@link buy} or {@link acceptBid} instead
     */
    fill: FillOrderAction;
    /**
     * Buy order
     */
    buy: BuyOrderAction;
    /**
     * Accept bid order
     */
    acceptBid: SellOrderAction;
    getBuyTx({ request, from }: GetOrderBuyTxRequest): Promise<TransactionData>;
    private invertOrder;
    private approveOrder;
    private sendTransaction;
    private getTransactionRequestData;
    getTransactionData(request: FillOrderRequest): Promise<OrderFillTransactionData>;
    getOrderFee(order: SimpleOrder): Promise<number>;
    getFillOrderBaseFee(order: SimpleOrder, withOriginFees?: boolean): Promise<number>;
    checkStartEndDates(order: SimpleOrder): void;
    getBuyAmmInfo(request: GetAmmBuyInfoRequest): Promise<AmmTradeInfo>;
    isNonInvertableOrder(order: SimpleOrder): boolean;
}
