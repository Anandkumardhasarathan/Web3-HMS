"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MerkleTree = exports.hashIdentifier = void 0;
const tslib_1 = require("tslib");
const merkletreejs_1 = tslib_1.__importDefault(require("merkletreejs"));
const ethereumjs_util_1 = require("ethereumjs-util");
const utils_1 = require("@rarible/utils");
const hashIdentifier = (identifier) => (0, ethereumjs_util_1.keccak256)(Buffer.from((0, utils_1.toBn)(identifier).toString(16).padStart(64, "0"), "hex"));
exports.hashIdentifier = hashIdentifier;
/**
 * Simple wrapper over the MerkleTree in merkletreejs.
 * Handles hashing identifiers to be compatible with Seaport.
 */
class MerkleTree {
    constructor(identifiers) {
        this.tree = new merkletreejs_1.default(identifiers.map(exports.hashIdentifier), ethereumjs_util_1.keccak256, {
            sort: true,
        });
    }
    getProof(identifier) {
        return this.tree.getHexProof((0, exports.hashIdentifier)(identifier));
    }
    getRoot() {
        return this.tree.getRoot().toString("hex") ? this.tree.getHexRoot() : "0";
    }
}
exports.MerkleTree = MerkleTree;
