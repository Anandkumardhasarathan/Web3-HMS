"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSolanaLegacySigner = void 0;
const tslib_1 = require("tslib");
function toSolanaLegacySigner(signer) {
    const signTransaction = (tx) => isTransaction(tx)
        ? signer.signTransaction(tx).then(x => x)
        : Promise.reject(new VersioningTransactionIsNotSupported());
    const signAllTransactions = (txs) => tslib_1.__awaiter(this, void 0, void 0, function* () { return Promise.all(txs.map(x => signTransaction(x))); });
    return {
        publicKey: signer.publicKey,
        signTransaction,
        signAllTransactions,
        signMessage: signer.signMessage.bind(signer),
    };
}
exports.toSolanaLegacySigner = toSolanaLegacySigner;
function isTransaction(tx) {
    return "partialSign" in tx;
}
class VersioningTransactionIsNotSupported extends Error {
    constructor() {
        super("Versioning transaction is not supported for legacy providers");
        this.name = "VersioningTransactionIsNotSupported";
    }
}
