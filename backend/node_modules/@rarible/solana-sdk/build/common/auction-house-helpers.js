"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuctionHouseBuyerEscrow = exports.getAuctionHouseTradeState = exports.getAuctionHouseProgramAsSigner = exports.loadAuctionHouseProgram = void 0;
const tslib_1 = require("tslib");
const web3_js_1 = require("@solana/web3.js");
const solana_common_1 = require("@rarible/solana-common");
const anchor_1 = require("@project-serum/anchor");
const contracts_1 = require("./contracts");
const utils_1 = require("./utils");
function loadAuctionHouseProgram(connection, signer) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const legacySigner = (0, solana_common_1.toSolanaLegacySigner)(signer);
        const provider = new anchor_1.Provider(connection, legacySigner, {
            preflightCommitment: "recent",
        });
        const idl = yield anchor_1.Program.fetchIdl(contracts_1.AUCTION_HOUSE_PROGRAM_ID, provider);
        if (!idl) {
            throw new Error("Idl couldn't be fetched");
        }
        return new anchor_1.Program(idl, contracts_1.AUCTION_HOUSE_PROGRAM_ID, provider);
    });
}
exports.loadAuctionHouseProgram = loadAuctionHouseProgram;
function getAuctionHouseProgramAsSigner() {
    return web3_js_1.PublicKey.findProgramAddress([Buffer.from(contracts_1.AUCTION_HOUSE), Buffer.from("signer")], contracts_1.AUCTION_HOUSE_PROGRAM_ID);
}
exports.getAuctionHouseProgramAsSigner = getAuctionHouseProgramAsSigner;
function getAuctionHouseTradeState(auctionHouse, wallet, tokenAccount, treasuryMint, tokenMint, tokenSize, buyPrice) {
    return web3_js_1.PublicKey.findProgramAddress([
        Buffer.from(contracts_1.AUCTION_HOUSE),
        wallet.toBuffer(),
        auctionHouse.toBuffer(),
        tokenAccount.toBuffer(),
        treasuryMint.toBuffer(),
        tokenMint.toBuffer(),
        (0, utils_1.serumBnToBuffer)((0, utils_1.toSerumBn)(buyPrice), "le", 8),
        (0, utils_1.serumBnToBuffer)((0, utils_1.toSerumBn)(tokenSize), "le", 8),
    ], contracts_1.AUCTION_HOUSE_PROGRAM_ID);
}
exports.getAuctionHouseTradeState = getAuctionHouseTradeState;
function getAuctionHouseBuyerEscrow(auctionHouse, wallet) {
    return web3_js_1.PublicKey.findProgramAddress([Buffer.from(contracts_1.AUCTION_HOUSE), auctionHouse.toBuffer(), wallet.toBuffer()], contracts_1.AUCTION_HOUSE_PROGRAM_ID);
}
exports.getAuctionHouseBuyerEscrow = getAuctionHouseBuyerEscrow;
