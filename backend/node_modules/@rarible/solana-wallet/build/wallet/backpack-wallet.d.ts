import type { PublicKey, Transaction } from "@solana/web3.js";
import type { SolanaEncoding, SolanaSignature, SolanaSigner, TransactionOrVersionedTransaction } from "@rarible/solana-common";
export type BackpackProvider = {
    publicKey: PublicKey;
    signTransaction: (transaction: Transaction, publicKey?: PublicKey | null) => Promise<Transaction>;
    signAllTransactions(transactions: Transaction[], publicKey?: PublicKey | null): Promise<Transaction[]>;
    signMessage: (message: Uint8Array) => Promise<{
        signature: Uint8Array;
    }>;
};
export declare class BackpackSigner implements SolanaSigner {
    private readonly provider;
    constructor(provider: BackpackProvider);
    get publicKey(): PublicKey;
    signTransaction(transaction: TransactionOrVersionedTransaction): Promise<TransactionOrVersionedTransaction>;
    signAllTransactions(transactions: TransactionOrVersionedTransaction[]): Promise<TransactionOrVersionedTransaction[]>;
    signMessage(message: Uint8Array, display?: SolanaEncoding | undefined): Promise<SolanaSignature>;
}
