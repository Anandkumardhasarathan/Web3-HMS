"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaKeypairWallet = void 0;
const tslib_1 = require("tslib");
const tweetnacl_1 = tslib_1.__importDefault(require("tweetnacl"));
const bs58_1 = tslib_1.__importDefault(require("bs58"));
const web3_js_1 = require("@solana/web3.js");
class SolanaKeypairWallet {
    static fromKeypair(keyPair) {
        return new SolanaKeypairWallet(keyPair);
    }
    static fromKey(secret) {
        return new SolanaKeypairWallet(web3_js_1.Keypair.fromSecretKey(toUint8SecretKey(secret)));
    }
    static fromSeed(seed) {
        const pair = seed ? web3_js_1.Keypair.fromSeed(seed) : web3_js_1.Keypair.generate();
        return SolanaKeypairWallet.fromKeypair(pair);
    }
    constructor(keyPair) {
        this.keyPair = keyPair;
        this.signTransaction = (tx) => isTransaction(tx)
            ? Promise.resolve(signWithKeypair(tx, this.keyPair))
            : Promise.reject(new UnsupportedSolanaTransactionType());
        this.signAllTransactions = (txs) => Promise.all(txs.map(x => this.signTransaction(x)));
        this.signMessage = (message) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            return ({
                publicKey: this.publicKey,
                signature: tweetnacl_1.default.sign(getSignMessageData(message), this.keyPair.secretKey).slice(0, tweetnacl_1.default.sign.signatureLength),
            });
        });
        this.publicKey = keyPair.publicKey;
    }
}
exports.SolanaKeypairWallet = SolanaKeypairWallet;
function isTransaction(tx) {
    return "partialSign" in tx;
}
function signWithKeypair(tx, keypair) {
    tx.partialSign(keypair);
    return tx;
}
function toUint8SecretKey(str) {
    if (typeof str === "string")
        return Uint8Array.from(bs58_1.default.decode(str));
    return str;
}
function getSignMessageData(message) {
    if (typeof message === "string")
        return new TextEncoder().encode(message);
    return message;
}
class UnsupportedSolanaTransactionType extends Error {
    constructor() {
        super("VersionedTransaction is not supported");
        this.name = "UnsupportedSolanaTransactionType";
    }
}
