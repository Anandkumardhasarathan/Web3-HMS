"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get_xtz_balance = exports.get_balance = void 0;
var base_1 = require("./base");
var bignumber_js_1 = require("bignumber.js");
var fetch_wrapper_1 = require("./fetch-wrapper");
function get_balance(config, owner, asset_type, asset_contract, asset_token_id) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, tokenIdQuery, r, json, factor;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = asset_type;
                    switch (_a) {
                        case base_1.AssetTypeV2.XTZ: return [3 /*break*/, 1];
                        case base_1.AssetTypeV2.FA12: return [3 /*break*/, 2];
                        case base_1.AssetTypeV2.FA2: return [3 /*break*/, 2];
                    }
                    return [3 /*break*/, 6];
                case 1: return [2 /*return*/, get_xtz_balance(config, owner)];
                case 2:
                    if (asset_contract == undefined) {
                        throw new Error("Contract can't be empty for FA12 and FA2 assets");
                    }
                    tokenIdQuery = asset_token_id !== undefined ? "&token.tokenId=".concat(asset_token_id.toString()) : "";
                    return [4 /*yield*/, (0, fetch_wrapper_1.fetchWrapper)("".concat(config.tzkt, "/v1/tokens/balances?account=").concat(owner, "&token.contract=").concat(asset_contract).concat(tokenIdQuery), {
                            defaultErrorCode: fetch_wrapper_1.NetworkErrorCode.TEZOS_EXTERNAL_ERR,
                        })];
                case 3:
                    r = _b.sent();
                    return [4 /*yield*/, r.json()];
                case 4:
                    json = _b.sent();
                    if (!json.length) {
                        return [2 /*return*/, new bignumber_js_1.default(0)];
                    }
                    return [4 /*yield*/, (0, base_1.asset_factor)(config, asset_type, asset_contract, asset_token_id)];
                case 5:
                    factor = _b.sent();
                    return [2 /*return*/, new bignumber_js_1.default(json[0].balance || 0).div(factor)];
                case 6: throw new Error("Unknown asset type");
            }
        });
    });
}
exports.get_balance = get_balance;
function get_xtz_balance(config, account) {
    return __awaiter(this, void 0, void 0, function () {
        var r, json;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, fetch_wrapper_1.fetchWrapper)("".concat(config.node_url, "/chains/main/blocks/head/context/contracts/").concat(account, "/balance"), {
                        defaultErrorCode: fetch_wrapper_1.NetworkErrorCode.TEZOS_EXTERNAL_ERR,
                    })];
                case 1:
                    r = _a.sent();
                    return [4 /*yield*/, r.json()];
                case 2:
                    json = _a.sent();
                    return [2 /*return*/, (new bignumber_js_1.default(json)).div(1000000)];
            }
        });
    });
}
exports.get_xtz_balance = get_xtz_balance;
