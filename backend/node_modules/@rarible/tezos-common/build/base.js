"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unpackFA2Asset = exports.packFA2Asset = exports.absolute_amount = exports.asset_factor = exports.op_to_kt1 = exports.pk_to_pkh = exports.b58dec = exports.b58enc = exports.kt1_prefix = exports.op_prefix = exports.sig_prefix = exports.p2sig_prefix = exports.spsig1_prefix = exports.edsig_prefix = exports.p2sk_prefix = exports.spsk_prefix = exports.edsk_prefix = exports.p2pk_prefix = exports.sppk_prefix = exports.edpk_prefix = exports.tz3_prefix = exports.tz2_prefix = exports.tz1_prefix = exports.sign = exports.tezos_signed_message_prefix = exports.of_hex = exports.pack_string = exports.to_hex = exports.hex_to_uint8array = exports.uint8array_to_hex = exports.are_royalties_on_chain = exports.get_royalties = exports.wrap_confirmation = exports.send_batch = exports.TezosProviderError = exports.send = exports.get_originate = exports.get_sign = exports.get_storage = exports.get_public_key = exports.get_address = exports.asset_type_contract = exports.asset_of_json = exports.asset_to_json = exports.asset_type_of_json = exports.asset_type_to_json = exports.OrderType = exports.AssetTypeV2 = exports.OrderStatus = exports.Platform = void 0;
exports.retry = exports.delay = exports.optional_date_arg = exports.objkt_parts_to_micheline = exports.parts_to_micheline = exports.process_token_id = exports.get_decimals = exports.get_ft_type = exports.getAsset = exports.unpackFA12Asset = exports.packFA12Asset = void 0;
var michel_codec_1 = require("@taquito/michel-codec");
var bignumber_js_1 = require("bignumber.js");
var node_fetch_1 = require("node-fetch");
var fetch_wrapper_1 = require("./fetch-wrapper");
var build_1 = require("@rarible/logger/build");
var aggregator_event_1 = require("./aggregator-event");
var _a = require("text-encoder"), TextEncoder = _a.TextEncoder, TextDecoder = _a.TextDecoder;
var bs58check = require("bs58check");
var blake = require('blakejs');
var Platform;
(function (Platform) {
    Platform["RARIBLE_V1"] = "RARIBLE_V1";
    Platform["RARIBLE_V2"] = "RARIBLE_V2";
    Platform["OBJKT_V1"] = "OBJKT_V1";
    Platform["OBJKT_V2"] = "OBJKT_V2";
    Platform["HEN"] = "HEN";
    Platform["TEIA_V1"] = "TEIA_V1";
    Platform["VERSUM_V1"] = "VERSUM_V1";
    Platform["FXHASH_V1"] = "FXHASH_V1";
    Platform["FXHASH_V2"] = "FXHASH_V2";
})(Platform = exports.Platform || (exports.Platform = {}));
var OrderStatus;
(function (OrderStatus) {
    OrderStatus["ACTIVE"] = "ACTIVE";
    OrderStatus["INACTIVE"] = "INACTIVE";
    OrderStatus["FILLED"] = "FILLED";
})(OrderStatus = exports.OrderStatus || (exports.OrderStatus = {}));
var AssetTypeV2;
(function (AssetTypeV2) {
    AssetTypeV2[AssetTypeV2["XTZ"] = 0] = "XTZ";
    AssetTypeV2[AssetTypeV2["FA12"] = 1] = "FA12";
    AssetTypeV2[AssetTypeV2["FA2"] = 2] = "FA2";
})(AssetTypeV2 = exports.AssetTypeV2 || (exports.AssetTypeV2 = {}));
var OrderType;
(function (OrderType) {
    OrderType[OrderType["V1"] = 0] = "V1";
    OrderType[OrderType["V2"] = 1] = "V2";
})(OrderType = exports.OrderType || (exports.OrderType = {}));
function asset_type_to_json(a) {
    switch (a.asset_class) {
        case "XTZ":
            return { assetClass: a.asset_class };
        case "FT":
            return {
                assetClass: a.asset_class, contract: a.contract,
                tokenId: (a.token_id == undefined) ? undefined : a.token_id.toString()
            };
        case "NFT":
        case "MT":
            return {
                assetClass: a.asset_class,
                contract: a.contract,
                tokenId: a.token_id.toString()
            };
    }
}
exports.asset_type_to_json = asset_type_to_json;
function asset_type_of_json(a) {
    switch (a.assetClass) {
        case "XTZ":
            return { asset_class: a.assetClass };
        case "FT":
            return {
                asset_class: a.assetClass, contract: a.contract,
                token_id: (a.tokenId == undefined) ? undefined : new bignumber_js_1.default(a.tokenId)
            };
        case "NFT":
        case "MT":
            return {
                asset_class: a.assetClass,
                contract: a.contract,
                token_id: new bignumber_js_1.default(a.tokenId)
            };
        default:
            throw new Error("Unknown Asset Class");
    }
}
exports.asset_type_of_json = asset_type_of_json;
function asset_to_json(a) {
    return {
        assetType: asset_type_to_json(a.asset_type),
        value: a.value.toString()
    };
}
exports.asset_to_json = asset_to_json;
function asset_of_json(a) {
    return {
        asset_type: asset_type_of_json(a.assetType),
        value: new bignumber_js_1.default(a.value)
    };
}
exports.asset_of_json = asset_of_json;
function asset_type_contract(p, a) {
    switch (a.asset_class) {
        case 'NFT':
            return a.contract || p.config.nft_public;
        case 'MT':
            return a.contract || p.config.mt_public;
        case 'FT':
            return a.contract;
    }
}
exports.asset_type_contract = asset_type_contract;
function get_address(p) {
    return __awaiter(this, void 0, void 0, function () {
        var e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, p.tezos.address()];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    e_1 = _a.sent();
                    throw new TezosProviderError({
                        error: e_1,
                        method: "provider.tezos.address"
                    });
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.get_address = get_address;
function get_public_key(p) {
    return __awaiter(this, void 0, void 0, function () {
        var e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, p.tezos.public_key()];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    e_2 = _a.sent();
                    throw new TezosProviderError({
                        error: e_2,
                        method: "provider.tezos.public_key"
                    });
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.get_public_key = get_public_key;
function get_storage(p, contract) {
    return __awaiter(this, void 0, void 0, function () {
        var e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, p.tezos.storage(contract)];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    e_3 = _a.sent();
                    throw new TezosProviderError({
                        error: e_3,
                        args: { contract: contract },
                        method: "provider.tezos.storage"
                    });
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.get_storage = get_storage;
function get_sign(provider, bytes, type) {
    return __awaiter(this, void 0, void 0, function () {
        var e_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, provider.tezos.sign(bytes, type)];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    e_4 = _a.sent();
                    throw new TezosProviderError({
                        error: e_4,
                        args: { bytes: bytes, type: type },
                        method: "provider.tezos.sign"
                    });
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.get_sign = get_sign;
function get_originate(provider, arg) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, e_5;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    _a = wrap_confirmation;
                    return [4 /*yield*/, provider.tezos.originate(arg)];
                case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent(), arg])];
                case 2:
                    e_5 = _b.sent();
                    throw new TezosProviderError({
                        error: e_5,
                        args: { arg: arg },
                        method: "provider.tezos.originate"
                    });
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.get_originate = get_originate;
function send(provider, arg) {
    return __awaiter(this, void 0, void 0, function () {
        var op, op, e_6;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 5, , 6]);
                    if (!(arg.entrypoint && arg.parameter)) return [3 /*break*/, 2];
                    return [4 /*yield*/, provider.tezos.transfer({
                            amount: (arg.amount != undefined) ? Number(arg.amount) : 0,
                            to: arg.destination,
                            parameter: { entrypoint: arg.entrypoint, value: arg.parameter }
                        })];
                case 1:
                    op = _a.sent();
                    return [2 /*return*/, wrap_confirmation(op, arg)];
                case 2: return [4 /*yield*/, provider.tezos.transfer({
                        amount: (arg.amount != undefined) ? Number(arg.amount) : 0,
                        to: arg.destination
                    })];
                case 3:
                    op = _a.sent();
                    return [2 /*return*/, wrap_confirmation(op, arg)];
                case 4: return [3 /*break*/, 6];
                case 5:
                    e_6 = _a.sent();
                    throw new TezosProviderError({
                        error: e_6,
                        args: arg,
                        method: "send"
                    });
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.send = send;
var TezosProviderError = /** @class */ (function (_super) {
    __extends(TezosProviderError, _super);
    function TezosProviderError(data) {
        var _this = _super.call(this, TezosProviderError.getErrorMessage(data === null || data === void 0 ? void 0 : data.error) || "TezosProviderError") || this;
        Object.setPrototypeOf(_this, TezosProviderError.prototype);
        _this.name = "TezosProviderError";
        _this.error = data === null || data === void 0 ? void 0 : data.error;
        _this.args = data === null || data === void 0 ? void 0 : data.args;
        _this.method = data === null || data === void 0 ? void 0 : data.method;
        return _this;
    }
    TezosProviderError.getErrorMessage = function (error) {
        var _a;
        try {
            var notEnoughFundsError = (_a = error === null || error === void 0 ? void 0 : error.data) === null || _a === void 0 ? void 0 : _a.find(function (err) { var _a; return ((_a = err === null || err === void 0 ? void 0 : err.id) === null || _a === void 0 ? void 0 : _a.endsWith) && err.id.endsWith("implicit.empty_implicit_contract"); });
            if (notEnoughFundsError) {
                return "Wallet ".concat(notEnoughFundsError === null || notEnoughFundsError === void 0 ? void 0 : notEnoughFundsError.implicit, " does not have enough funds for transaction");
            }
        }
        catch (e) { }
        return (error === null || error === void 0 ? void 0 : error.message) || "";
    };
    return TezosProviderError;
}(Error));
exports.TezosProviderError = TezosProviderError;
function send_batch(provider, args) {
    return __awaiter(this, void 0, void 0, function () {
        var prepared, op, e_7;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    prepared = args
                        //add log_event to track rarible tx
                        .concat((0, aggregator_event_1.get_aggregator_event_transaction)(provider))
                        .map(function (p) {
                        if (p.entrypoint && p.parameter) {
                            return {
                                amount: (p.amount != undefined) ? Number(p.amount) : 0,
                                to: p.destination,
                                parameter: { entrypoint: p.entrypoint, value: p.parameter }
                            };
                        }
                        else {
                            return {
                                amount: (p.amount != undefined) ? Number(p.amount) : 0,
                                to: p.destination,
                            };
                        }
                    });
                    return [4 /*yield*/, provider.tezos.batch(prepared)];
                case 1:
                    op = _a.sent();
                    return [2 /*return*/, wrap_confirmation(op, args)];
                case 2:
                    e_7 = _a.sent();
                    throw new TezosProviderError({
                        error: e_7,
                        args: args,
                        method: "send_batch"
                    });
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.send_batch = send_batch;
function wrap_confirmation(op, args) {
    var _this = this;
    return __assign(__assign({}, op), { confirmation: function () { return __awaiter(_this, void 0, void 0, function () {
            var e_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, op.confirmation()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_8 = _a.sent();
                        throw new TezosProviderError({
                            error: e_8,
                            args: args,
                            method: "confirmation"
                        });
                    case 3: return [2 /*return*/];
                }
            });
        }); } });
}
exports.wrap_confirmation = wrap_confirmation;
function get_royalties(provider, token_contract, tokenId) {
    return __awaiter(this, void 0, void 0, function () {
        var r, result, royalties, royalties_1, royalties_1_1, share;
        var e_9, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, (0, fetch_wrapper_1.fetchAPI)("/items/TEZOS:".concat(token_contract, ":").concat(tokenId, "/royalties"), {
                        config: provider.config
                    })];
                case 1:
                    r = _b.sent();
                    return [4 /*yield*/, r.json()];
                case 2:
                    result = _b.sent();
                    royalties = result.royalties;
                    try {
                        for (royalties_1 = __values(royalties), royalties_1_1 = royalties_1.next(); !royalties_1_1.done; royalties_1_1 = royalties_1.next()) {
                            share = royalties_1_1.value;
                            share.account = share.account.replace("TEZOS:", "");
                        }
                    }
                    catch (e_9_1) { e_9 = { error: e_9_1 }; }
                    finally {
                        try {
                            if (royalties_1_1 && !royalties_1_1.done && (_a = royalties_1.return)) _a.call(royalties_1);
                        }
                        finally { if (e_9) throw e_9.error; }
                    }
                    return [2 /*return*/, royalties];
            }
        });
    });
}
exports.get_royalties = get_royalties;
function are_royalties_on_chain(provider, token_contract, token_id) {
    return __awaiter(this, void 0, void 0, function () {
        var is_on_chain, fetchUrl, r, key, r_provider, key_1, r_provider_1, e_10;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    is_on_chain = false;
                    fetchUrl = provider.config.tzkt + "/v1/contracts/".concat(token_contract, "/bigmaps/royalties/keys/").concat(token_id);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 8, , 9]);
                    return [4 /*yield*/, (0, node_fetch_1.default)(fetchUrl)];
                case 2:
                    r = _a.sent();
                    if (!(r.status == 200)) return [3 /*break*/, 3];
                    is_on_chain = true;
                    return [3 /*break*/, 7];
                case 3:
                    key = "{\"address\":\"".concat(token_contract, "\",\"nat\":\"").concat(token_id, "\"}");
                    fetchUrl = provider.config.tzkt + "/v1/contracts/".concat(provider.config.royalties_provider, "/bigmaps/royalties/keys/").concat(key);
                    return [4 /*yield*/, (0, node_fetch_1.default)(fetchUrl)];
                case 4:
                    r_provider = _a.sent();
                    if (!(r_provider.status == 200)) return [3 /*break*/, 5];
                    is_on_chain = true;
                    return [3 /*break*/, 7];
                case 5:
                    key_1 = "{\"address\":\"".concat(token_contract, "\",\"nat\":null}");
                    fetchUrl = provider.config.tzkt + "/v1/contracts/".concat(provider.config.royalties_provider, "/bigmaps/royalties/keys/").concat(key_1);
                    return [4 /*yield*/, (0, node_fetch_1.default)(fetchUrl)];
                case 6:
                    r_provider_1 = _a.sent();
                    if (r_provider_1.status == 200) {
                        is_on_chain = true;
                    }
                    _a.label = 7;
                case 7: return [2 /*return*/, is_on_chain];
                case 8:
                    e_10 = _a.sent();
                    throw new build_1.NetworkError({
                        url: fetchUrl,
                        data: e_10.message,
                        code: fetch_wrapper_1.NetworkErrorCode.TEZOS_EXTERNAL_ERR,
                    });
                case 9: return [2 /*return*/];
            }
        });
    });
}
exports.are_royalties_on_chain = are_royalties_on_chain;
function uint8array_to_hex(a) {
    return a.reduce(function (acc, x) { return acc + x.toString(16).padStart(2, '0'); }, '');
}
exports.uint8array_to_hex = uint8array_to_hex;
function hex_to_uint8array(s) {
    var a = new Uint8Array(s.length / 2);
    for (var i = 0; i < s.length; i += 2) {
        a[i / 2] = parseInt(s.substring(i, i + 2), 16);
    }
    return a;
}
exports.hex_to_uint8array = hex_to_uint8array;
function to_hex(s) {
    var encoder = new TextEncoder();
    var a = encoder.encode(s);
    return uint8array_to_hex(a);
}
exports.to_hex = to_hex;
function pack_string(s) {
    var h = to_hex(s);
    return '0501' + Number(h.length / 2).toString(16).padStart(8, '0') + h;
}
exports.pack_string = pack_string;
function of_hex(s) {
    var a = hex_to_uint8array(s);
    var decoder = new TextDecoder();
    return decoder.decode(a);
}
exports.of_hex = of_hex;
function tezos_signed_message_prefix(domain) {
    if (domain === void 0) { domain = "rarible.com"; }
    var date = new Date();
    return "Tezos Signed Message: ".concat(domain, " ").concat(date.toISOString(), " ");
}
exports.tezos_signed_message_prefix = tezos_signed_message_prefix;
function sign(p, message, type) {
    return __awaiter(this, void 0, void 0, function () {
        var edpk, r;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    type = type || "message";
                    return [4 /*yield*/, p.public_key()];
                case 1:
                    edpk = _a.sent();
                    if (edpk == undefined)
                        throw new Error("cannot get public key from provider");
                    return [4 /*yield*/, p.sign(message, type)];
                case 2:
                    r = _a.sent();
                    return [2 /*return*/, __assign({ edpk: edpk }, r)];
            }
        });
    });
}
exports.sign = sign;
exports.tz1_prefix = new Uint8Array([6, 161, 159]);
exports.tz2_prefix = new Uint8Array([6, 161, 161]);
exports.tz3_prefix = new Uint8Array([6, 161, 164]);
exports.edpk_prefix = new Uint8Array([13, 15, 37, 217]);
exports.sppk_prefix = new Uint8Array([3, 254, 226, 86]);
exports.p2pk_prefix = new Uint8Array([3, 178, 139, 127]);
exports.edsk_prefix = new Uint8Array([13, 15, 58, 7]);
exports.spsk_prefix = new Uint8Array([17, 162, 224, 201]);
exports.p2sk_prefix = new Uint8Array([16, 81, 238, 189]);
exports.edsig_prefix = new Uint8Array([9, 245, 205, 134, 18]);
exports.spsig1_prefix = new Uint8Array([13, 115, 101, 19, 63]);
exports.p2sig_prefix = new Uint8Array([54, 240, 44, 52]);
exports.sig_prefix = new Uint8Array([4, 130, 43]);
exports.op_prefix = new Uint8Array([5, 116]);
exports.kt1_prefix = new Uint8Array([2, 90, 121]);
function b58enc(payload, prefix) {
    var n = new Uint8Array(prefix.length + payload.length);
    n.set(prefix);
    n.set(payload, prefix.length);
    return bs58check.encode(Buffer.from(n.buffer));
}
exports.b58enc = b58enc;
function b58dec(enc, prefix) {
    return bs58check.decode(enc).slice(prefix.length);
}
exports.b58dec = b58dec;
function pk_to_pkh(pk) {
    var pkh_prefix;
    var pk_prefix;
    switch (pk.substring(0, 2)) {
        case 'ed':
            pkh_prefix = exports.tz1_prefix;
            pk_prefix = exports.edpk_prefix;
            break;
        case 'sp':
            pkh_prefix = exports.tz2_prefix;
            pk_prefix = exports.sppk_prefix;
            break;
        case 'p2':
            pkh_prefix = exports.tz3_prefix;
            pk_prefix = exports.p2pk_prefix;
            break;
        default:
            throw new Error("don't handle base58 key ".concat(pk));
    }
    var pk_bytes = b58dec(pk, pk_prefix);
    var hash = blake.blake2b(pk_bytes, null, 20);
    return b58enc(hash, pkh_prefix);
}
exports.pk_to_pkh = pk_to_pkh;
function op_to_kt1(hash) {
    var op = b58dec(hash, exports.op_prefix);
    var data = new Uint8Array(__spreadArray(__spreadArray([], __read(op), false), [0, 0, 0, 0], false));
    var hash_kt1 = blake.blake2b(data, null, 20);
    return b58enc(hash_kt1, exports.kt1_prefix);
}
exports.op_to_kt1 = op_to_kt1;
function asset_factor(config, asset_type, asset_contract, asset_token_id) {
    return __awaiter(this, void 0, void 0, function () {
        var decimals, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = +asset_type;
                    switch (_a) {
                        case AssetTypeV2.FA12: return [3 /*break*/, 1];
                        case AssetTypeV2.FA2: return [3 /*break*/, 1];
                    }
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, get_decimals(config, asset_contract, asset_token_id)];
                case 2:
                    decimals = _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    decimals = new bignumber_js_1.default(6);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/, new bignumber_js_1.default(10).pow(decimals)];
            }
        });
    });
}
exports.asset_factor = asset_factor;
function absolute_amount(config, amount, asset_type, asset_contract, asset_token_id) {
    return __awaiter(this, void 0, void 0, function () {
        var factor;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, asset_factor(config, asset_type, asset_contract, asset_token_id)];
                case 1:
                    factor = _a.sent();
                    return [2 /*return*/, new bignumber_js_1.default(amount).times(factor).integerValue()];
            }
        });
    });
}
exports.absolute_amount = absolute_amount;
function packFA2Asset(assetContract, assetId) {
    return (0, michel_codec_1.packDataBytes)({
        prim: "Pair",
        args: [
            {
                string: "".concat(assetContract),
            },
            {
                int: "".concat(assetId),
            },
        ],
    }, {
        prim: "pair",
        args: [
            {
                prim: "address",
            },
            {
                prim: "nat",
            },
        ],
    });
}
exports.packFA2Asset = packFA2Asset;
;
function unpackFA2Asset(data) {
    var unpackedData = (0, michel_codec_1.unpackDataBytes)({
        bytes: data,
    }, {
        prim: "pair",
        args: [
            {
                prim: "address",
            },
            {
                prim: "nat",
            },
        ],
    });
    var raw_result = JSON.parse(JSON.stringify(unpackedData));
    try {
        var result = {
            contract: raw_result.args[0].string,
            token_id: raw_result.args[1].int
        };
        return result;
    }
    catch (e) {
        throw new Error("Can't un pack FA2 asset: " + data);
    }
}
exports.unpackFA2Asset = unpackFA2Asset;
;
function packFA12Asset(assetContract) {
    return (0, michel_codec_1.packDataBytes)({
        string: "".concat(assetContract),
    }, {
        prim: "address",
    });
}
exports.packFA12Asset = packFA12Asset;
;
function unpackFA12Asset(data) {
    var unpackedData = (0, michel_codec_1.unpackDataBytes)({
        bytes: data,
    }, {
        prim: "address",
    });
    var result = {
        contract: "string" in unpackedData ? unpackedData.string : undefined
    };
    if (result.contract == undefined) {
        throw new Error("Can't unpack FA12 asset: " + data);
    }
    return result;
}
exports.unpackFA12Asset = unpackFA12Asset;
function getAsset(sale_type, assetContract, assetId) {
    var asset = "";
    if (sale_type == AssetTypeV2.FA2) {
        asset = packFA2Asset(assetContract, assetId).bytes;
    }
    else if (sale_type == AssetTypeV2.FA12) {
        asset = packFA12Asset(assetContract).bytes;
    }
    return asset;
}
exports.getAsset = getAsset;
function get_ft_type(config, assetContract) {
    return __awaiter(this, void 0, void 0, function () {
        var result, assetType, data, tzips, e_11;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, fetch_wrapper_1.fetchWrapper)(config.tzkt + '/v1/contracts/' + assetContract, {
                        defaultErrorCode: fetch_wrapper_1.NetworkErrorCode.TEZOS_EXTERNAL_ERR,
                    })];
                case 1:
                    result = _a.sent();
                    assetType = undefined;
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, result.json()];
                case 3:
                    data = _a.sent();
                    tzips = data.tzips;
                    if (tzips.includes("fa2")) {
                        assetType = AssetTypeV2.FA2;
                    }
                    else if (tzips.includes("fa12")) {
                        assetType = AssetTypeV2.FA12;
                    }
                    return [3 /*break*/, 5];
                case 4:
                    e_11 = _a.sent();
                    console.error(e_11);
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/, assetType];
            }
        });
    });
}
exports.get_ft_type = get_ft_type;
function get_decimals(config, contract, token_id) {
    if (token_id === void 0) { token_id = new bignumber_js_1.default(0); }
    return __awaiter(this, void 0, void 0, function () {
        var result, token;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, fetch_wrapper_1.fetchWrapper)("".concat(config.tzkt, "/v1/tokens?contract=").concat(contract, "&tokenId=").concat(token_id), {
                        defaultErrorCode: fetch_wrapper_1.NetworkErrorCode.TEZOS_EXTERNAL_ERR,
                    })];
                case 1:
                    result = _a.sent();
                    return [4 /*yield*/, result.json()];
                case 2:
                    token = _a.sent();
                    if (token.length == 1 && token[0].metadata != undefined) {
                        if (token[0].metadata.decimals != undefined) {
                            return [2 /*return*/, new bignumber_js_1.default(token[0].metadata.decimals)];
                        }
                        else {
                            return [2 /*return*/, new bignumber_js_1.default(0)];
                        }
                    }
                    else {
                        return [2 /*return*/, new bignumber_js_1.default(0)];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.get_decimals = get_decimals;
function process_token_id(sale_type, token_id) {
    if (sale_type != AssetTypeV2.FA2) {
        return undefined;
    }
    else {
        return token_id;
    }
}
exports.process_token_id = process_token_id;
function parts_to_micheline(p) {
    var e_12, _a;
    var parts = [];
    try {
        for (var p_1 = __values(p), p_1_1 = p_1.next(); !p_1_1.done; p_1_1 = p_1.next()) {
            var part = p_1_1.value;
            parts.push({
                prim: "Pair",
                args: [{
                        string: part.account
                    }, {
                        int: "".concat(part.value)
                    }]
            });
        }
    }
    catch (e_12_1) { e_12 = { error: e_12_1 }; }
    finally {
        try {
            if (p_1_1 && !p_1_1.done && (_a = p_1.return)) _a.call(p_1);
        }
        finally { if (e_12) throw e_12.error; }
    }
    return parts;
}
exports.parts_to_micheline = parts_to_micheline;
function objkt_parts_to_micheline(p) {
    var e_13, _a;
    var parts = [];
    try {
        for (var p_2 = __values(p), p_2_1 = p_2.next(); !p_2_1.done; p_2_1 = p_2.next()) {
            var part = p_2_1.value;
            parts.push({
                prim: "Pair",
                args: [{
                        int: "".concat(part.value)
                    }, {
                        string: "".concat(part.account)
                    }]
            });
        }
    }
    catch (e_13_1) { e_13 = { error: e_13_1 }; }
    finally {
        try {
            if (p_2_1 && !p_2_1.done && (_a = p_2.return)) _a.call(p_2);
        }
        finally { if (e_13) throw e_13.error; }
    }
    return parts;
}
exports.objkt_parts_to_micheline = objkt_parts_to_micheline;
function optional_date_arg(date) {
    if (date) {
        return {
            prim: "Some",
            args: [{
                    int: new bignumber_js_1.default(date).toFixed()
                }]
        };
    }
    else {
        return {
            prim: "None"
        };
    }
}
exports.optional_date_arg = optional_date_arg;
function delay(num) {
    return new Promise(function (r) { return setTimeout(r, num); });
}
exports.delay = delay;
function retry(num, del, thunk) {
    return thunk().catch(function (error) {
        if (num === 0) {
            throw error;
        }
        return delay(del).then(function () { return retry(num - 1, del, thunk); });
    });
}
exports.retry = retry;
