"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mkPackedBundle = void 0;
var michel_codec_1 = require("@taquito/michel-codec");
function mkBundleItem(bundle_item) {
    return {
        prim: "Pair",
        args: [
            {
                string: "".concat(bundle_item.asset_contract),
            },
            {
                prim: "Pair",
                args: [
                    {
                        int: "".concat(bundle_item.asset_token_id),
                    },
                    {
                        int: "".concat(bundle_item.asset_quantity),
                    },
                ],
            }
        ],
    };
}
;
function mkMichelsonBundle(bundle) {
    var e_1, _a;
    var michelson_bundle = [];
    try {
        for (var bundle_1 = __values(bundle), bundle_1_1 = bundle_1.next(); !bundle_1_1.done; bundle_1_1 = bundle_1.next()) {
            var item = bundle_1_1.value;
            michelson_bundle.push(mkBundleItem(item));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (bundle_1_1 && !bundle_1_1.done && (_a = bundle_1.return)) _a.call(bundle_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return michelson_bundle;
}
function mkPackedBundle(bundle) {
    return (0, michel_codec_1.packDataBytes)(mkMichelsonBundle(bundle), {
        "prim": "list",
        "args": [{
                "prim": "pair",
                "args": [{
                        "prim": "address",
                        "annots": ["%bundle_item_contract"]
                    }, {
                        "prim": "pair",
                        "args": [{
                                "prim": "nat",
                                "annots": ["%bundle_item_id"]
                            }, {
                                "prim": "nat",
                                "annots": ["%bundle_item_qty"]
                            }]
                    }]
            }]
    }).bytes;
}
exports.mkPackedBundle = mkPackedBundle;
;
