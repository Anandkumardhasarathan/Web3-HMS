import { AssetTypeV2, BundleItem, OperationResult, Part, Provider } from "@rarible/tezos-common";
import BigNumber from "bignumber.js";
export interface Auction {
    sell_asset_contract: string;
    sell_asset_token_id: BigNumber;
    sell_asset_amount: BigNumber;
    buy_asset_type: AssetTypeV2;
    buy_asset_contract?: string;
    buy_asset_token_id?: BigNumber;
    start?: number;
    duration: BigNumber;
    minimal_price: BigNumber;
    max_seller_fees: BigNumber;
    buyout_price: BigNumber;
    minimal_step: BigNumber;
    origin_fees: Array<Part>;
    payouts: Array<Part>;
}
export interface BundleAuction {
    bundle: Array<BundleItem>;
    buy_asset_type: AssetTypeV2;
    buy_asset_contract?: string;
    buy_asset_token_id?: BigNumber;
    start?: number;
    duration: BigNumber;
    minimal_price: BigNumber;
    max_seller_fees: BigNumber;
    buyout_price: BigNumber;
    minimal_step: BigNumber;
    origin_fees: Array<Part>;
    payouts: Array<Part>;
}
export interface AuctionBid {
    asset_contract: string;
    asset_token_id: BigNumber;
    asset_seller: string;
    origin_fees: Array<Part>;
    payouts: Array<Part>;
    amount: BigNumber;
    bidder?: string;
}
export interface BundleAuctionBid {
    bundle: Array<BundleItem>;
    asset_seller: string;
    origin_fees: Array<Part>;
    payouts: Array<Part>;
    amount: BigNumber;
    bidder?: string;
}
export interface AuctionBidInfo {
    bid_origin_fees: Array<Part>;
    bid_payouts: Array<Part>;
    bid_amount: BigNumber;
    bid_bidder: string;
    bid_data_type?: string;
    bid_data?: string;
}
export interface AuctionInfo {
    auction_sell_asset_amount: BigNumber;
    auction_buy_asset_type: AssetTypeV2;
    auction_buy_asset: string;
    auction_last_bid: AuctionBidInfo;
    auction_start_time: BigNumber;
    auction_end_time: BigNumber;
    auction_minimal_price: BigNumber;
    auction_buy_out_price: BigNumber;
    auction_minimal_step: BigNumber;
    auction_max_seller_fees: BigNumber;
    auction_origin_fees: Array<Part>;
    auction_payouts: Array<Part>;
    auction_data_type?: string;
    auction_data?: string;
}
export interface BundleAuctionInfo {
    bar_buy_asset_type: AssetTypeV2;
    bar_buy_asset: string;
    bar_last_bid: AuctionBidInfo;
    bar_start_time: BigNumber;
    bar_end_time: BigNumber;
    bar_minimal_price: BigNumber;
    bar_buy_out_price: BigNumber;
    bar_minimal_step: BigNumber;
    bar_max_seller_fees: BigNumber;
    bar_origin_fees: Array<Part>;
    bar_payouts: Array<Part>;
    bar_data_type?: string;
    bar_data?: string;
}
export declare function start_auction(provider: Provider, auction: Auction): Promise<OperationResult>;
export declare function start_bundle_auction(provider: Provider, auction: BundleAuction): Promise<OperationResult>;
export declare function get_auction(provider: Provider, auction_asset_contract: string, auction_asset_token_id: BigNumber, auction_seller: string): Promise<AuctionInfo | undefined>;
export declare function get_bundle_auction(provider: Provider, bundle: Array<BundleItem>, auction_seller: string): Promise<BundleAuctionInfo | undefined>;
export declare function put_auction_bid(provider: Provider, bid: AuctionBid, auction_asset_contract: string, auction_asset_token_id: BigNumber, auction_seller: string): Promise<OperationResult>;
export declare function put_bundle_auction_bid(provider: Provider, bid: BundleAuctionBid, auction_seller: string): Promise<OperationResult>;
export declare function cancel_auction(provider: Provider, auction_asset_contract: string, auction_asset_token_id: BigNumber): Promise<OperationResult>;
export declare function cancel_bundle_auction(provider: Provider, bundle: Array<BundleItem>): Promise<OperationResult>;
export declare function finish_auction(provider: Provider, auction_asset_contract: string, auction_asset_token_id: BigNumber, auction_seller: string): Promise<OperationResult>;
export declare function finish_bundle_auction(provider: Provider, bundle: Array<BundleItem>, auction_seller: string): Promise<OperationResult>;
