"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.finish_bundle_auction = exports.finish_auction = exports.cancel_bundle_auction = exports.cancel_auction = exports.put_bundle_auction_bid = exports.put_auction_bid = exports.get_bundle_auction = exports.get_auction = exports.start_bundle_auction = exports.start_auction = void 0;
var tezos_common_1 = require("@rarible/tezos-common");
var bignumber_js_1 = require("bignumber.js");
var tezos_common_2 = require("@rarible/tezos-common");
function start_auction(provider, auction) {
    return __awaiter(this, void 0, void 0, function () {
        var seller, arg_approve, arg, args, op;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    seller = _a.sent();
                    return [4 /*yield*/, (0, tezos_common_1.approve_v2)(provider, seller, tezos_common_1.AssetTypeV2.FA2, provider.config.transfer_manager, auction.sell_asset_contract, auction.sell_asset_token_id)];
                case 2:
                    arg_approve = _a.sent();
                    arg = auction_arg(provider, auction);
                    args = (arg_approve) ? [arg_approve, arg] : [arg];
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, args)];
                case 3:
                    op = _a.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 4:
                    _a.sent();
                    return [2 /*return*/, op];
            }
        });
    });
}
exports.start_auction = start_auction;
function start_bundle_auction(provider, auction) {
    return __awaiter(this, void 0, void 0, function () {
        var args, seller, _a, _b, bundleItem, approve_a, e_1_1, arg, op;
        var e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    args = [];
                    return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    seller = _d.sent();
                    _d.label = 2;
                case 2:
                    _d.trys.push([2, 7, 8, 9]);
                    _a = __values(auction.bundle), _b = _a.next();
                    _d.label = 3;
                case 3:
                    if (!!_b.done) return [3 /*break*/, 6];
                    bundleItem = _b.value;
                    return [4 /*yield*/, (0, tezos_common_1.approve_v2)(provider, seller, tezos_common_1.AssetTypeV2.FA2, provider.config.transfer_manager, bundleItem.asset_contract, bundleItem.asset_token_id)];
                case 4:
                    approve_a = _d.sent();
                    if (approve_a)
                        args = args.concat(approve_a);
                    _d.label = 5;
                case 5:
                    _b = _a.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 9:
                    arg = bundle_auction_arg(provider, auction);
                    args = args.concat(arg);
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, args)];
                case 10:
                    op = _d.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 11:
                    _d.sent();
                    return [2 /*return*/, op];
            }
        });
    });
}
exports.start_bundle_auction = start_bundle_auction;
function get_auction(provider, auction_asset_contract, auction_asset_token_id, auction_seller) {
    return __awaiter(this, void 0, void 0, function () {
        var st, auction;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, tezos_common_2.get_storage)(provider, provider.config.auction_storage)];
                case 1:
                    st = _a.sent();
                    return [4 /*yield*/, st.auctions.get({
                            0: auction_asset_contract,
                            1: auction_asset_token_id.toFixed(),
                            2: auction_seller
                        })];
                case 2:
                    auction = _a.sent();
                    return [2 /*return*/, auction];
            }
        });
    });
}
exports.get_auction = get_auction;
function get_bundle_auction(provider, bundle, auction_seller) {
    return __awaiter(this, void 0, void 0, function () {
        var st, auction;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, tezos_common_2.get_storage)(provider, provider.config.auction_storage)];
                case 1:
                    st = _a.sent();
                    return [4 /*yield*/, st.bundle_auctions.get({
                            0: (0, tezos_common_1.mkPackedBundle)(bundle),
                            1: auction_seller,
                        })];
                case 2:
                    auction = _a.sent();
                    return [2 /*return*/, auction];
            }
        });
    });
}
exports.get_bundle_auction = get_bundle_auction;
function put_auction_bid(provider, bid, auction_asset_contract, auction_asset_token_id, auction_seller) {
    return __awaiter(this, void 0, void 0, function () {
        var bidder, arg_approve, auction, asset, processed_amount, arg, args, op;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    bidder = _a.sent();
                    return [4 /*yield*/, get_auction(provider, auction_asset_contract, auction_asset_token_id, auction_seller)];
                case 2:
                    auction = _a.sent();
                    if (auction == undefined) {
                        throw new Error("Missing auction");
                    }
                    asset = {};
                    if (auction.auction_buy_asset_type == tezos_common_1.AssetTypeV2.FA2) {
                        asset = (0, tezos_common_1.unpackFA2Asset)(auction.auction_buy_asset);
                    }
                    else if (auction.auction_buy_asset_type == tezos_common_1.AssetTypeV2.FA12) {
                        asset = (0, tezos_common_1.unpackFA12Asset)(auction.auction_buy_asset);
                    }
                    return [4 /*yield*/, (0, tezos_common_1.absolute_amount)(provider.config, bid.amount, auction.auction_buy_asset_type, asset.contract, asset.token_id)];
                case 3:
                    processed_amount = _a.sent();
                    if (!(auction.auction_buy_asset_type == tezos_common_1.AssetTypeV2.FA2 || auction.auction_buy_asset_type == tezos_common_1.AssetTypeV2.FA12)) return [3 /*break*/, 5];
                    return [4 /*yield*/, (0, tezos_common_1.approve_v2)(provider, bidder, auction.auction_buy_asset_type, provider.config.transfer_manager, asset.contract, asset.token_id, processed_amount)];
                case 4:
                    arg_approve = _a.sent();
                    _a.label = 5;
                case 5:
                    arg = bid_arg(provider, bid, auction.auction_buy_asset_type, processed_amount);
                    args = (arg_approve) ? [arg_approve, arg] : [arg];
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, args)];
                case 6:
                    op = _a.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 7:
                    _a.sent();
                    return [2 /*return*/, op];
            }
        });
    });
}
exports.put_auction_bid = put_auction_bid;
function put_bundle_auction_bid(provider, bid, auction_seller) {
    return __awaiter(this, void 0, void 0, function () {
        var bidder, arg_approve, auction, asset, processed_amount, arg, args, op;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    bidder = _a.sent();
                    return [4 /*yield*/, get_bundle_auction(provider, bid.bundle, auction_seller)];
                case 2:
                    auction = _a.sent();
                    if (auction == undefined) {
                        throw new Error("Missing auction");
                    }
                    asset = {};
                    if (auction.bar_buy_asset_type == tezos_common_1.AssetTypeV2.FA2) {
                        asset = (0, tezos_common_1.unpackFA2Asset)(auction.bar_buy_asset);
                    }
                    else if (auction.bar_buy_asset_type == tezos_common_1.AssetTypeV2.FA12) {
                        asset = (0, tezos_common_1.unpackFA12Asset)(auction.bar_buy_asset);
                    }
                    return [4 /*yield*/, (0, tezos_common_1.absolute_amount)(provider.config, bid.amount, auction.bar_buy_asset_type, asset.contract, asset.token_id)];
                case 3:
                    processed_amount = _a.sent();
                    if (!(auction.bar_buy_asset_type == tezos_common_1.AssetTypeV2.FA2 || auction.bar_buy_asset_type == tezos_common_1.AssetTypeV2.FA12)) return [3 /*break*/, 5];
                    return [4 /*yield*/, (0, tezos_common_1.approve_v2)(provider, bidder, auction.bar_buy_asset_type, provider.config.transfer_manager, asset.contract, asset.token_id, processed_amount)];
                case 4:
                    arg_approve = _a.sent();
                    _a.label = 5;
                case 5:
                    arg = bundle_bid_arg(provider, bid, auction.bar_buy_asset_type, processed_amount);
                    args = (arg_approve) ? [arg_approve, arg] : [arg];
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, args)];
                case 6:
                    op = _a.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 7:
                    _a.sent();
                    return [2 /*return*/, op];
            }
        });
    });
}
exports.put_bundle_auction_bid = put_bundle_auction_bid;
function cancel_auction(provider, auction_asset_contract, auction_asset_token_id) {
    return __awaiter(this, void 0, void 0, function () {
        var parameter, arg, op;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parameter = [
                        { string: auction_asset_contract },
                        { int: auction_asset_token_id.toString() }
                    ];
                    arg = { destination: provider.config.auction, entrypoint: "cancel_auction", parameter: parameter };
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, [arg])];
                case 1:
                    op = _a.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 2:
                    _a.sent();
                    return [2 /*return*/, op];
            }
        });
    });
}
exports.cancel_auction = cancel_auction;
function cancel_bundle_auction(provider, bundle) {
    return __awaiter(this, void 0, void 0, function () {
        var parameter, arg, op;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parameter = { bytes: (0, tezos_common_1.mkPackedBundle)(bundle) };
                    arg = { destination: provider.config.auction, entrypoint: "cancel_bundle_auction", parameter: parameter };
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, [arg])];
                case 1:
                    op = _a.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 2:
                    _a.sent();
                    return [2 /*return*/, op];
            }
        });
    });
}
exports.cancel_bundle_auction = cancel_bundle_auction;
function finish_auction(provider, auction_asset_contract, auction_asset_token_id, auction_seller) {
    return __awaiter(this, void 0, void 0, function () {
        var parameter, arg, op;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parameter = [
                        { string: auction_asset_contract },
                        { int: auction_asset_token_id.toString() },
                        { string: auction_seller }
                    ];
                    arg = { destination: provider.config.auction, entrypoint: "finish_auction", parameter: parameter };
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, [arg])];
                case 1:
                    op = _a.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 2:
                    _a.sent();
                    return [2 /*return*/, op];
            }
        });
    });
}
exports.finish_auction = finish_auction;
function finish_bundle_auction(provider, bundle, auction_seller) {
    return __awaiter(this, void 0, void 0, function () {
        var parameter, arg, op;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    parameter = [
                        { bytes: (0, tezos_common_1.mkPackedBundle)(bundle) },
                        { string: auction_seller }
                    ];
                    arg = { destination: provider.config.auction, entrypoint: "finish_bundle_auction", parameter: parameter };
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, [arg])];
                case 1:
                    op = _a.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 2:
                    _a.sent();
                    return [2 /*return*/, op];
            }
        });
    });
}
exports.finish_bundle_auction = finish_bundle_auction;
function auction_arg(provider, auction) {
    var parameter = {
        prim: "Pair",
        args: [{
                string: auction.sell_asset_contract
            },
            {
                prim: "Pair",
                args: [{
                        int: "".concat(auction.sell_asset_token_id)
                    },
                    {
                        prim: "Pair",
                        args: [{
                                int: "".concat(auction.sell_asset_amount)
                            },
                            {
                                prim: "Pair",
                                args: [{
                                        int: "".concat(auction.buy_asset_type)
                                    },
                                    {
                                        prim: "Pair",
                                        args: [{
                                                bytes: (0, tezos_common_1.getAsset)(auction.buy_asset_type, auction.buy_asset_contract, auction.buy_asset_token_id)
                                            },
                                            {
                                                prim: "Pair",
                                                args: [
                                                    (0, tezos_common_1.optional_date_arg)(auction.start),
                                                    {
                                                        prim: "Pair",
                                                        args: [{
                                                                int: "".concat(auction.duration)
                                                            },
                                                            {
                                                                prim: "Pair",
                                                                args: [{
                                                                        int: "".concat(auction.minimal_price)
                                                                    },
                                                                    {
                                                                        prim: "Pair",
                                                                        args: [{
                                                                                int: "".concat(auction.buyout_price)
                                                                            },
                                                                            {
                                                                                prim: "Pair",
                                                                                args: [{
                                                                                        int: "".concat(auction.minimal_step)
                                                                                    },
                                                                                    {
                                                                                        prim: "Pair",
                                                                                        args: [{
                                                                                                int: "".concat(auction.max_seller_fees)
                                                                                            },
                                                                                            {
                                                                                                prim: "Pair",
                                                                                                args: [
                                                                                                    (0, tezos_common_1.parts_to_micheline)(auction.origin_fees),
                                                                                                    {
                                                                                                        prim: "Pair",
                                                                                                        args: [
                                                                                                            (0, tezos_common_1.parts_to_micheline)(auction.payouts),
                                                                                                            {
                                                                                                                prim: "Pair",
                                                                                                                args: [{
                                                                                                                        prim: "None"
                                                                                                                    },
                                                                                                                    {
                                                                                                                        prim: "None"
                                                                                                                    }
                                                                                                                ]
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                ]
                                                                                            }]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    };
    return { destination: provider.config.auction, entrypoint: "start_auction", parameter: parameter };
}
function bid_arg(provider, bid, bid_type, processed_amount) {
    var tx_amount = new bignumber_js_1.default(0);
    if (bid_type == tezos_common_1.AssetTypeV2.XTZ) {
        tx_amount = bid.amount;
    }
    var parameter = {
        prim: "Pair",
        args: [
            {
                string: "".concat(bid.asset_contract)
            },
            {
                prim: "Pair",
                args: [
                    {
                        int: "".concat(bid.asset_token_id)
                    },
                    {
                        prim: "Pair",
                        args: [
                            {
                                string: "".concat(bid.asset_seller)
                            },
                            {
                                prim: "Pair",
                                args: [
                                    (0, tezos_common_1.parts_to_micheline)(bid.origin_fees),
                                    {
                                        prim: "Pair",
                                        args: [
                                            (0, tezos_common_1.parts_to_micheline)(bid.payouts),
                                            {
                                                prim: "Pair",
                                                args: [
                                                    {
                                                        int: "".concat(processed_amount)
                                                    },
                                                    {
                                                        prim: "Pair",
                                                        args: [
                                                            {
                                                                string: "".concat(bid.bidder)
                                                            },
                                                            {
                                                                prim: "Pair",
                                                                args: [
                                                                    {
                                                                        prim: "None"
                                                                    },
                                                                    {
                                                                        prim: "None"
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    };
    return { destination: provider.config.auction, entrypoint: "put_bid", parameter: parameter, amount: tx_amount };
}
function bundle_bid_arg(provider, bid, bid_type, processed_amount) {
    var tx_amount = new bignumber_js_1.default(0);
    if (bid_type == tezos_common_1.AssetTypeV2.XTZ) {
        tx_amount = bid.amount;
    }
    var parameter = {
        prim: "Pair",
        args: [
            {
                bytes: (0, tezos_common_1.mkPackedBundle)(bid.bundle)
            },
            {
                prim: "Pair",
                args: [
                    {
                        string: "".concat(bid.asset_seller)
                    },
                    {
                        prim: "Pair",
                        args: [
                            (0, tezos_common_1.parts_to_micheline)(bid.origin_fees),
                            {
                                prim: "Pair",
                                args: [
                                    (0, tezos_common_1.parts_to_micheline)(bid.payouts),
                                    {
                                        prim: "Pair",
                                        args: [
                                            {
                                                "int": "".concat(processed_amount)
                                            },
                                            {
                                                prim: "Pair",
                                                args: [
                                                    {
                                                        string: "".concat(bid.bidder)
                                                    },
                                                    {
                                                        prim: "Pair",
                                                        args: [
                                                            {
                                                                prim: "None"
                                                            },
                                                            {
                                                                prim: "None"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    };
    return { destination: provider.config.auction, entrypoint: "put_bundle_bid", parameter: parameter, amount: tx_amount };
}
function bundle_auction_arg(provider, auction) {
    var parameter = {
        prim: "Pair",
        args: [
            {
                bytes: (0, tezos_common_1.mkPackedBundle)(auction.bundle)
            },
            {
                prim: "Pair",
                args: [
                    {
                        int: "".concat(auction.buy_asset_type)
                    },
                    {
                        prim: "Pair",
                        args: [
                            {
                                bytes: (0, tezos_common_1.getAsset)(auction.buy_asset_type, auction.buy_asset_contract, auction.buy_asset_token_id)
                            },
                            {
                                prim: "Pair",
                                args: [
                                    (0, tezos_common_1.optional_date_arg)(auction.start),
                                    {
                                        prim: "Pair",
                                        args: [
                                            {
                                                int: "".concat(auction.duration)
                                            },
                                            {
                                                prim: "Pair",
                                                args: [
                                                    {
                                                        int: "".concat(auction.minimal_price)
                                                    },
                                                    {
                                                        prim: "Pair",
                                                        args: [
                                                            {
                                                                int: "".concat(auction.buyout_price)
                                                            },
                                                            {
                                                                prim: "Pair",
                                                                args: [
                                                                    {
                                                                        int: "".concat(auction.minimal_step)
                                                                    },
                                                                    {
                                                                        prim: "Pair",
                                                                        args: [
                                                                            {
                                                                                int: "".concat(auction.max_seller_fees)
                                                                            },
                                                                            {
                                                                                prim: "Pair",
                                                                                args: [
                                                                                    (0, tezos_common_1.parts_to_micheline)(auction.origin_fees),
                                                                                    {
                                                                                        prim: "Pair",
                                                                                        args: [
                                                                                            (0, tezos_common_1.parts_to_micheline)(auction.payouts),
                                                                                            {
                                                                                                prim: "Pair",
                                                                                                args: [
                                                                                                    {
                                                                                                        prim: "None"
                                                                                                    },
                                                                                                    {
                                                                                                        prim: "None"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    };
    return { destination: provider.config.auction, entrypoint: "start_bundle_auction", parameter: parameter };
}
