import { AssetTypeV2, BundleItem, OperationResult, Part, Provider, TransactionArg } from "@rarible/tezos-common";
import BigNumber from "bignumber.js";
export interface Bid {
    asset_contract: string;
    asset_token_id: BigNumber;
    bid_type: AssetTypeV2;
    bid_asset_contract?: string;
    bid_asset_token_id?: BigNumber;
    bid: BidInfo;
}
export interface FloorBid {
    asset_contract: string;
    bid_type: AssetTypeV2;
    bid_asset_contract?: string;
    bid_asset_token_id?: BigNumber;
    bid: BidInfo;
}
export interface BundleBid {
    bundle: Array<BundleItem>;
    bid_type: AssetTypeV2;
    bid_asset_contract?: string;
    bid_asset_token_id?: BigNumber;
    bid: BundleBidInfo;
}
export interface BundleBidInfo {
    bid_origin_fees: Array<Part>;
    bid_payouts: Array<Part>;
    bid_amount: BigNumber;
    bid_expiry_date?: number;
    bid_data_type?: string;
    bid_data?: string;
}
export interface BidInfo {
    bid_origin_fees: Array<Part>;
    bid_payouts: Array<Part>;
    bid_amount: BigNumber;
    bid_asset_qty: BigNumber;
    bid_expiry_date?: number;
    bid_data_type?: string;
    bid_data?: string;
}
export interface AcceptBid {
    asset_contract: string;
    asset_token_id: BigNumber;
    bidder: string;
    bid_type: AssetTypeV2;
    bid_asset_contract?: string;
    bid_asset_token_id?: BigNumber;
    bid_origin_fees: Array<Part>;
    bid_payouts: Array<Part>;
}
export interface AcceptBundleBid {
    bundle: Array<BundleItem>;
    bidder: string;
    bid_type: AssetTypeV2;
    bid_asset_contract?: string;
    bid_asset_token_id?: BigNumber;
    bid_origin_fees: Array<Part>;
    bid_payouts: Array<Part>;
}
export interface CancelBid {
    asset_contract: string;
    asset_token_id: BigNumber;
    bid_type: AssetTypeV2;
    bid_asset_contract?: string;
    bid_asset_token_id?: BigNumber;
}
export interface CancelFloorBid {
    asset_contract: string;
    bid_type: AssetTypeV2;
    bid_asset_contract?: string;
    bid_asset_token_id?: BigNumber;
}
export interface CancelBundleBid {
    bundle: Array<BundleItem>;
    bid_type: AssetTypeV2;
    bid_asset_contract?: string;
    bid_asset_token_id?: BigNumber;
}
export declare function put_bid(provider: Provider, bid: Bid): Promise<string | undefined>;
export declare function put_floor_bid(provider: Provider, bid: FloorBid): Promise<OperationResult>;
export declare function put_bundle_bid(provider: Provider, bid: BundleBid): Promise<OperationResult>;
export declare function accept_bid(provider: Provider, bid_data: AcceptBid, is_floor?: boolean): Promise<OperationResult>;
export declare function accept_bundle_bid(provider: Provider, bid_data: AcceptBundleBid): Promise<OperationResult>;
export declare function cancel_bid(provider: Provider, bid_data: CancelBid): Promise<OperationResult>;
export declare function cancel_floor_bid(provider: Provider, bid_data: CancelFloorBid): Promise<OperationResult>;
export declare function cancel_bundle_bid(provider: Provider, bid_data: CancelBundleBid): Promise<OperationResult>;
export declare function bid_arg(provider: Provider, bid: Bid, processed_amount: BigNumber): TransactionArg;
export declare function floor_bid_arg(provider: Provider, bid: FloorBid, processed_amount: BigNumber): TransactionArg;
export declare function bundle_bid_arg(provider: Provider, bid: BundleBid, processed_amount: BigNumber): TransactionArg;
export declare function accept_bid_arg(provider: Provider, bid_data: AcceptBid, is_floor?: boolean): TransactionArg;
export declare function accept_bundle_bid_arg(provider: Provider, bid_data: AcceptBundleBid): TransactionArg;
export declare function cancel_bid_arg(provider: Provider, bid_data: CancelBid): TransactionArg;
export declare function cancel_floor_bid_arg(provider: Provider, bid_data: CancelFloorBid): TransactionArg;
export declare function cancel_bundle_bid_arg(provider: Provider, bid_data: CancelBundleBid): TransactionArg;
