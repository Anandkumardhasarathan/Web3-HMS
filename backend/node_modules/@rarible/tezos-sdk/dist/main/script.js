"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testScript = void 0;
var index_1 = require("./index");
var in_memory_provider_1 = require("../providers/in_memory/in_memory_provider");
var yargs_1 = require("yargs");
var bignumber_js_1 = require("bignumber.js");
var tezos_contracts_1 = require("@rarible/tezos-contracts");
var tezos_common_1 = require("@rarible/tezos-common");
var bids_1 = require("../bids");
var sell_1 = require("../sales/sell");
var buy_1 = require("../sales/buy");
var cancel_1 = require("../sales/cancel");
var ask_1 = require("../marketplaces/objkt/v2/ask");
var fulfill_ask_1 = require("../marketplaces/objkt/v2/fulfill_ask");
var hen_swap_1 = require("../marketplaces/hen/hen_swap");
var hen_collect_1 = require("../marketplaces/hen/hen_collect");
var cancel_2 = require("../marketplaces/hen/cancel");
var fulfill_ask_2 = require("../marketplaces/objkt/v1/fulfill_ask");
var ask_2 = require("../marketplaces/objkt/v1/ask");
var retract_ask_1 = require("../marketplaces/objkt/v2/retract_ask");
var retract_aks_1 = require("../marketplaces/objkt/v1/retract_aks");
var cart_purchase_1 = require("../marketplaces/common/cart-purchase");
var teia_swap_1 = require("../marketplaces/teia/teia_swap");
var teia_collect_1 = require("../marketplaces/teia/teia_collect");
var cancel_3 = require("../marketplaces/teia/cancel");
var versum_swap_1 = require("../marketplaces/versum/versum_swap");
var versum_collect_1 = require("../marketplaces/versum/versum_collect");
var versum_cancel_1 = require("../marketplaces/versum/versum_cancel");
var fxhash_v1_offer_1 = require("../marketplaces/fxhash/v1/fxhash_v1_offer");
var fxhash_v1_collect_1 = require("../marketplaces/fxhash/v1/fxhash_v1_collect");
var fxhash_v1_cancel_1 = require("../marketplaces/fxhash/v1/fxhash_v1_cancel");
var fxhash_v2_listing_1 = require("../marketplaces/fxhash/v2/fxhash_v2_listing");
var fxhash_v2_listing_accept_1 = require("../marketplaces/fxhash/v2/fxhash_v2_listing_accept");
var fxhash_v2_cancel_1 = require("../marketplaces/fxhash/v2/fxhash_v2_cancel");
var bid_1 = require("../marketplaces/objkt/v1/bid");
var fullfil_bid_1 = require("../marketplaces/objkt/v1/fullfil_bid");
var offer_1 = require("../marketplaces/objkt/v2/offer");
var fulfill_offer_1 = require("../marketplaces/objkt/v2/fulfill_offer");
var versum_bid_1 = require("../marketplaces/versum/versum_bid");
var versum_accept_bid_1 = require("../marketplaces/versum/versum_accept_bid");
var fxhash_v2_bid_1 = require("../marketplaces/fxhash/v2/fxhash_v2_bid");
var fxhash_v2_bid_accept_1 = require("../marketplaces/fxhash/v2/fxhash_v2_bid_accept");
var bids_2 = require("../marketplaces/common/bids");
var tezos_common_2 = require("@rarible/tezos-common");
function testScript(operation, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var argv, action, token_id_opt, token_id, royalties0, royalties, amount, metadata, tezos, config, devConfig, provider, to, _a, owner, _b, fee_receiver, _c, asset_class, _d, op_transfer, transfer_batch_form_1, items, op_batch_transfer, op_mint, batch_form, i, batch_op_mint, op_burn, meta, op_deploy_fa2, op_deploy_royalties, op_token_metadata, op_metadata_uri, op_deploy_fill, publicKey, _e, contract, tokenId, sell_request, order, batch_sell_form_1, publicKey, items_1, order, publicKey, items_2, bundle_1, sell_request, order, publicKey, _f, contract, tokenId, sell_request, order, publicKey, _g, contract, tokenId, sell_request, order, publicKey, _h, contract, tokenId, sell_request, order, publicKey, _j, contract, tokenId, sell_request, order, publicKey, _k, contract, tokenId, sell_request, order, publicKey, _l, contract, tokenId, sell_request, order, publicKey, _m, contract, tokenId, sell_request, order, publicKey, _o, contract, tokenId, sell_request, order, publicKey, _p, contract, tokenId, sell_request, order, publicKey, _q, contract, tokenId, sell_request, order, publicKey, _r, contract, tokenId, sell_request, order, _s, _t, _u, _v, response, order, op, e_1, _w, contract, tokenId, ft_token_id, amount_1, buyRequest, isOrderExists, op, e_2, batch_buy_form_1, publicKey, ft_token_id_1, amount_2, items_3, op, orders, cart_orders, orders_1, orders_1_1, order, op, orders, cart_orders, orders_2, orders_2_1, order, op, items_4, bundle_2, amount_3, buyRequest, op, e_3, _x, contract, tokenId, auction_request, auction, items_5, bundle_3, auction_request, auction, _y, contract, tokenId, bid, auction, items_6, bundle_4, bid, auction, order, order, order, order, order, order, order, order, order, order, order, order, order, order, order, order, order, order, _z, contract, tokenId, auction, _0, _1, _2, _3, response, order, op, e_4, _4, contract, tokenId, cancel_request, canceled_order, items_7, bundle_5, cancel_request, canceled_order, _5, contract, tokenId, cancel_request, canceled_order, _6, contract, tokenId, cancel_request, canceled_order, items_8, bundle_6, cancel_request, canceled_order, items_9, bundle_7, auction, _7, contract, tokenId, auction, items_10, bundle_8, auction, publicKey, _8, contract, tokenId, auction, _9, contract, tokenId, bid, bid_op, _10, contract, tokenId, bid_data, result, _11, contract, tokenId, bid, bid_op, _12, contract, tokenId, bid_data, result, items_11, bundle_9, bid, bid_op, items_12, bundle_10, bid_data, result, e_5, signature, pk, e_6, _13, contract, tokenId, _14, contract, tokenId, _15, contract, tokenId, publicKey, _16, contract, tokenId, maker, e_7, _17, contract, tokenId, e_8, op_deploy_exchange, op_deploy_transfer_proxy, op_deploy_transfer_manager, arg_update, op_update;
        var e_9, _18, e_10, _19, _20, _21;
        return __generator(this, function (_22) {
            switch (_22.label) {
                case 0: return [4 /*yield*/, (0, yargs_1.default)(process.argv.slice(2)).options({
                        edsk: {
                            type: 'string',
                            default: 'edskRqrEPcFetuV7xDMMFXHLMPbsTawXZjH9yrEz4RBqH1D6H8CeZTTtjGA3ynjTqD8Sgmksi7p5g3u5KUEVqX2EWrRnq5Bymj'
                        },
                        endpoint: { type: 'string', default: 'https://rpc.tzkt.io/ghostnet' },
                        exchange: { type: 'string', default: 'KT1S6H2FWxrpaD7aPRSW1cTTE1xPucXBSTL5' },
                        // contract: {type: 'string', default: 'KT1VnhPmUJnEH5dfeD8WW87LCoxdhGUUVfMV'},
                        contract: { type: 'string', default: 'KT1Uke8qc4YTfP41dGuoGC8UsgRyCtyvKPLA' },
                        royalties_contract: { type: 'string', default: 'KT1AZfqFGFLMUrscNFyawDYAyqXYydz714ya' },
                        token_id: { type: 'number' },
                        royalties: { type: 'string', default: '{}' },
                        amount: { type: 'number', default: 0 },
                        qty: { type: 'number', default: 0 },
                        metadata: { type: 'string', default: '{}' },
                        metadata_key: { type: 'string', default: '' },
                        metadata_value: { type: 'string', default: '' },
                        to: { type: 'string' },
                        owner: { type: 'string' },
                        receiver: { type: 'string' },
                        fee: { type: 'number', default: 0 },
                        operator: { type: 'string', default: '' },
                        fill: { type: 'string', default: 'KT1FAndThSQsVqYQVPHGSG5sQPk1XZycNBvL' },
                        transfer_proxy: { type: 'string', default: 'KT1WbVjXdmBpzzVoYSSUiNt6QFnSC3W768d1' },
                        transfer_manager: { type: 'string', default: 'KT1L1WfmvjQRTRqT8Zv4qey4vdZbyML43UT4' },
                        fee_receiver: { type: 'string' },
                        protocol_fee: { type: 'number', default: 0 },
                        wrapper: { type: 'string', default: '' },
                        item_id: { type: 'string', default: '' },
                        order_id: { type: 'string', default: '' },
                        ft_contract: { type: 'string', default: undefined },
                        ft_token_id: { type: 'string', default: undefined },
                        is_dev: { type: 'boolean', default: false },
                        sale_type: { type: 'number', default: 0 },
                        tzkt: { type: 'string', default: '' },
                        message: { type: 'string', default: '' },
                        dipdup: { type: 'string', default: '' }
                    }).argv];
                case 1:
                    argv = _22.sent();
                    argv = __assign(__assign({}, argv), options);
                    action = operation !== null && operation !== void 0 ? operation : argv._[0];
                    token_id_opt = (argv.token_id != undefined) ? new bignumber_js_1.default(argv.token_id) : undefined;
                    token_id = (argv.token_id != undefined) ? new bignumber_js_1.default(argv.token_id) : new bignumber_js_1.default(0);
                    royalties0 = JSON.parse(argv.royalties);
                    royalties = {};
                    if (royalties0) {
                        Object.keys(royalties0).forEach(function (k) {
                            royalties[k] = new bignumber_js_1.default(royalties0[k]);
                        });
                    }
                    amount = (argv.amount) ? new bignumber_js_1.default(argv.amount) : undefined;
                    metadata = JSON.parse(argv.metadata);
                    tezos = (0, in_memory_provider_1.in_memory_provider)(argv.edsk, argv.endpoint);
                    config = {
                        chain_id: "NetXnHfVqm9iesp",
                        exchange: argv.exchange,
                        transfer_proxy: argv.transfer_proxy,
                        fees: new bignumber_js_1.default(argv.protocol_fee),
                        nft_public: "",
                        mt_public: "",
                        auction: "KT1CB5JBSC7kTxRV3ir2xsooMA1FLieiD4Mt",
                        auction_storage: "KT1KWAPPjuDq4ZeX67rzZWsf6eAeqwtuAfSP",
                        node_url: argv.endpoint,
                        sales: "KT1NcKyhPnomH9PKGeDfvMiGH2PDgKCd5YuM",
                        sales_storage: "KT1GDUG3AQpaKmFjFHVn6PYT4Tprf7ccwPa3",
                        transfer_manager: "KT1LQPAi4w2h9GQ61S8NkENcNe3aH5vYEzjP",
                        bid: "KT1FiEi3Mrh31vJy39CD4hkiHq1AfRpTxNpF",
                        bid_storage: "KT1ENB6j6uMJn7MtDV4VBE1AAAwCXmMtzjUd",
                        sig_checker: "KT1RGGtyEtGCYCoRmTVNoE6qg3ay2DZ1BmDs",
                        tzkt: "https://api.ghostnet.tzkt.io",
                        dipdup: "https://testnet-tezos-indexer.rarible.org/v1/graphql",
                        union_api: "https://testnet-api.rarible.org/v0.1",
                        objkt_sales_v1: "KT1Ax5fm2UNxjXGmrMDytREfqvYoCXoBB4Jo",
                        objkt_sales_v2: "KT1GiZuR6TdkgxZGQGZSdbC3Jox9JTSbqTB6",
                        royalties_provider: "KT1AZfqFGFLMUrscNFyawDYAyqXYydz714ya",
                        hen_marketplace: "KT1XYgjgFQutFfgEiD7RuppSKZsawZbkpKxL",
                        hen_objkts: "KT1P2VyFd61A3ukizJoX37nFF9fqZnihv7Lw",
                        teia_marketplace: "KT1Anx515N2PK8A2ZX5uGNn7Gckh4WytLJmK",
                        versum_marketplace: "KT1B1Wz7jPH23EqKUpDwFDkw3A1yLxGZ4uJy",
                        versum_nfts: "KT1UH5RSbomuV1o6UuDB9yeACbqRMup3utGu",
                        fxhash_sales_v1: "KT1BEc3m6yxN856Y4zfArpDqQ1uZZ1HkDTRh",
                        fxhash_sales_v2: "KT1GCLoBSwUaNjaGXq5RtiP8CXTL3cEeMNDs",
                        fxhash_nfts_v1: "KT1VEXkw6rw6pJDP9APGsMneFafArijmM96j",
                        fxhash_nfts_v2: "KT1WSwXCWPPAxAy4ibPmFyCm4NhmSJT9UuxQ",
                        aggregator_tracker: "KT1DajvCNVScudRm3kCHPfUjsRCtmPnm375s",
                        aggregator_tracker_id: "09616c6c64617461"
                    };
                    devConfig = {
                        chain_id: "NetXnHfVqm9iesp",
                        exchange: argv.exchange,
                        transfer_proxy: argv.transfer_proxy,
                        fees: new bignumber_js_1.default(argv.protocol_fee),
                        nft_public: "",
                        mt_public: "",
                        auction: "KT1CB5JBSC7kTxRV3ir2xsooMA1FLieiD4Mt",
                        auction_storage: "KT1KWAPPjuDq4ZeX67rzZWsf6eAeqwtuAfSP",
                        node_url: argv.endpoint,
                        sales: "KT1NcKyhPnomH9PKGeDfvMiGH2PDgKCd5YuM",
                        sales_storage: "KT1GDUG3AQpaKmFjFHVn6PYT4Tprf7ccwPa3",
                        transfer_manager: "KT1LQPAi4w2h9GQ61S8NkENcNe3aH5vYEzjP",
                        bid: "KT1FiEi3Mrh31vJy39CD4hkiHq1AfRpTxNpF",
                        bid_storage: "KT1ENB6j6uMJn7MtDV4VBE1AAAwCXmMtzjUd",
                        sig_checker: "KT1RGGtyEtGCYCoRmTVNoE6qg3ay2DZ1BmDs",
                        tzkt: "https://api.ghostnet.tzkt.io",
                        dipdup: "https://dev-tezos-indexer.rarible.org/v1/graphql",
                        union_api: "https://dev-api.rarible.org/v0.1",
                        objkt_sales_v1: "KT1Ax5fm2UNxjXGmrMDytREfqvYoCXoBB4Jo",
                        objkt_sales_v2: "KT1GiZuR6TdkgxZGQGZSdbC3Jox9JTSbqTB6",
                        royalties_provider: "KT1AZfqFGFLMUrscNFyawDYAyqXYydz714ya",
                        hen_marketplace: "KT1XYgjgFQutFfgEiD7RuppSKZsawZbkpKxL",
                        hen_objkts: "KT1P2VyFd61A3ukizJoX37nFF9fqZnihv7Lw",
                        teia_marketplace: "KT1Anx515N2PK8A2ZX5uGNn7Gckh4WytLJmK",
                        versum_marketplace: "KT1B1Wz7jPH23EqKUpDwFDkw3A1yLxGZ4uJy",
                        versum_nfts: "KT1UH5RSbomuV1o6UuDB9yeACbqRMup3utGu",
                        fxhash_sales_v1: "KT1BEc3m6yxN856Y4zfArpDqQ1uZZ1HkDTRh",
                        fxhash_sales_v2: "KT1GCLoBSwUaNjaGXq5RtiP8CXTL3cEeMNDs",
                        fxhash_nfts_v1: "KT1VEXkw6rw6pJDP9APGsMneFafArijmM96j",
                        fxhash_nfts_v2: "KT1WSwXCWPPAxAy4ibPmFyCm4NhmSJT9UuxQ",
                        aggregator_tracker: "KT1DajvCNVScudRm3kCHPfUjsRCtmPnm375s",
                        aggregator_tracker_id: "09616c6c64617461"
                    };
                    provider = {
                        tezos: tezos,
                        config: argv.is_dev ? devConfig : config
                    };
                    console.log('is_dev=', !!argv.is_dev);
                    if (!(argv.to)) return [3 /*break*/, 2];
                    _a = argv.to;
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, (0, tezos_common_2.get_address)(provider)];
                case 3:
                    _a = _22.sent();
                    _22.label = 4;
                case 4:
                    to = _a;
                    if (!(argv.owner)) return [3 /*break*/, 5];
                    _b = argv.owner;
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, (0, tezos_common_2.get_address)(provider)];
                case 6:
                    _b = _22.sent();
                    _22.label = 7;
                case 7:
                    owner = _b;
                    if (!(argv.fee_receiver)) return [3 /*break*/, 8];
                    _c = argv.fee_receiver;
                    return [3 /*break*/, 10];
                case 8: return [4 /*yield*/, (0, tezos_common_2.get_address)(provider)];
                case 9:
                    _c = _22.sent();
                    _22.label = 10;
                case 10:
                    fee_receiver = _c;
                    asset_class = (amount == undefined) ? "NFT" : "MT";
                    _d = action;
                    switch (_d) {
                        case 'transfer': return [3 /*break*/, 11];
                        case 'batch_transfer': return [3 /*break*/, 14];
                        case 'mint': return [3 /*break*/, 17];
                        case 'batch_mint': return [3 /*break*/, 20];
                        case 'burn': return [3 /*break*/, 23];
                        case 'deploy_nft': return [3 /*break*/, 26];
                        case 'deploy_royalties': return [3 /*break*/, 29];
                        case 'set_token_metadata': return [3 /*break*/, 32];
                        case 'set_metadata': return [3 /*break*/, 35];
                        case 'deploy_fill': return [3 /*break*/, 38];
                        case 'sell_v2': return [3 /*break*/, 41];
                        case 'batch_sell_v2': return [3 /*break*/, 44];
                        case 'sell_bundle': return [3 /*break*/, 47];
                        case 'ask_v2_objkt': return [3 /*break*/, 50];
                        case 'ask_v1_objkt': return [3 /*break*/, 53];
                        case 'bid_v1_objkt': return [3 /*break*/, 56];
                        case 'bid_v2_objkt': return [3 /*break*/, 59];
                        case 'hen_swap': return [3 /*break*/, 62];
                        case 'teia_swap': return [3 /*break*/, 65];
                        case 'versum_swap': return [3 /*break*/, 68];
                        case 'versum_bid': return [3 /*break*/, 71];
                        case 'fxhash_v1_offer': return [3 /*break*/, 74];
                        case 'fxhash_v2_listing': return [3 /*break*/, 77];
                        case 'fxhash_v2_bid': return [3 /*break*/, 80];
                        case "fill": return [3 /*break*/, 83];
                        case "buy_v2": return [3 /*break*/, 90];
                        case "batch_buy_v2": return [3 /*break*/, 97];
                        case "cart_purchase": return [3 /*break*/, 100];
                        case "bid_purchase": return [3 /*break*/, 102];
                        case "buy_bundle": return [3 /*break*/, 104];
                        case 'auction': return [3 /*break*/, 108];
                        case 'bundle_auction': return [3 /*break*/, 110];
                        case 'put_auction_bid': return [3 /*break*/, 112];
                        case 'put_bundle_auction_bid': return [3 /*break*/, 115];
                        case 'fulfill_ask_v2_objkt': return [3 /*break*/, 118];
                        case 'fulfill_ask_v1_objkt': return [3 /*break*/, 120];
                        case 'fulfill_bid_v1_objkt': return [3 /*break*/, 122];
                        case 'fulfill_bid_v2_objkt': return [3 /*break*/, 124];
                        case 'retract_ask_v2_objkt': return [3 /*break*/, 126];
                        case 'retract_ask_v1_objkt': return [3 /*break*/, 128];
                        case 'hen_collect': return [3 /*break*/, 130];
                        case 'teia_collect': return [3 /*break*/, 132];
                        case 'versum_collect': return [3 /*break*/, 134];
                        case 'versum_accept_bid': return [3 /*break*/, 136];
                        case 'fxhash_v1_collect': return [3 /*break*/, 138];
                        case 'fxhash_v2_listing_accept': return [3 /*break*/, 140];
                        case 'fxhash_v2_bid_accept': return [3 /*break*/, 142];
                        case 'hen_cancel_swap': return [3 /*break*/, 144];
                        case 'teia_cancel_swap': return [3 /*break*/, 146];
                        case 'versum_cancel_swap': return [3 /*break*/, 148];
                        case 'fxhash_v1_cancel_offer': return [3 /*break*/, 150];
                        case 'fxhash_v2_cancel_listing': return [3 /*break*/, 152];
                        case 'cancel_auction': return [3 /*break*/, 154];
                        case "cancel": return [3 /*break*/, 156];
                        case 'cancel_v2': return [3 /*break*/, 163];
                        case 'cancel_bundle_sale': return [3 /*break*/, 165];
                        case 'cancel_bid': return [3 /*break*/, 167];
                        case 'cancel_floor_bid': return [3 /*break*/, 169];
                        case 'cancel_bundle_bid': return [3 /*break*/, 171];
                        case 'cancel_bundle_auction': return [3 /*break*/, 173];
                        case 'finish_auction': return [3 /*break*/, 175];
                        case 'finish_bundle_auction': return [3 /*break*/, 177];
                        case 'get_auction': return [3 /*break*/, 179];
                        case 'put_bid': return [3 /*break*/, 182];
                        case 'accept_bid': return [3 /*break*/, 184];
                        case 'put_floor_bid': return [3 /*break*/, 186];
                        case 'accept_floor_bid': return [3 /*break*/, 188];
                        case 'put_bundle_bid': return [3 /*break*/, 190];
                        case 'accept_bundle_bid': return [3 /*break*/, 192];
                        case "get_decimals": return [3 /*break*/, 194];
                        case "await_v2_order": return [3 /*break*/, 195];
                        case "check_signature": return [3 /*break*/, 198];
                        case "get_ft_type": return [3 /*break*/, 202];
                        case "get_collection_type": return [3 /*break*/, 203];
                        case "get_royalties": return [3 /*break*/, 204];
                        case "royalties_on_chain": return [3 /*break*/, 205];
                        case "get_objkt_order_v2": return [3 /*break*/, 206];
                        case "get_order_type": return [3 /*break*/, 209];
                        case "get_balance": return [3 /*break*/, 212];
                        case 'deploy_exchange': return [3 /*break*/, 213];
                        case 'deploy_transfer_proxy': return [3 /*break*/, 216];
                        case 'deploy_transfer_manager': return [3 /*break*/, 219];
                        case 'update_operators_for_all': return [3 /*break*/, 222];
                    }
                    return [3 /*break*/, 225];
                case 11:
                    console.log("transfer");
                    return [4 /*yield*/, (0, index_1.transfer)(provider, { asset_class: asset_class, contract: argv.contract, token_id: token_id }, to, amount)];
                case 12:
                    op_transfer = _22.sent();
                    return [4 /*yield*/, op_transfer.confirmation()];
                case 13:
                    _22.sent();
                    console.log(op_transfer.hash);
                    return [3 /*break*/, 225];
                case 14:
                    console.log("transfer");
                    transfer_batch_form_1 = [];
                    items = argv.item_id.split(",");
                    items.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        transfer_batch_form_1.push({
                            asset_type: { asset_class: "MT", contract: contract, token_id: new bignumber_js_1.default(tokenId) },
                            to: to,
                            amount: amount
                        });
                    });
                    return [4 /*yield*/, (0, index_1.transfer_batch)(provider, transfer_batch_form_1)];
                case 15:
                    op_batch_transfer = _22.sent();
                    return [4 /*yield*/, op_batch_transfer.confirmation()];
                case 16:
                    _22.sent();
                    console.log(op_batch_transfer.hash);
                    return [2 /*return*/, op_batch_transfer];
                case 17:
                    console.log("mint");
                    return [4 /*yield*/, (0, index_1.mint)(provider, argv.contract, royalties, amount, token_id_opt, metadata, argv.owner)];
                case 18:
                    op_mint = _22.sent();
                    return [4 /*yield*/, op_mint.confirmation()];
                case 19:
                    _22.sent();
                    console.log("minted item=".concat(argv.contract, ":").concat(op_mint.token_id.toString(), " hash=").concat(op_mint.hash));
                    return [2 /*return*/, "".concat(argv.contract, ":").concat(op_mint.token_id.toString())];
                case 20:
                    console.log("mint");
                    batch_form = [];
                    for (i = 0; i < argv.qty; i++) {
                        batch_form.push({
                            contract: argv.contract,
                            royalties: royalties,
                            supply: amount,
                            owner: argv.owner,
                            token_id: token_id_opt,
                            metadata: metadata
                        });
                    }
                    return [4 /*yield*/, (0, index_1.mint_batch)(provider, batch_form)];
                case 21:
                    batch_op_mint = _22.sent();
                    return [4 /*yield*/, batch_op_mint.confirmation()];
                case 22:
                    _22.sent();
                    console.log("minted item=".concat(argv.contract, ":").concat(batch_op_mint.token_ids.toString(), " hash=").concat(batch_op_mint.hash));
                    return [2 /*return*/, batch_op_mint];
                case 23:
                    console.log("burn");
                    return [4 /*yield*/, (0, index_1.burn)(provider, { asset_class: asset_class, contract: argv.contract, token_id: token_id }, amount)];
                case 24:
                    op_burn = _22.sent();
                    return [4 /*yield*/, op_burn.confirmation()];
                case 25:
                    _22.sent();
                    console.log(op_burn.hash);
                    return [3 /*break*/, 225];
                case 26:
                    console.log("deploy nft");
                    meta = {
                        name: 'My NFT collection',
                        symbol: 'MYNFT',
                        contractURI: 'https://ipfs.io/ipfs/QmTKxwnqqxTxH4HE3UVM9yoJFZgbsZ8CuqqRFZCSWBF53m'
                    };
                    console.log(provider, owner, meta);
                    return [4 /*yield*/, (0, index_1.deploy_nft_public)(provider, owner, meta)];
                case 27:
                    op_deploy_fa2 = _22.sent();
                    return [4 /*yield*/, op_deploy_fa2.confirmation()];
                case 28:
                    _22.sent();
                    console.log(op_deploy_fa2.contract);
                    return [3 /*break*/, 225];
                case 29:
                    console.log("deploy royalties");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_royalties)(provider, owner)];
                case 30:
                    op_deploy_royalties = _22.sent();
                    return [4 /*yield*/, op_deploy_royalties.confirmation()];
                case 31:
                    _22.sent();
                    console.log(op_deploy_royalties.contract);
                    return [3 /*break*/, 225];
                case 32:
                    console.log("set token metadata");
                    return [4 /*yield*/, (0, index_1.set_token_metadata)(provider, argv.contract, token_id, metadata)];
                case 33:
                    op_token_metadata = _22.sent();
                    return [4 /*yield*/, op_token_metadata.confirmation()];
                case 34:
                    _22.sent();
                    console.log(op_token_metadata.hash);
                    return [3 /*break*/, 225];
                case 35:
                    console.log("set metadata uri");
                    return [4 /*yield*/, (0, tezos_common_1.set_metadata)(provider, argv.contract, argv.metadata_key, argv.metadata_value)];
                case 36:
                    op_metadata_uri = _22.sent();
                    return [4 /*yield*/, op_metadata_uri.confirmation()];
                case 37:
                    _22.sent();
                    console.log(op_metadata_uri.hash);
                    return [3 /*break*/, 225];
                case 38:
                    console.log("deploy fill");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_fill)(provider, owner)];
                case 39:
                    op_deploy_fill = _22.sent();
                    return [4 /*yield*/, op_deploy_fill.confirmation()];
                case 40:
                    _22.sent();
                    console.log(op_deploy_fill.contract);
                    return [3 /*break*/, 225];
                case 41:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 42:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _e = __read(argv.item_id.split(":"), 2), contract = _e[0], tokenId = _e[1];
                    sell_request = {
                        s_asset_contract: contract,
                        s_asset_token_id: new bignumber_js_1.default(tokenId),
                        s_sale_type: argv.sale_type,
                        s_sale_asset_contract: argv.ft_contract,
                        s_sale_asset_token_id: argv.ft_token_id,
                        s_sale: {
                            sale_amount: new bignumber_js_1.default(argv.amount),
                            sale_asset_qty: new bignumber_js_1.default(argv.qty),
                            sale_max_fees_base_boint: 10000,
                            sale_end: Date.now() + 100 * 1000,
                            sale_start: undefined,
                            sale_payouts: [{
                                    account: "tz1Mxsc66En4HsVHr6rppYZW82ZpLhpupToC",
                                    value: new bignumber_js_1.default(250)
                                },
                                {
                                    account: "tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb",
                                    value: new bignumber_js_1.default(251)
                                }],
                            sale_origin_fees: [{
                                    account: "tz1Mxsc66En4HsVHr6rppYZW82ZpLhpupToC",
                                    value: new bignumber_js_1.default(252)
                                },
                                {
                                    account: "tz1VSUr8wwNhLAzempoch5d6hLRiTh8Cjcjb",
                                    value: new bignumber_js_1.default(253)
                                }],
                            sale_data: undefined,
                            sale_data_type: undefined
                        }
                    };
                    return [4 /*yield*/, (0, sell_1.sellV2)(provider, sell_request)];
                case 43:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 44:
                    console.log("sell item", argv.item_id);
                    batch_sell_form_1 = [];
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 45:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    items_1 = argv.item_id.split(",");
                    items_1.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        batch_sell_form_1.push({
                            s_asset_contract: contract,
                            s_asset_token_id: new bignumber_js_1.default(tokenId),
                            s_sale_type: argv.sale_type,
                            s_sale_asset_contract: argv.ft_contract,
                            s_sale_asset_token_id: argv.ft_token_id,
                            s_sale: {
                                sale_amount: new bignumber_js_1.default(argv.amount),
                                sale_asset_qty: new bignumber_js_1.default(argv.qty),
                                sale_max_fees_base_boint: 10000,
                                sale_end: undefined,
                                sale_start: undefined,
                                sale_origin_fees: [],
                                sale_payouts: [],
                                sale_data: undefined,
                                sale_data_type: undefined
                            }
                        });
                    });
                    return [4 /*yield*/, (0, sell_1.sell_v2_batch)(provider, batch_sell_form_1)];
                case 46:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 47:
                    console.log("sell bundle", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 48:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    items_2 = argv.item_id.split(",");
                    bundle_1 = [];
                    items_2.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_1.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    sell_request = {
                        bundle: bundle_1,
                        s_sale_type: argv.sale_type,
                        s_sale_asset_contract: argv.ft_contract,
                        s_sale_asset_token_id: argv.ft_token_id,
                        s_sale: {
                            sale_amount: new bignumber_js_1.default(argv.amount),
                            sale_qty: new bignumber_js_1.default(argv.qty),
                            sale_max_fees_base_boint: 10000,
                            sale_end: undefined,
                            sale_start: undefined,
                            sale_origin_fees: [],
                            sale_payouts: [],
                            sale_data: undefined,
                            sale_data_type: undefined
                        }
                    };
                    return [4 /*yield*/, (0, sell_1.sellBundle)(provider, sell_request)];
                case 49:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 50:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 51:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _f = __read(argv.item_id.split(":"), 2), contract = _f[0], tokenId = _f[1];
                    sell_request = {
                        token_contract: contract,
                        token_id: new bignumber_js_1.default(tokenId),
                        amount: new bignumber_js_1.default(argv.amount),
                        editions: new bignumber_js_1.default(argv.qty),
                        shares: [],
                        expiry_time: undefined,
                    };
                    return [4 /*yield*/, (0, ask_1.ask_v2)(provider, sell_request)];
                case 52:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 53:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 54:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _g = __read(argv.item_id.split(":"), 2), contract = _g[0], tokenId = _g[1];
                    sell_request = {
                        token_contract: contract,
                        token_id: new bignumber_js_1.default(tokenId),
                        amount: new bignumber_js_1.default(argv.amount),
                        editions: new bignumber_js_1.default(argv.qty),
                        shares: []
                    };
                    return [4 /*yield*/, (0, ask_2.ask_v1)(provider, sell_request)];
                case 55:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 56:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 57:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _h = __read(argv.item_id.split(":"), 2), contract = _h[0], tokenId = _h[1];
                    sell_request = {
                        token_contract: contract,
                        token_id: new bignumber_js_1.default(tokenId),
                        amount: new bignumber_js_1.default(argv.amount),
                        artist: "",
                        shares: []
                    };
                    return [4 /*yield*/, (0, bid_1.objkt_bid_v1)(provider, sell_request)];
                case 58:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 59:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 60:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _j = __read(argv.item_id.split(":"), 2), contract = _j[0], tokenId = _j[1];
                    sell_request = {
                        token_contract: contract,
                        token_id: new bignumber_js_1.default(tokenId),
                        amount: new bignumber_js_1.default(argv.amount),
                        editions: new bignumber_js_1.default(argv.qty),
                        shares: []
                    };
                    return [4 /*yield*/, (0, offer_1.objkt_bid_v2)(provider, sell_request)];
                case 61:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 62:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 63:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _k = __read(argv.item_id.split(":"), 2), contract = _k[0], tokenId = _k[1];
                    sell_request = {
                        token_id: new bignumber_js_1.default(tokenId),
                        editions: new bignumber_js_1.default(argv.qty),
                        price_per_item: new bignumber_js_1.default(argv.amount)
                    };
                    return [4 /*yield*/, (0, hen_swap_1.hen_swap)(provider, sell_request)];
                case 64:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 65:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 66:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _l = __read(argv.item_id.split(":"), 2), contract = _l[0], tokenId = _l[1];
                    sell_request = {
                        token_id: new bignumber_js_1.default(tokenId),
                        editions: new bignumber_js_1.default(argv.qty),
                        price_per_item: new bignumber_js_1.default(argv.amount)
                    };
                    return [4 /*yield*/, (0, teia_swap_1.teia_swap)(provider, sell_request)];
                case 67:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 68:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 69:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _m = __read(argv.item_id.split(":"), 2), contract = _m[0], tokenId = _m[1];
                    console.log('tokenid', tokenId);
                    sell_request = {
                        token_id: new bignumber_js_1.default(tokenId),
                        editions: new bignumber_js_1.default(argv.qty),
                        price_per_item: new bignumber_js_1.default(argv.amount)
                    };
                    return [4 /*yield*/, (0, versum_swap_1.versum_swap)(provider, sell_request)];
                case 70:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 71:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 72:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _o = __read(argv.item_id.split(":"), 2), contract = _o[0], tokenId = _o[1];
                    sell_request = {
                        contract: contract,
                        token_id: new bignumber_js_1.default(tokenId),
                        editions: new bignumber_js_1.default(argv.qty),
                        price_per_item: new bignumber_js_1.default(argv.amount)
                    };
                    return [4 /*yield*/, (0, versum_bid_1.versum_bid)(provider, sell_request)];
                case 73:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 74:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 75:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _p = __read(argv.item_id.split(":"), 2), contract = _p[0], tokenId = _p[1];
                    sell_request = {
                        token_id: new bignumber_js_1.default(tokenId),
                        price_per_item: new bignumber_js_1.default(argv.amount)
                    };
                    return [4 /*yield*/, (0, fxhash_v1_offer_1.fxhash_v1_offer)(provider, sell_request)];
                case 76:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 77:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 78:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _q = __read(argv.item_id.split(":"), 2), contract = _q[0], tokenId = _q[1];
                    sell_request = {
                        token_id: new bignumber_js_1.default(tokenId),
                        price_per_item: new bignumber_js_1.default(argv.amount),
                        version: 1
                    };
                    return [4 /*yield*/, (0, fxhash_v2_listing_1.fxhash_v2_listing)(provider, sell_request)];
                case 79:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 80:
                    console.log("sell item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 81:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _r = __read(argv.item_id.split(":"), 2), contract = _r[0], tokenId = _r[1];
                    sell_request = {
                        token_id: new bignumber_js_1.default(tokenId),
                        price_per_item: new bignumber_js_1.default(argv.amount),
                        version: 1
                    };
                    return [4 /*yield*/, (0, fxhash_v2_bid_1.fxhash_v2_bid)(provider, sell_request)];
                case 82:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 83:
                    _22.trys.push([83, 88, , 89]);
                    _t = (_s = console).log;
                    _v = (_u = "fill order=".concat(argv.order_id, " from ")).concat;
                    return [4 /*yield*/, provider.tezos.address()];
                case 84:
                    _t.apply(_s, [_v.apply(_u, [_22.sent()])]);
                    return [4 /*yield*/, (0, tezos_common_1.get_orders_by_ids)(provider.config, [argv.order_id])];
                case 85:
                    response = _22.sent();
                    console.log("fetched order = " + JSON.stringify(response.orders[0].data));
                    order = (0, index_1.order_of_json)(JSON.parse(response.orders[0].data));
                    return [4 /*yield*/, (0, index_1.fill_order)(provider, order, {
                            amount: new bignumber_js_1.default(order.make.value)
                        })];
                case 86:
                    op = _22.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 87:
                    _22.sent();
                    return [2 /*return*/, op];
                case 88:
                    e_1 = _22.sent();
                    try {
                        console.error(JSON.stringify(e_1, null, ' '));
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return [3 /*break*/, 89];
                case 89: return [3 /*break*/, 225];
                case 90:
                    _22.trys.push([90, 95, , 96]);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _w = __read(argv.item_id.split(":"), 2), contract = _w[0], tokenId = _w[1];
                    ft_token_id = (argv.ft_token_id != undefined) ? new bignumber_js_1.default(argv.ft_token_id) : new bignumber_js_1.default(0);
                    amount_1 = (argv.amount != undefined) ? new bignumber_js_1.default(argv.amount) : new bignumber_js_1.default(0);
                    buyRequest = {
                        asset_contract: contract,
                        asset_token_id: new bignumber_js_1.default(tokenId),
                        asset_seller: argv.owner,
                        sale_type: argv.sale_type,
                        sale_asset_contract: argv.ft_contract,
                        sale_asset_token_id: ft_token_id,
                        sale_amount: amount_1,
                        sale_qty: new bignumber_js_1.default(argv.qty),
                        sale_payouts: [],
                        sale_origin_fees: [],
                        use_all: false,
                    };
                    return [4 /*yield*/, (0, buy_1.isExistsSaleOrder)(provider, buyRequest)];
                case 91:
                    isOrderExists = _22.sent();
                    if (!isOrderExists) return [3 /*break*/, 93];
                    return [4 /*yield*/, (0, buy_1.buyV2)(provider, buyRequest)];
                case 92:
                    op = _22.sent();
                    return [2 /*return*/, op];
                case 93: throw new Error("Error order does not exist");
                case 94: return [3 /*break*/, 96];
                case 95:
                    e_2 = _22.sent();
                    try {
                        console.error(JSON.stringify(e_2, null, ' '));
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return [3 /*break*/, 96];
                case 96: return [3 /*break*/, 225];
                case 97:
                    batch_buy_form_1 = [];
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 98:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    ft_token_id_1 = (argv.ft_token_id != undefined) ? new bignumber_js_1.default(argv.ft_token_id) : new bignumber_js_1.default(0);
                    amount_2 = (argv.amount != undefined) ? new bignumber_js_1.default(argv.amount) : new bignumber_js_1.default(0);
                    items_3 = argv.item_id.split(",");
                    items_3.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        batch_buy_form_1.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_seller: argv.owner,
                            sale_type: argv.sale_type,
                            sale_asset_contract: argv.ft_contract,
                            sale_asset_token_id: ft_token_id_1,
                            sale_amount: amount_2,
                            sale_qty: new bignumber_js_1.default(argv.qty),
                            sale_payouts: [],
                            sale_origin_fees: [],
                            use_all: false,
                        });
                    });
                    return [4 /*yield*/, (0, buy_1.buy_v2_batch)(provider, batch_buy_form_1)];
                case 99:
                    op = _22.sent();
                    return [2 /*return*/, op];
                case 100:
                    orders = argv.item_id.split(",");
                    cart_orders = [];
                    try {
                        for (orders_1 = __values(orders), orders_1_1 = orders_1.next(); !orders_1_1.done; orders_1_1 = orders_1.next()) {
                            order = orders_1_1.value;
                            cart_orders.push({
                                order_id: order,
                                amount: new bignumber_js_1.default(1),
                                payouts: [],
                                origin_fees: []
                            });
                        }
                    }
                    catch (e_9_1) { e_9 = { error: e_9_1 }; }
                    finally {
                        try {
                            if (orders_1_1 && !orders_1_1.done && (_18 = orders_1.return)) _18.call(orders_1);
                        }
                        finally { if (e_9) throw e_9.error; }
                    }
                    return [4 /*yield*/, (0, cart_purchase_1.cart_purchase)(provider, cart_orders)];
                case 101:
                    op = _22.sent();
                    return [2 /*return*/, op];
                case 102:
                    orders = argv.item_id.split(",");
                    cart_orders = [];
                    try {
                        for (orders_2 = __values(orders), orders_2_1 = orders_2.next(); !orders_2_1.done; orders_2_1 = orders_2.next()) {
                            order = orders_2_1.value;
                            cart_orders.push({
                                order_id: order,
                                amount: new bignumber_js_1.default(1),
                                payouts: [],
                                origin_fees: []
                            });
                        }
                    }
                    catch (e_10_1) { e_10 = { error: e_10_1 }; }
                    finally {
                        try {
                            if (orders_2_1 && !orders_2_1.done && (_19 = orders_2.return)) _19.call(orders_2);
                        }
                        finally { if (e_10) throw e_10.error; }
                    }
                    return [4 /*yield*/, (0, bids_2.bid_purchase)(provider, cart_orders)];
                case 103:
                    op = _22.sent();
                    return [2 /*return*/, op];
                case 104:
                    _22.trys.push([104, 106, , 107]);
                    items_4 = argv.item_id.split(",");
                    bundle_2 = [];
                    items_4.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_2.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    amount_3 = (argv.amount != undefined) ? new bignumber_js_1.default(argv.amount) : new bignumber_js_1.default(0);
                    buyRequest = {
                        bundle: bundle_2,
                        asset_seller: argv.owner,
                        sale_type: argv.sale_type,
                        sale_asset_contract: argv.ft_contract,
                        sale_asset_token_id: argv.ft_token_id,
                        sale_amount: amount_3,
                        sale_qty: new bignumber_js_1.default(argv.qty),
                        sale_payouts: [],
                        sale_origin_fees: [],
                        use_all: false,
                    };
                    return [4 /*yield*/, (0, buy_1.buy_bundle)(provider, buyRequest)];
                case 105:
                    op = _22.sent();
                    return [2 /*return*/, op];
                case 106:
                    e_3 = _22.sent();
                    try {
                        console.error(JSON.stringify(e_3, null, ' '));
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return [3 /*break*/, 107];
                case 107: return [3 /*break*/, 225];
                case 108:
                    console.log("auction item", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _x = __read(argv.item_id.split(":"), 2), contract = _x[0], tokenId = _x[1];
                    auction_request = {
                        sell_asset_contract: contract,
                        sell_asset_token_id: new bignumber_js_1.default(tokenId),
                        sell_asset_amount: new bignumber_js_1.default("1"),
                        buy_asset_type: argv.sale_type,
                        buy_asset_contract: argv.ft_contract,
                        buy_asset_token_id: argv.ft_token_id,
                        start: undefined,
                        duration: new bignumber_js_1.default("30"),
                        minimal_price: new bignumber_js_1.default("10"),
                        max_seller_fees: new bignumber_js_1.default("10000"),
                        buyout_price: new bignumber_js_1.default("100000"),
                        minimal_step: new bignumber_js_1.default("1"),
                        payouts: [],
                        origin_fees: []
                    };
                    return [4 /*yield*/, (0, index_1.start_auction)(provider, auction_request)];
                case 109:
                    auction = _22.sent();
                    return [2 /*return*/, auction];
                case 110:
                    console.log("auction item", argv.item_id);
                    items_5 = argv.item_id.split(",");
                    bundle_3 = [];
                    items_5.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_3.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    auction_request = {
                        bundle: bundle_3,
                        buy_asset_type: argv.sale_type,
                        buy_asset_contract: argv.ft_contract,
                        buy_asset_token_id: argv.ft_token_id,
                        start: undefined,
                        duration: new bignumber_js_1.default("30"),
                        minimal_price: new bignumber_js_1.default("10"),
                        max_seller_fees: new bignumber_js_1.default("10000"),
                        buyout_price: new bignumber_js_1.default("100000"),
                        minimal_step: new bignumber_js_1.default("1"),
                        payouts: [],
                        origin_fees: []
                    };
                    return [4 /*yield*/, (0, index_1.start_bundle_auction)(provider, auction_request)];
                case 111:
                    auction = _22.sent();
                    return [2 /*return*/, auction];
                case 112:
                    console.log("put_auction_bid", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _y = __read(argv.item_id.split(":"), 2), contract = _y[0], tokenId = _y[1];
                    _20 = {
                        asset_contract: contract,
                        asset_token_id: new bignumber_js_1.default(tokenId),
                        amount: new bignumber_js_1.default("0.00001"),
                        payouts: [],
                        origin_fees: []
                    };
                    return [4 /*yield*/, provider.tezos.address()];
                case 113:
                    bid = (_20.bidder = _22.sent(),
                        _20.asset_seller = argv.owner,
                        _20);
                    return [4 /*yield*/, (0, index_1.put_auction_bid)(provider, bid, contract, new bignumber_js_1.default(tokenId), argv.owner)];
                case 114:
                    auction = _22.sent();
                    return [2 /*return*/, auction];
                case 115:
                    console.log("put_bundle_auction_bid", argv.item_id);
                    items_6 = argv.item_id.split(",");
                    bundle_4 = [];
                    items_6.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_4.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    _21 = {
                        bundle: bundle_4,
                        amount: new bignumber_js_1.default("0.00001"),
                        payouts: [],
                        origin_fees: []
                    };
                    return [4 /*yield*/, provider.tezos.address()];
                case 116:
                    bid = (_21.bidder = _22.sent(),
                        _21.asset_seller = argv.owner,
                        _21);
                    return [4 /*yield*/, (0, index_1.put_bundle_auction_bid)(provider, bid, argv.owner)];
                case 117:
                    auction = _22.sent();
                    return [2 /*return*/, auction];
                case 118:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, fulfill_ask_1.objkt_fulfill_ask_v2)(provider, argv.item_id)];
                case 119:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 120:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, fulfill_ask_2.objkt_fulfill_ask_v1)(provider, argv.item_id)];
                case 121:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 122:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, fullfil_bid_1.objkt_fulfill_bid_v1)(provider, argv.item_id)];
                case 123:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 124:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, fulfill_offer_1.objkt_fulfill_bid_v2)(provider, argv.item_id)];
                case 125:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 126:
                    console.log("cancel ask", argv.item_id);
                    return [4 /*yield*/, (0, retract_ask_1.objkt_retract_ask_v2)(provider, argv.item_id)];
                case 127:
                    order = _22.sent();
                    console.log('cancel=', order);
                    return [2 /*return*/, order];
                case 128:
                    console.log("cancel ask", argv.item_id);
                    return [4 /*yield*/, (0, retract_aks_1.objkt_retract_ask_v1)(provider, argv.item_id)];
                case 129:
                    order = _22.sent();
                    console.log('cancel=', order);
                    return [2 /*return*/, order];
                case 130:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, hen_collect_1.hen_collect)(provider, argv.item_id)];
                case 131:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 132:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, teia_collect_1.teia_collect)(provider, argv.item_id)];
                case 133:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 134:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, versum_collect_1.versum_collect)(provider, argv.item_id, new bignumber_js_1.default(argv.qty))];
                case 135:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 136:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, versum_accept_bid_1.versum_accept_bid)(provider, argv.item_id)];
                case 137:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 138:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, fxhash_v1_collect_1.fxhash_v1_collect)(provider, argv.item_id)];
                case 139:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 140:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, fxhash_v2_listing_accept_1.fxhash_v2_listing_accept)(provider, argv.item_id)];
                case 141:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 142:
                    console.log("buy item", argv.item_id);
                    return [4 /*yield*/, (0, fxhash_v2_bid_accept_1.fxhash_v2_bid_accept)(provider, argv.item_id)];
                case 143:
                    order = _22.sent();
                    console.log('order=', order);
                    return [2 /*return*/, order];
                case 144:
                    console.log("cancel swap", argv.item_id);
                    return [4 /*yield*/, (0, cancel_2.hen_cancel_swap)(provider, argv.item_id)];
                case 145:
                    order = _22.sent();
                    return [2 /*return*/, order];
                case 146:
                    console.log("cancel swap", argv.item_id);
                    return [4 /*yield*/, (0, cancel_3.teia_cancel_swap)(provider, argv.item_id)];
                case 147:
                    order = _22.sent();
                    return [2 /*return*/, order];
                case 148:
                    console.log("cancel swap", argv.item_id);
                    return [4 /*yield*/, (0, versum_cancel_1.versum_cancel_swap)(provider, argv.item_id)];
                case 149:
                    order = _22.sent();
                    return [2 /*return*/, order];
                case 150:
                    console.log("cancel swap", argv.item_id);
                    return [4 /*yield*/, (0, fxhash_v1_cancel_1.fxhash_v1_cancel_offer)(provider, argv.item_id)];
                case 151:
                    order = _22.sent();
                    return [2 /*return*/, order];
                case 152:
                    console.log("cancel swap", argv.item_id);
                    return [4 /*yield*/, (0, fxhash_v2_cancel_1.fxhash_v2_cancel_listing)(provider, argv.item_id)];
                case 153:
                    order = _22.sent();
                    return [2 /*return*/, order];
                case 154:
                    console.log("cancel auction", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _z = __read(argv.item_id.split(":"), 2), contract = _z[0], tokenId = _z[1];
                    return [4 /*yield*/, (0, index_1.cancel_auction)(provider, contract, new bignumber_js_1.default(tokenId))];
                case 155:
                    auction = _22.sent();
                    return [2 /*return*/, auction];
                case 156:
                    _22.trys.push([156, 161, , 162]);
                    _1 = (_0 = console).log;
                    _3 = (_2 = "cancel legacy order=".concat(argv.order_id, " from ")).concat;
                    return [4 /*yield*/, provider.tezos.address()];
                case 157:
                    _1.apply(_0, [_3.apply(_2, [_22.sent()])]);
                    return [4 /*yield*/, (0, tezos_common_1.get_orders_by_ids)(provider.config, [argv.order_id])];
                case 158:
                    response = _22.sent();
                    console.log("fetched order = " + JSON.stringify(response.orders[0].data));
                    order = (0, index_1.order_of_json)(response.orders[0].data);
                    return [4 /*yield*/, (0, index_1.cancel)(provider, order)];
                case 159:
                    op = _22.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 160:
                    _22.sent();
                    return [2 /*return*/, op];
                case 161:
                    e_4 = _22.sent();
                    try {
                        console.error(JSON.stringify(e_4, null, ' '));
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return [3 /*break*/, 162];
                case 162: return [3 /*break*/, 225];
                case 163:
                    console.log("cancel_v2", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _4 = __read(argv.item_id.split(":"), 2), contract = _4[0], tokenId = _4[1];
                    cancel_request = {
                        asset_contract: contract,
                        asset_token_id: new bignumber_js_1.default(tokenId),
                        sale_asset_contract: argv.ft_contract,
                        sale_asset_token_id: argv.ft_token_id,
                        sale_type: argv.sale_type
                    };
                    return [4 /*yield*/, (0, cancel_1.cancelV2)(provider, cancel_request)];
                case 164:
                    canceled_order = _22.sent();
                    return [2 /*return*/, canceled_order];
                case 165:
                    console.log("cancel_bundle_sale", argv.item_id);
                    items_7 = argv.item_id.split(",");
                    bundle_5 = [];
                    items_7.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_5.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    cancel_request = {
                        bundle: bundle_5,
                        sale_asset_contract: argv.ft_contract,
                        sale_asset_token_id: argv.ft_token_id,
                        sale_type: argv.sale_type
                    };
                    return [4 /*yield*/, (0, cancel_1.cancel_bundle_sale)(provider, cancel_request)];
                case 166:
                    canceled_order = _22.sent();
                    return [2 /*return*/, canceled_order];
                case 167:
                    console.log("cancel_bid", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _5 = __read(argv.item_id.split(":"), 2), contract = _5[0], tokenId = _5[1];
                    cancel_request = {
                        asset_contract: contract,
                        asset_token_id: new bignumber_js_1.default(tokenId),
                        bid_asset_contract: argv.ft_contract,
                        bid_asset_token_id: argv.ft_token_id,
                        bid_type: argv.sale_type
                    };
                    return [4 /*yield*/, (0, bids_1.cancel_bid)(provider, cancel_request)];
                case 168:
                    canceled_order = _22.sent();
                    return [2 /*return*/, canceled_order];
                case 169:
                    console.log("cancel_floor_bid", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _6 = __read(argv.item_id.split(":"), 2), contract = _6[0], tokenId = _6[1];
                    cancel_request = {
                        asset_contract: contract,
                        bid_asset_contract: argv.ft_contract,
                        bid_asset_token_id: argv.ft_token_id,
                        bid_type: argv.sale_type
                    };
                    return [4 /*yield*/, (0, bids_1.cancel_floor_bid)(provider, cancel_request)];
                case 170:
                    canceled_order = _22.sent();
                    return [2 /*return*/, canceled_order];
                case 171:
                    console.log("cancel_bundle_bid", argv.item_id);
                    items_8 = argv.item_id.split(",");
                    bundle_6 = [];
                    items_8.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_6.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    cancel_request = {
                        bundle: bundle_6,
                        bid_asset_contract: argv.ft_contract,
                        bid_asset_token_id: argv.ft_token_id,
                        bid_type: argv.sale_type
                    };
                    return [4 /*yield*/, (0, bids_1.cancel_bundle_bid)(provider, cancel_request)];
                case 172:
                    canceled_order = _22.sent();
                    return [2 /*return*/, canceled_order];
                case 173:
                    console.log("cancel_bundle_auction", argv.item_id);
                    items_9 = argv.item_id.split(",");
                    bundle_7 = [];
                    items_9.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_7.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    return [4 /*yield*/, (0, index_1.cancel_bundle_auction)(provider, bundle_7)];
                case 174:
                    auction = _22.sent();
                    return [2 /*return*/, auction];
                case 175:
                    console.log("finish auction", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _7 = __read(argv.item_id.split(":"), 2), contract = _7[0], tokenId = _7[1];
                    return [4 /*yield*/, (0, index_1.finish_auction)(provider, contract, new bignumber_js_1.default(tokenId), argv.owner)];
                case 176:
                    auction = _22.sent();
                    return [2 /*return*/, auction];
                case 177:
                    console.log("finish_bundle_auction", argv.item_id);
                    items_10 = argv.item_id.split(",");
                    bundle_8 = [];
                    items_10.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_8.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    return [4 /*yield*/, (0, index_1.finish_bundle_auction)(provider, bundle_8, argv.owner)];
                case 178:
                    auction = _22.sent();
                    return [2 /*return*/, auction];
                case 179:
                    console.log("auction item", argv.item_id);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 180:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _8 = __read(argv.item_id.split(":"), 2), contract = _8[0], tokenId = _8[1];
                    return [4 /*yield*/, (0, index_1.get_auction)(provider, contract, new bignumber_js_1.default(tokenId), "tz1Mxsc66En4HsVHr6rppYZW82ZpLhpupToC")];
                case 181:
                    auction = _22.sent();
                    return [2 /*return*/, auction];
                case 182:
                    console.log("put_bid", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _9 = __read(argv.item_id.split(":"), 2), contract = _9[0], tokenId = _9[1];
                    bid = {
                        asset_contract: contract,
                        asset_token_id: new bignumber_js_1.default(tokenId),
                        bid_asset_contract: argv.ft_contract,
                        bid_asset_token_id: argv.ft_token_id,
                        bid_type: argv.sale_type,
                        bid: {
                            bid_amount: new bignumber_js_1.default("0.01"),
                            bid_asset_qty: new bignumber_js_1.default("1"),
                            bid_payouts: [],
                            bid_origin_fees: [],
                            bid_data: undefined,
                            bid_data_type: undefined
                        }
                    };
                    console.log('bid request', JSON.stringify(bid, null, '  '));
                    return [4 /*yield*/, (0, bids_1.put_bid)(provider, bid)];
                case 183:
                    bid_op = _22.sent();
                    return [2 /*return*/, bid_op];
                case 184:
                    console.log("accept_bid", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _10 = __read(argv.item_id.split(":"), 2), contract = _10[0], tokenId = _10[1];
                    bid_data = {
                        bid_asset_contract: argv.ft_contract,
                        bid_asset_token_id: argv.ft_token_id,
                        bid_type: argv.sale_type,
                        bid_payouts: [],
                        bid_origin_fees: [],
                        asset_contract: contract,
                        asset_token_id: new bignumber_js_1.default(tokenId),
                        bidder: argv.owner
                    };
                    console.log('bid_data', JSON.stringify(bid_data, null, '  '));
                    return [4 /*yield*/, (0, bids_1.accept_bid)(provider, bid_data)];
                case 185:
                    result = _22.sent();
                    return [2 /*return*/, result];
                case 186:
                    console.log("put_floor_bid", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _11 = __read(argv.item_id.split(":"), 2), contract = _11[0], tokenId = _11[1];
                    bid = {
                        asset_contract: contract,
                        bid_asset_contract: argv.ft_contract,
                        bid_asset_token_id: argv.ft_token_id,
                        bid_type: argv.sale_type,
                        bid: {
                            bid_amount: new bignumber_js_1.default("0.01"),
                            bid_asset_qty: new bignumber_js_1.default("1"),
                            bid_payouts: [],
                            bid_origin_fees: [],
                            bid_data: undefined,
                            bid_data_type: undefined
                        }
                    };
                    return [4 /*yield*/, (0, bids_1.put_floor_bid)(provider, bid)];
                case 187:
                    bid_op = _22.sent();
                    return [2 /*return*/, bid_op];
                case 188:
                    console.log("accept_floor_bid", argv.item_id);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _12 = __read(argv.item_id.split(":"), 2), contract = _12[0], tokenId = _12[1];
                    bid_data = {
                        bid_asset_contract: argv.ft_contract,
                        bid_asset_token_id: argv.ft_token_id,
                        bid_type: argv.sale_type,
                        bid_payouts: [],
                        bid_origin_fees: [],
                        asset_contract: contract,
                        asset_token_id: new bignumber_js_1.default(tokenId),
                        bidder: argv.owner
                    };
                    return [4 /*yield*/, (0, bids_1.accept_bid)(provider, bid_data, true)];
                case 189:
                    result = _22.sent();
                    return [2 /*return*/, result];
                case 190:
                    console.log("put_bundle_bid", argv.item_id);
                    items_11 = argv.item_id.split(",");
                    bundle_9 = [];
                    items_11.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_9.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    bid = {
                        bundle: bundle_9,
                        bid_asset_contract: argv.ft_contract,
                        bid_asset_token_id: argv.ft_token_id,
                        bid_type: argv.sale_type,
                        bid: {
                            bid_amount: new bignumber_js_1.default("0.01"),
                            bid_payouts: [],
                            bid_origin_fees: [],
                            bid_data: undefined,
                            bid_data_type: undefined
                        }
                    };
                    return [4 /*yield*/, (0, bids_1.put_bundle_bid)(provider, bid)];
                case 191:
                    bid_op = _22.sent();
                    return [2 /*return*/, bid_op];
                case 192:
                    console.log("accept_bundle_bid", argv.item_id);
                    items_12 = argv.item_id.split(",");
                    bundle_10 = [];
                    items_12.forEach(function (item) {
                        var _a = __read(item.split(":"), 2), contract = _a[0], tokenId = _a[1];
                        bundle_10.push({
                            asset_contract: contract,
                            asset_token_id: new bignumber_js_1.default(tokenId),
                            asset_quantity: new bignumber_js_1.default(1)
                        });
                    });
                    bid_data = {
                        bundle: bundle_10,
                        bid_type: argv.sale_type,
                        bid_payouts: [],
                        bid_origin_fees: [],
                        bid_asset_contract: argv.ft_contract,
                        bid_asset_token_id: argv.ft_token_id,
                        bidder: argv.owner
                    };
                    return [4 /*yield*/, (0, bids_1.accept_bundle_bid)(provider, bid_data)];
                case 193:
                    result = _22.sent();
                    return [2 /*return*/, result];
                case 194:
                    {
                        try {
                            return [2 /*return*/, (0, tezos_common_1.get_decimals)(provider.config, argv.ft_contract, argv.ft_token_id)];
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                    _22.label = 195;
                case 195:
                    _22.trys.push([195, 197, , 198]);
                    return [4 /*yield*/, (0, index_1.await_order)(provider.config, "TEZOS:".concat(argv.ft_contract, ":").concat(argv.ft_token_id), argv.order_id, index_1.ProtocolActivity.LIST, argv.owner, 20, 2000)];
                case 196: return [2 /*return*/, _22.sent()];
                case 197:
                    e_5 = _22.sent();
                    console.error(e_5);
                    return [3 /*break*/, 198];
                case 198:
                    _22.trys.push([198, 201, , 202]);
                    return [4 /*yield*/, provider.tezos.sign(argv.message, "operation")];
                case 199:
                    signature = _22.sent();
                    return [4 /*yield*/, provider.tezos.public_key()];
                case 200:
                    pk = _22.sent();
                    if (pk == undefined) {
                        throw new Error("publicKey is undefined");
                    }
                    return [2 /*return*/, (0, tezos_common_1.check_signature)(argv.message, signature.signature, pk, provider)];
                case 201:
                    e_6 = _22.sent();
                    console.error(e_6);
                    return [3 /*break*/, 202];
                case 202:
                    {
                        try {
                            return [2 /*return*/, (0, tezos_common_1.get_ft_type)(provider.config, argv.ft_contract)];
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                    _22.label = 203;
                case 203:
                    {
                        try {
                            if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                                throw new Error("item_id was not set or set incorrectly");
                            }
                            _13 = __read(argv.item_id.split(":"), 2), contract = _13[0], tokenId = _13[1];
                            return [2 /*return*/, (0, index_1.get_asset_type)(provider, {
                                    contract: contract,
                                    token_id: new bignumber_js_1.default(tokenId)
                                })];
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                    _22.label = 204;
                case 204:
                    {
                        try {
                            if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                                throw new Error("item_id was not set or set incorrectly");
                            }
                            _14 = __read(argv.item_id.split(":"), 2), contract = _14[0], tokenId = _14[1];
                            return [2 /*return*/, (0, index_1.get_royalties)(provider, contract, new bignumber_js_1.default(tokenId))];
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                    _22.label = 205;
                case 205:
                    {
                        try {
                            if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                                throw new Error("item_id was not set or set incorrectly");
                            }
                            _15 = __read(argv.item_id.split(":"), 2), contract = _15[0], tokenId = _15[1];
                            return [2 /*return*/, (0, index_1.are_royalties_on_chain)(provider, contract, new bignumber_js_1.default(tokenId))];
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                    _22.label = 206;
                case 206:
                    _22.trys.push([206, 208, , 209]);
                    return [4 /*yield*/, (0, tezos_common_1.get_public_key)(provider)];
                case 207:
                    publicKey = _22.sent();
                    if (!publicKey) {
                        throw new Error("publicKey is undefined");
                    }
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _16 = __read(argv.item_id.split(":"), 2), contract = _16[0], tokenId = _16[1];
                    maker = (0, tezos_common_1.pk_to_pkh)(publicKey);
                    return [2 /*return*/, (0, index_1.get_orders)(provider.config, maker, true, "TEZOS:".concat(contract, ":").concat(tokenId))];
                case 208:
                    e_7 = _22.sent();
                    console.error(e_7);
                    return [3 /*break*/, 209];
                case 209:
                    _22.trys.push([209, 211, , 212]);
                    if (!argv.item_id || argv.item_id.split(":").length !== 2) {
                        throw new Error("item_id was not set or set incorrectly");
                    }
                    _17 = __read(argv.item_id.split(":"), 2), contract = _17[0], tokenId = _17[1];
                    return [4 /*yield*/, (0, tezos_common_1.get_active_order_type)(provider.config, argv.owner, "".concat(contract, ":").concat(tokenId))];
                case 210: return [2 /*return*/, _22.sent()];
                case 211:
                    e_8 = _22.sent();
                    console.error(e_8);
                    return [3 /*break*/, 212];
                case 212:
                    {
                        try {
                            return [2 /*return*/, (0, tezos_common_1.get_balance)(provider.config, argv.owner, argv.sale_type, argv.ft_contract, argv.ft_token_id)];
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                    _22.label = 213;
                case 213:
                    console.log("deploy exchange");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_exchange)(provider, owner, argv.transfer_manager, argv.royalties_contract, argv.fill)];
                case 214:
                    op_deploy_exchange = _22.sent();
                    return [4 /*yield*/, op_deploy_exchange.confirmation()];
                case 215:
                    _22.sent();
                    console.log(op_deploy_exchange.contract);
                    return [3 /*break*/, 225];
                case 216:
                    console.log("deploy transfer proxy");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_transfer_proxy)(provider, owner)];
                case 217:
                    op_deploy_transfer_proxy = _22.sent();
                    return [4 /*yield*/, op_deploy_transfer_proxy.confirmation()];
                case 218:
                    _22.sent();
                    console.log(op_deploy_transfer_proxy.contract);
                    return [3 /*break*/, 225];
                case 219:
                    console.log("deploy transfer manager");
                    return [4 /*yield*/, (0, tezos_contracts_1.deploy_transfer_manager)(provider, owner, fee_receiver, new bignumber_js_1.default(argv.protocol_fee))];
                case 220:
                    op_deploy_transfer_manager = _22.sent();
                    return [4 /*yield*/, op_deploy_transfer_manager.confirmation()];
                case 221:
                    _22.sent();
                    console.log(op_deploy_transfer_manager.contract);
                    return [3 /*break*/, 225];
                case 222:
                    console.log('update operators for all');
                    arg_update = {
                        destination: argv.contract,
                        entrypoint: "update_operators_for_all",
                        parameter: [{ prim: 'Left', args: [{ string: argv.operator }] }]
                    };
                    return [4 /*yield*/, (0, tezos_common_1.send)(provider, arg_update)];
                case 223:
                    op_update = _22.sent();
                    return [4 /*yield*/, op_update.confirmation()];
                case 224:
                    _22.sent();
                    console.log(op_update.hash);
                    return [3 /*break*/, 225];
                case 225: return [2 /*return*/];
            }
        });
    });
}
exports.testScript = testScript;
// testScript()
