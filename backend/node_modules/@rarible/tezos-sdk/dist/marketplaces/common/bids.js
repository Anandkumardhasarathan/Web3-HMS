"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bid_purchase = void 0;
var tezos_common_1 = require("@rarible/tezos-common");
var bignumber_js_1 = require("bignumber.js");
var bids_1 = require("../../bids");
var fullfil_bid_1 = require("../objkt/v1/fullfil_bid");
var fulfill_offer_1 = require("../objkt/v2/fulfill_offer");
var versum_accept_bid_1 = require("../versum/versum_accept_bid");
var fxhash_v2_bid_accept_1 = require("../fxhash/v2/fxhash_v2_bid_accept");
var tezos_common_2 = require("@rarible/tezos-common");
function bid_purchase(provider, bids) {
    return __awaiter(this, void 0, void 0, function () {
        var order_ids, orders_data, order_map, _a, _b, order_data, transactions, bids_2, bids_2_1, cart_bid, order, token_id, arg_approve, _c, _d, _e, asset_type, make_token_id, bid_request, bid_arg, bid_arg, objkt_v1_txs, objkt_v2_txs, versum_txs, fxhash_v2_txs, e_1_1, op, e_2;
        var e_3, _f, e_1, _g;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    order_ids = bids.map(function (bid) {
                        return bid.order_id;
                    });
                    return [4 /*yield*/, (0, tezos_common_1.get_orders_by_ids)(provider.config, order_ids)];
                case 1:
                    orders_data = _h.sent();
                    order_map = new Map();
                    try {
                        for (_a = __values(orders_data.orders), _b = _a.next(); !_b.done; _b = _a.next()) {
                            order_data = _b.value;
                            order_map.set(order_data.id, order_data);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    transactions = [];
                    _h.label = 2;
                case 2:
                    _h.trys.push([2, 17, 18, 19]);
                    bids_2 = __values(bids), bids_2_1 = bids_2.next();
                    _h.label = 3;
                case 3:
                    if (!!bids_2_1.done) return [3 /*break*/, 16];
                    cart_bid = bids_2_1.value;
                    order = order_map.get(cart_bid.order_id);
                    token_id = order.take.type.tokenId === undefined ? cart_bid.token_id : new bignumber_js_1.default(order.take.type.tokenId);
                    _c = tezos_common_1.approve_v2;
                    _d = [provider];
                    return [4 /*yield*/, (0, tezos_common_2.get_address)(provider)];
                case 4: return [4 /*yield*/, _c.apply(void 0, _d.concat([_h.sent(), tezos_common_1.AssetTypeV2.FA2,
                        provider.config.transfer_manager,
                        order.take.type.contract.split("TEZOS:")[1],
                        new bignumber_js_1.default(token_id)]))];
                case 5:
                    arg_approve = _h.sent();
                    if (arg_approve)
                        transactions = transactions.concat(arg_approve);
                    _e = order.data["@type"];
                    switch (_e) {
                        case "TEZOS_RARIBLE_V3": return [3 /*break*/, 6];
                        case "TEZOS_OBJKT_V1": return [3 /*break*/, 7];
                        case "TEZOS_OBJKT_V2": return [3 /*break*/, 9];
                        case "TEZOS_VERSUM_V1": return [3 /*break*/, 11];
                        case "TEZOS_FXHASH_V2": return [3 /*break*/, 13];
                    }
                    return [3 /*break*/, 15];
                case 6:
                    asset_type = tezos_common_1.AssetTypeV2.XTZ;
                    switch (order.make.type["@type"]) {
                        case "XTZ":
                            break;
                        case "TEZOS_FT":
                            if (order.make.type.contract != undefined && order.make.type.tokenId != undefined) {
                                asset_type = tezos_common_1.AssetTypeV2.FA2;
                            }
                            else {
                                asset_type = tezos_common_1.AssetTypeV2.FA12;
                            }
                    }
                    make_token_id = undefined;
                    if (order.make.type.tokenId != undefined) {
                        make_token_id = new bignumber_js_1.default(order.make.type.tokenId);
                    }
                    else {
                        make_token_id = undefined;
                    }
                    bid_request = {
                        asset_contract: order.take.type.contract.split("TEZOS:")[1],
                        asset_token_id: token_id,
                        bidder: order.maker.split("TEZOS:")[1],
                        bid_type: asset_type,
                        bid_asset_contract: order.make.type.contract === undefined ? undefined : order.make.type.contract.split("TEZOS:")[1],
                        bid_asset_token_id: make_token_id,
                        bid_origin_fees: cart_bid.origin_fees,
                        bid_payouts: cart_bid.payouts
                    };
                    if (order.take.type.tokenId == undefined) {
                        bid_arg = (0, bids_1.accept_bid_arg)(provider, bid_request, true);
                        transactions = transactions.concat(bid_arg);
                    }
                    else {
                        bid_arg = (0, bids_1.accept_bid_arg)(provider, bid_request, false);
                        transactions = transactions.concat(bid_arg);
                    }
                    return [3 /*break*/, 15];
                case 7: return [4 /*yield*/, (0, fullfil_bid_1.get_objkt_fulfill_bid_v1_transaction)(provider, order.data.internalOrderId, order.take.type.contract.split("TEZOS:")[1], order.take.type.tokenId)];
                case 8:
                    objkt_v1_txs = _h.sent();
                    transactions = transactions.concat(objkt_v1_txs);
                    return [3 /*break*/, 15];
                case 9: return [4 /*yield*/, (0, fulfill_offer_1.get_objkt_fulfill_bid_v2_transaction)(provider, order.data.internalOrderId, order.take.type.contract.split("TEZOS:")[1], order.take.type.tokenId)];
                case 10:
                    objkt_v2_txs = _h.sent();
                    transactions = transactions.concat(objkt_v2_txs);
                    return [3 /*break*/, 15];
                case 11: return [4 /*yield*/, (0, versum_accept_bid_1.get_versum_accept_bid_transaction)(provider, order.data.internalOrderId, order.take.type.contract.split("TEZOS:")[1], order.take.type.tokenId)];
                case 12:
                    versum_txs = _h.sent();
                    transactions = transactions.concat(versum_txs);
                    return [3 /*break*/, 15];
                case 13: return [4 /*yield*/, (0, fxhash_v2_bid_accept_1.get_fxhash_v2_bid_accept_transaction)(provider, order.data.internalOrderId, order.take.type.contract.split("TEZOS:")[1], order.take.type.tokenId)];
                case 14:
                    fxhash_v2_txs = _h.sent();
                    transactions = transactions.concat(fxhash_v2_txs);
                    return [3 /*break*/, 15];
                case 15:
                    bids_2_1 = bids_2.next();
                    return [3 /*break*/, 3];
                case 16: return [3 /*break*/, 19];
                case 17:
                    e_1_1 = _h.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 19];
                case 18:
                    try {
                        if (bids_2_1 && !bids_2_1.done && (_g = bids_2.return)) _g.call(bids_2);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 19:
                    _h.trys.push([19, 21, , 22]);
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, transactions)];
                case 20:
                    op = _h.sent();
                    return [2 /*return*/, op];
                case 21:
                    e_2 = _h.sent();
                    console.log(e_2);
                    return [3 /*break*/, 22];
                case 22: return [2 /*return*/];
            }
        });
    });
}
exports.bid_purchase = bid_purchase;
