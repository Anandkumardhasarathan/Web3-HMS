import { AssetTypeV2, BundleItem, Config, OperationResult, Part, Provider, TransactionArg } from "@rarible/tezos-common";
import BigNumber from "bignumber.js";
export declare type BuyRequest = {
    asset_contract: string;
    asset_token_id: BigNumber;
    asset_seller: string;
    sale_type: AssetTypeV2;
    sale_asset_contract?: string;
    sale_asset_token_id?: BigNumber;
    sale_amount: BigNumber;
    sale_qty: BigNumber;
    sale_payouts: Array<Part>;
    sale_origin_fees: Array<Part>;
    use_all?: boolean;
};
export declare type BuyBundleRequest = {
    bundle: Array<BundleItem>;
    asset_seller: string;
    sale_type: AssetTypeV2;
    sale_asset_contract?: string;
    sale_asset_token_id?: BigNumber;
    sale_amount: BigNumber;
    sale_qty: BigNumber;
    sale_payouts: Array<Part>;
    sale_origin_fees: Array<Part>;
    use_all?: boolean;
};
export declare function process_buy_request(config: Config, order: BuyRequest): Promise<BuyRequest>;
export declare function get_rarible_v2_buy_transaction(provider: Provider, sale: BuyRequest, use_all?: boolean): Promise<TransactionArg[]>;
export declare function buyV2(provider: Provider, sale: BuyRequest, use_all?: boolean): Promise<OperationResult>;
export declare function buy_bundle(provider: Provider, sale: BuyBundleRequest, use_all?: boolean): Promise<OperationResult | undefined>;
export declare function buy_v2_batch(provider: Provider, sale_form: Array<BuyRequest>, use_all?: boolean): Promise<OperationResult | undefined>;
export declare function buy_arg_v2(provider: Provider, sale: BuyRequest): TransactionArg;
export declare function buy_bundle_arg(provider: Provider, sale: BuyBundleRequest): TransactionArg;
export declare function isExistsSaleOrder(provider: Provider, buyRequest: BuyRequest): Promise<boolean>;
