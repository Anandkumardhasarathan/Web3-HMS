"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isExistsSaleOrder = exports.buy_bundle_arg = exports.buy_arg_v2 = exports.buy_v2_batch = exports.buy_bundle = exports.buyV2 = exports.get_rarible_v2_buy_transaction = exports.process_buy_request = void 0;
var tezos_common_1 = require("@rarible/tezos-common");
var bignumber_js_1 = require("bignumber.js");
var approve_1 = require("@rarible/tezos-common/build/approve");
function process_buy_request(config, order) {
    return __awaiter(this, void 0, void 0, function () {
        var ft_type_res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(order.sale_asset_contract != undefined)) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, tezos_common_1.get_ft_type)(config, order.sale_asset_contract)];
                case 1:
                    ft_type_res = _a.sent();
                    if (ft_type_res != undefined) {
                        order.sale_type = ft_type_res;
                        order.sale_asset_token_id = (0, tezos_common_1.process_token_id)(order.sale_type, order.sale_asset_token_id);
                    }
                    _a.label = 2;
                case 2: return [2 /*return*/, order];
            }
        });
    });
}
exports.process_buy_request = process_buy_request;
function get_rarible_v2_buy_transaction(provider, sale, use_all) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        var args, seller, processed_amount, approve_a, is_on_chain, royalties;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    args = [];
                    return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    seller = _a.sent();
                    return [4 /*yield*/, process_buy_request(provider.config, sale)];
                case 2:
                    sale = _a.sent();
                    return [4 /*yield*/, (0, tezos_common_1.absolute_amount)(provider.config, sale.sale_amount, sale.sale_type, sale.sale_asset_contract, sale.sale_asset_token_id)];
                case 3:
                    processed_amount = _a.sent();
                    return [4 /*yield*/, (0, approve_1.approve_v2)(provider, seller, sale.sale_type, provider.config.transfer_manager, sale.sale_asset_contract, sale.sale_asset_token_id, processed_amount.times(sale.sale_qty), use_all)];
                case 4:
                    approve_a = _a.sent();
                    if (approve_a) {
                        args = args.concat(approve_a);
                    }
                    return [4 /*yield*/, (0, tezos_common_1.are_royalties_on_chain)(provider, sale.asset_contract, new bignumber_js_1.default(sale.asset_token_id))];
                case 5:
                    is_on_chain = _a.sent();
                    if (!!is_on_chain) return [3 /*break*/, 7];
                    return [4 /*yield*/, (0, tezos_common_1.get_royalties)(provider, sale.asset_contract, new bignumber_js_1.default(sale.asset_token_id))];
                case 6:
                    royalties = _a.sent();
                    sale.sale_origin_fees = sale.sale_origin_fees.concat(royalties);
                    _a.label = 7;
                case 7:
                    args = args.concat(buy_arg_v2(provider, sale));
                    return [2 /*return*/, args];
            }
        });
    });
}
exports.get_rarible_v2_buy_transaction = get_rarible_v2_buy_transaction;
function buyV2(provider, sale, use_all) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        var args, op;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, get_rarible_v2_buy_transaction(provider, sale, use_all)];
                case 1:
                    args = _a.sent();
                    if (args.length === 0) {
                        throw new Error("Empty array of transaction arguments");
                    }
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, args)];
                case 2:
                    op = _a.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 3:
                    _a.sent();
                    return [2 /*return*/, op];
            }
        });
    });
}
exports.buyV2 = buyV2;
function buy_bundle(provider, sale, use_all) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        var args, seller, processed_amount, approve_a, op;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    args = [];
                    return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    seller = _a.sent();
                    return [4 /*yield*/, (0, tezos_common_1.absolute_amount)(provider.config, sale.sale_amount, sale.sale_type, sale.sale_asset_contract, sale.sale_asset_token_id)];
                case 2:
                    processed_amount = _a.sent();
                    return [4 /*yield*/, (0, approve_1.approve_v2)(provider, seller, sale.sale_type, provider.config.transfer_manager, sale.sale_asset_contract, sale.sale_asset_token_id, processed_amount, use_all)];
                case 3:
                    approve_a = _a.sent();
                    if (approve_a)
                        args = args.concat(approve_a);
                    args = args.concat(buy_bundle_arg(provider, sale));
                    if (!(args.length != 0)) return [3 /*break*/, 6];
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, args)];
                case 4:
                    op = _a.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 5:
                    _a.sent();
                    console.log(op);
                    return [2 /*return*/, op];
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.buy_bundle = buy_bundle;
function buy_v2_batch(provider, sale_form, use_all) {
    if (use_all === void 0) { use_all = false; }
    return __awaiter(this, void 0, void 0, function () {
        var args, seller, sale_form_1, sale_form_1_1, sale, processed_amount, approve_a, e_1_1, op;
        var e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    args = [];
                    return [4 /*yield*/, (0, tezos_common_1.get_address)(provider)];
                case 1:
                    seller = _b.sent();
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 8, 9, 10]);
                    sale_form_1 = __values(sale_form), sale_form_1_1 = sale_form_1.next();
                    _b.label = 3;
                case 3:
                    if (!!sale_form_1_1.done) return [3 /*break*/, 7];
                    sale = sale_form_1_1.value;
                    return [4 /*yield*/, (0, tezos_common_1.absolute_amount)(provider.config, sale.sale_amount, sale.sale_type, sale.sale_asset_contract, sale.sale_asset_token_id)];
                case 4:
                    processed_amount = _b.sent();
                    return [4 /*yield*/, (0, approve_1.approve_v2)(provider, seller, sale.sale_type, provider.config.transfer_manager, sale.sale_asset_contract, sale.sale_asset_token_id, processed_amount, use_all)];
                case 5:
                    approve_a = _b.sent();
                    if (approve_a)
                        args = args.concat(approve_a);
                    args = args.concat(buy_arg_v2(provider, sale));
                    _b.label = 6;
                case 6:
                    sale_form_1_1 = sale_form_1.next();
                    return [3 /*break*/, 3];
                case 7: return [3 /*break*/, 10];
                case 8:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 10];
                case 9:
                    try {
                        if (sale_form_1_1 && !sale_form_1_1.done && (_a = sale_form_1.return)) _a.call(sale_form_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 10:
                    if (!(args.length != 0)) return [3 /*break*/, 13];
                    return [4 /*yield*/, (0, tezos_common_1.send_batch)(provider, args)];
                case 11:
                    op = _b.sent();
                    return [4 /*yield*/, op.confirmation()];
                case 12:
                    _b.sent();
                    console.log(op);
                    return [2 /*return*/, op];
                case 13: return [2 /*return*/];
            }
        });
    });
}
exports.buy_v2_batch = buy_v2_batch;
function buy_arg_v2(provider, sale) {
    var amount = new bignumber_js_1.default(0);
    if (sale.sale_type == tezos_common_1.AssetTypeV2.XTZ) {
        amount = new bignumber_js_1.default(sale.sale_amount).times(sale.sale_qty);
    }
    var parameter = {
        prim: "Pair",
        args: [{ string: "".concat(sale.asset_contract) },
            {
                prim: "Pair",
                args: [{ int: "".concat(sale.asset_token_id) },
                    {
                        prim: "Pair",
                        args: [{ string: "".concat(sale.asset_seller) },
                            {
                                prim: "Pair",
                                args: [{ int: "".concat(sale.sale_type) },
                                    {
                                        prim: "Pair",
                                        args: [{
                                                bytes: (0, tezos_common_1.getAsset)(sale.sale_type, sale.sale_asset_contract, sale.sale_asset_token_id)
                                            },
                                            {
                                                prim: "Pair",
                                                args: [{ int: "".concat(sale.sale_qty) },
                                                    {
                                                        prim: "Pair", args: [
                                                            (0, tezos_common_1.parts_to_micheline)(sale.sale_origin_fees),
                                                            (0, tezos_common_1.parts_to_micheline)(sale.sale_payouts)
                                                        ]
                                                    }]
                                            }]
                                    }]
                            }]
                    }]
            }]
    };
    return { destination: provider.config.sales, entrypoint: "buy", parameter: parameter, amount: amount };
}
exports.buy_arg_v2 = buy_arg_v2;
function buy_bundle_arg(provider, sale) {
    var amount = new bignumber_js_1.default(0);
    if (sale.sale_type == tezos_common_1.AssetTypeV2.XTZ) {
        amount = new bignumber_js_1.default(sale.sale_amount).times(sale.sale_qty);
    }
    var parameter = {
        prim: "Pair",
        args: [{ bytes: (0, tezos_common_1.mkPackedBundle)(sale.bundle) },
            {
                prim: "Pair",
                args: [{ string: "".concat(sale.asset_seller) },
                    {
                        prim: "Pair",
                        args: [{ int: "".concat(sale.sale_type) },
                            {
                                prim: "Pair",
                                args: [{
                                        bytes: (0, tezos_common_1.getAsset)(sale.sale_type, sale.sale_asset_contract, sale.sale_asset_token_id)
                                    },
                                    {
                                        prim: "Pair",
                                        args: [{ int: "".concat(sale.sale_qty) },
                                            { prim: "Pair", args: [[], []] }]
                                    }]
                            }]
                    }]
            }]
    };
    return { destination: provider.config.sales, entrypoint: "buy_bundle", parameter: parameter, amount: amount };
}
exports.buy_bundle_arg = buy_bundle_arg;
function isExistsSaleOrder(provider, buyRequest) {
    return __awaiter(this, void 0, void 0, function () {
        var st, key_exists, ft_token_id, order, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, tezos_common_1.get_storage)(provider, provider.config.sales_storage)];
                case 1:
                    st = _a.sent();
                    key_exists = false;
                    ft_token_id = (buyRequest.sale_asset_token_id != undefined) ? new bignumber_js_1.default(buyRequest.sale_asset_token_id) : new bignumber_js_1.default(0);
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, st.sales.get({
                            0: buyRequest.asset_contract,
                            1: buyRequest.asset_token_id,
                            2: buyRequest.asset_seller,
                            3: buyRequest.sale_type,
                            4: (0, tezos_common_1.getAsset)(buyRequest.sale_type, buyRequest.sale_asset_contract, ft_token_id),
                        })];
                case 3:
                    order = _a.sent();
                    key_exists = order !== undefined;
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _a.sent();
                    console.log(error_1);
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/, key_exists];
            }
        });
    });
}
exports.isExistsSaleOrder = isExistsSaleOrder;
