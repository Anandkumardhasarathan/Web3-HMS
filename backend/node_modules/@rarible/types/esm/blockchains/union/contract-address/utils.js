import { CustomError } from "@rarible/utils";
import { toLayerOneBlockchain, parseBlockchainSafe } from "../enum/utils.js";
import { contractAddressValidators } from "./validators.js";
export function toUnionContractAddress(value) {
    const safe = toUnionContractAddressSafe(value);
    if (!safe)
        throw new InvalidUnionContractAddressError(value);
    return safe;
}
export function toUnionContractAddressSafe(value) {
    if (isUnionContractAddress(value))
        return value;
    return undefined;
}
export function isUnionContractAddress(value) {
    const parsed = parseBlockchainSafe(value);
    if (!parsed)
        return false;
    const [blockchain, address] = parsed;
    const layer1 = toLayerOneBlockchain(blockchain);
    const validator = contractAddressValidators[layer1];
    return validator.validate(address);
}
export class InvalidUnionContractAddressError extends CustomError {
    constructor(address) {
        super(`Not a valid union contract address: ${address}`);
    }
}
