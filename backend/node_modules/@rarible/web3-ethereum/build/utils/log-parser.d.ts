import type * as EthereumProvider from "@rarible/ethereum-provider";
import type { AbiItem } from "web3-utils";
import type { TransactionReceipt } from "web3-core";
import type { Address } from "@rarible/types";
export declare function getContractMethodReceiptEvents(receiptPromise: Promise<TransactionReceipt>): Promise<EthereumProvider.EthereumTransactionEvent[]>;
export declare function getTransactionReceiptEvents(receiptPromise: Promise<TransactionReceipt>, address: Address, abi: AbiItem[]): Promise<EthereumProvider.EthereumTransactionEvent[]>;
/**
 * Parse receipt events of the given contract.
 *
 * Web3 only parses the events of the contract that is returning the receipt. If
 * there are additional events logged by other contracts that were called during
 * the execution of the transaction, those will not be parsed automatically. For
 * those cases, additional parsing effort is required.
 *
 * @param {AbiItem[]} abi The ABI of the contract.
 * @param {string} address The address of the contract.
 * @param {TransactionReceipt} receipt The receipt to parse.
 * @returns {TransactionReceipt} The patched receipt.
 */
export declare function parseReceiptEvents(abi: AbiItem[], address: Address, receipt: TransactionReceipt): EthereumProvider.EthereumTransactionEvent[];
