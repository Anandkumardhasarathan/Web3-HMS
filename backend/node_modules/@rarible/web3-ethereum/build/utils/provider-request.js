"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.providerRequest = void 0;
const tslib_1 = require("tslib");
function providerRequest(provider, method, params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (typeof provider !== "object" || provider === null) {
            throw new Error("Provider is not an object");
        }
        if (typeof provider.request !== "function") {
            return requestLegacy(provider, method, params);
        }
        return provider.request({ method, params });
    });
}
exports.providerRequest = providerRequest;
function legacySend(provider, payload, callback) {
    if (provider !== null && typeof provider === "object") {
        if (typeof provider.sendAsync === "function") {
            provider.sendAsync(payload, callback);
        }
        else if (typeof provider.send === "function") {
            provider.send(payload, callback);
        }
        else {
            throw new Error("No send method defined");
        }
    }
    else {
        throw new Error("No send method defined");
    }
}
function requestLegacy(provider, method, params) {
    return new Promise((resolve, reject) => {
        try {
            legacySend(provider, {
                jsonrpc: "2.0",
                id: new Date().getTime(),
                method,
                params,
            }, (error, result) => {
                const err = error || (result === null || result === void 0 ? void 0 : result.error);
                if (err) {
                    reject(err);
                }
                if (result === null || result === void 0 ? void 0 : result.result) {
                    resolve(result.result);
                }
                reject(new Error("Can't handle JSON-RPC request"));
            });
        }
        catch (error) {
            reject(error);
        }
    });
}
