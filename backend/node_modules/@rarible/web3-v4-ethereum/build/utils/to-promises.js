"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPromiEventConfirmationPromise = exports.getPromiEventHashPromise = exports.getPromiEventReceiptPromise = exports.toPromises = void 0;
function toPromises(promiEvent) {
    return {
        hash: getPromiEventHashPromise(promiEvent),
        receipt: getPromiEventReceiptPromise(promiEvent),
        confirmation: getPromiEventConfirmationPromise(promiEvent),
    };
}
exports.toPromises = toPromises;
function getPromiEventReceiptPromise(promiEvent) {
    return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => reject(new Error("PromiEvent timeout")), 1000 * 60 * 30);
        promiEvent.once("error", err => {
            clearTimeout(timeout);
            reject(err);
        });
        promiEvent.once("receipt", receipt => {
            clearTimeout(timeout);
            resolve(receipt);
        });
        promiEvent.catch(err => {
            clearTimeout(timeout);
            reject(err);
        });
    });
}
exports.getPromiEventReceiptPromise = getPromiEventReceiptPromise;
function getPromiEventHashPromise(promiEvent) {
    return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => reject(new Error("PromiEvent timeout")), 1000 * 60 * 30);
        promiEvent.once("error", err => {
            clearTimeout(timeout);
            reject(err);
        });
        promiEvent.once("transactionHash", hash => {
            clearTimeout(timeout);
            resolve(hash);
        });
        promiEvent.catch(err => {
            clearTimeout(timeout);
            reject(err);
        });
    });
}
exports.getPromiEventHashPromise = getPromiEventHashPromise;
function getPromiEventConfirmationPromise(promiEvent) {
    return new Promise((resolve, reject) => {
        const timeout = setTimeout(() => reject(new Error("PromiEvent timeout")), 1000 * 60 * 30);
        promiEvent.once("error", err => {
            clearTimeout(timeout);
            reject(err);
        });
        promiEvent.once("confirmation", ({ receipt }) => {
            clearTimeout(timeout);
            resolve(receipt.transactionHash);
        });
        promiEvent.catch(err => {
            clearTimeout(timeout);
            reject(err);
        });
    });
}
exports.getPromiEventConfirmationPromise = getPromiEventConfirmationPromise;
